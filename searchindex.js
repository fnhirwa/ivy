Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/add", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/round", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/square", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/zero_pad", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/sort", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/max", "functional/ivy/statistical/mean", "functional/ivy/statistical/min", "functional/ivy/statistical/prod", "functional/ivy/statistical/std", "functional/ivy/statistical/sum", "functional/ivy/statistical/var", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/var.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "acos", "acosh", "add", "asin", "ivy.Container.asin", "ivy.asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "cos", "cosh", "divide", "equal", "erf", "ivy.Container.erf", "ivy.erf", "exp", "expm1", "floor", "floor_divide", "greater", "greater_equal", "isfinite", "isinf", "isnan", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "remainder", "round", "sign", "sin", "ivy.Container.sin", "ivy.sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "General", "all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "Manipulation", "clip", "ivy.clip", "ivy.Container.static_clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "sort", "Statistical", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "Utility", "all", "ivy.Container.all", "ivy.all", "any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 356, 357, 359, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 385, 386, 387, 428, 447, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 579, 582, 613, 619, 638, 761], "ivi": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 761, 767, 807, 808], "arrai": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 387, 388, 396, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 442, 444, 447, 449, 450, 452, 456, 461, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 501, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 587, 588, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 608, 609, 610, 611, 612, 613, 615, 616, 618, 621, 622, 623, 625, 626, 631, 632, 635, 637, 638, 639, 641, 642, 761], "arraywithactiv": 0, "sourc": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 363, 364, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 761, 807, 808], "base": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 177, 178, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 359, 362, 364, 370, 386, 409, 419, 428, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 511, 539, 550, 551, 552, 553, 565, 579, 604, 627, 634], "abc": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 372, 461, 470, 476, 579, 598], "activ": [1, 158, 159, 178, 347, 348, 350, 351, 353, 355, 374, 399, 400, 401, 402, 403, 404, 405, 761], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 765, 766, 767, 769, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 805, 806, 808], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 354, 358, 360, 361, 362, 363, 366, 368, 369, 372, 375, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 765, 766, 767, 769, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 799, 800, 801, 802, 803, 805, 806, 808], "collect": [117, 179, 180, 359, 386, 398, 406, 461, 579], "function": [117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 174, 179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 361, 363, 367, 369, 371, 372, 373, 374, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 761], "wrap": [117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 159, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 348, 354, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 375, 387, 388, 396, 579, 586], "accept": [117, 350, 351, 356, 357, 359, 360, 363, 364, 366, 367, 368, 372, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 556, 557, 563, 566, 567, 573, 574, 576, 577, 579, 601, 761], "return": [117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 164, 165, 172, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 460, 461, 470, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 761], "instanc": [117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 347, 348, 352, 356, 357, 359, 360, 363, 365, 367, 368, 373, 374, 375, 388, 396, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 461, 470, 502, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 544, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 590, 601, 613, 637, 639], "args_to_ivi": 117, "arg": [117, 118, 119, 160, 164, 179, 180, 353, 370, 372, 374, 461, 470, 485, 489, 493, 505, 579, 626], "include_deriv": [117, 118, 119, 120, 121], "none": [117, 118, 119, 120, 121, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 162, 165, 172, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 355, 357, 360, 364, 365, 366, 367, 368, 370, 372, 374, 375, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 434, 436, 439, 440, 441, 444, 447, 461, 470, 471, 479, 480, 503, 504, 505, 506, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 587, 588, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 607, 609, 610, 614, 620, 622, 625, 626, 627, 628, 633, 634, 640], "kwarg": [117, 118, 119, 160, 164, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 370, 372, 374, 461, 470, 485, 489, 493, 579, 619], "keyword": [117, 118, 119, 179, 180, 181, 182, 183, 355, 365, 366, 367, 368, 373, 409, 420, 461, 470, 471, 485, 489, 493, 579, 582, 619], "variabl": [117, 118, 119, 120, 121, 179, 180, 356, 361, 364, 365, 367, 368, 373, 374, 375, 387, 579, 585, 611, 612, 613, 614, 615, 616, 618, 635, 761], "form": [117, 118, 119, 120, 121, 175, 179, 180, 349, 360, 374, 375, 409, 411, 421, 424, 425, 579, 581], "all": [117, 118, 119, 120, 121, 156, 157, 158, 159, 174, 175, 176, 179, 180, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 388, 396, 406, 407, 409, 410, 424, 425, 461, 470, 495, 501, 579, 580, 583, 584, 603, 623, 638, 761], "nest": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 355, 360, 363, 364, 372, 373, 374, 387, 461, 485, 489, 493, 579, 637], "otherwis": [117, 118, 119, 120, 121, 160, 172, 179, 180, 363, 365, 366, 368, 370, 372, 409, 410, 428, 434, 437, 439, 440, 441, 461, 480, 511, 545, 546, 547, 579, 585, 640], "argument": [117, 118, 119, 120, 121, 160, 164, 165, 174, 179, 180, 181, 182, 183, 352, 354, 355, 356, 357, 359, 360, 361, 363, 364, 370, 372, 373, 406, 407, 409, 410, 428, 437, 452, 461, 470, 471, 485, 489, 493, 511, 515, 516, 518, 531, 541, 563, 573, 574, 576, 579, 581, 582, 586, 594, 601, 619, 626], "ar": [117, 118, 119, 174, 175, 176, 179, 180, 181, 182, 183, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 396, 409, 410, 461, 470, 471, 495, 499, 501, 505, 511, 532, 556, 557, 567, 569, 571, 576, 579, 580, 583, 584, 585, 603, 609, 610, 614, 621, 623, 635, 761], "unchang": [117, 118, 119, 120, 121], "paramet": [117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 179, 180, 181, 182, 183, 347, 348, 355, 356, 359, 372, 373, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 470, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642], "iter": [117, 118, 119, 120, 121, 158, 159, 176, 179, 180, 181, 182, 183, 347, 348, 364, 370, 373, 406, 407, 461, 483, 484, 486, 487, 488, 489, 492, 505, 579, 580, 626, 631], "ani": [117, 118, 119, 156, 157, 158, 159, 160, 164, 172, 174, 175, 176, 179, 180, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 406, 407, 409, 411, 421, 428, 437, 461, 506, 511, 515, 516, 518, 531, 535, 541, 544, 549, 563, 573, 574, 576, 579, 580, 594, 595, 596, 597, 598, 601, 608, 615, 616, 617, 618, 633, 634, 761], "The": [117, 118, 119, 120, 121, 160, 164, 165, 173, 174, 176, 179, 180, 181, 182, 183, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 386, 398, 399, 400, 403, 405, 406, 407, 409, 410, 415, 419, 420, 424, 425, 428, 432, 433, 434, 438, 443, 445, 446, 448, 451, 456, 460, 461, 470, 471, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 563, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 579, 581, 583, 586, 587, 593, 594, 600, 602, 611, 612, 613, 615, 616, 617, 618, 620, 625, 626, 627, 628, 629, 632, 633, 634, 642, 761], "posit": [117, 118, 119, 128, 129, 317, 318, 368, 373, 386, 408, 409, 414, 428, 444, 461, 485, 489, 493, 511, 512, 545, 546, 561, 566, 579, 600], "check": [117, 118, 119, 120, 121, 174, 175, 176, 179, 180, 350, 351, 364, 369, 370, 372, 373, 374, 375, 386, 428, 438, 445, 446, 448, 460, 461, 500, 510, 579, 585, 598, 608, 615, 616, 617, 618, 635, 642, 761], "option": [117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 347, 348, 350, 351, 355, 356, 357, 360, 364, 365, 366, 367, 368, 370, 375, 387, 398, 400, 401, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 438, 439, 440, 441, 448, 460, 461, 480, 504, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 581, 588, 591, 592, 593, 599, 601, 620, 622, 625, 626, 633, 634], "dict": [117, 118, 119, 120, 121, 160, 172, 179, 180, 181, 182, 183, 364, 373, 374, 461, 470, 471, 480, 483, 486, 487, 488, 489, 579, 581, 595, 596, 597], "type": [117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 179, 180, 181, 182, 183, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 362, 363, 364, 366, 367, 368, 370, 372, 373, 375, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 460, 461, 477, 478, 479, 480, 481, 483, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 618, 622, 625, 626, 627, 628, 631, 633, 634, 635, 637, 638, 639, 641, 642, 761], "bool": [117, 118, 119, 120, 121, 124, 125, 179, 180, 347, 348, 357, 364, 365, 367, 375, 406, 407, 409, 416, 428, 434, 437, 439, 440, 441, 442, 445, 448, 449, 450, 460, 461, 480, 481, 496, 505, 508, 511, 523, 524, 526, 528, 530, 535, 543, 544, 545, 546, 547, 548, 549, 555, 556, 557, 563, 579, 580, 583, 584, 591, 594, 598, 600, 606, 608, 613, 615, 616, 617, 618, 631, 641, 642], "whether": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 347, 348, 349, 350, 365, 367, 368, 398, 399, 406, 407, 428, 434, 442, 448, 449, 450, 460, 461, 480, 481, 492, 496, 497, 500, 501, 505, 508, 510, 511, 547, 579, 580, 583, 584, 591, 594, 598, 600, 606, 608, 610, 613, 614, 615, 616, 617, 618, 619, 631, 635, 641, 642], "also": [117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 350, 351, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 579, 601, 613], "recurs": [117, 118, 119, 120, 121, 179, 180, 350, 353, 360, 364, 374, 387], "deriv": [117, 118, 119, 120, 121, 365, 366, 372, 374, 409, 413, 417, 423, 427], "from": [117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 166, 174, 175, 176, 179, 180, 181, 182, 183, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 410, 411, 413, 415, 416, 417, 420, 421, 423, 427, 428, 437, 452, 461, 470, 471, 480, 495, 499, 504, 505, 511, 543, 573, 579, 594, 601, 602, 637, 761, 767], "tupl": [117, 118, 119, 120, 121, 138, 139, 179, 180, 355, 364, 365, 366, 368, 372, 373, 374, 387, 406, 407, 409, 411, 412, 416, 421, 422, 426, 428, 436, 446, 461, 480, 579, 600, 632], "list": [117, 118, 119, 120, 121, 158, 159, 179, 180, 321, 322, 347, 348, 350, 352, 353, 355, 357, 365, 366, 368, 370, 373, 374, 375, 387, 409, 410, 411, 412, 420, 421, 422, 426, 428, 435, 461, 470, 471, 480, 482, 483, 486, 487, 490, 491, 505, 579, 584, 632, 637, 641, 761], "default": [117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 183, 347, 348, 351, 356, 357, 360, 361, 364, 365, 366, 368, 374, 398, 399, 400, 401, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 439, 440, 441, 442, 461, 470, 471, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 500, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 587, 588, 591, 592, 599, 600, 601, 606, 607, 608, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 629, 631, 633, 634, 641, 642], "fals": [117, 118, 119, 120, 121, 130, 131, 138, 139, 152, 153, 154, 155, 156, 157, 160, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 364, 367, 373, 374, 375, 428, 434, 437, 442, 461, 480, 481, 492, 496, 497, 500, 505, 508, 510, 511, 523, 543, 544, 545, 546, 547, 548, 556, 557, 563, 579, 580, 583, 584, 591, 594, 598, 600, 606, 613, 615, 616, 618, 619, 631, 641], "str": [117, 118, 119, 160, 165, 179, 180, 365, 366, 409, 420, 428, 432, 438, 439, 440, 443, 444, 447, 448, 449, 450, 453, 454, 455, 460, 461, 477, 480, 481, 483, 486, 487, 488, 489, 505, 579, 581, 593, 595, 596, 597, 620, 625, 626], "kei": [117, 118, 119, 179, 180, 181, 182, 183, 364, 373, 461, 473, 579, 581, 589], "word": [117, 118, 119, 409, 410], "ret": [117, 118, 119, 120, 121, 160, 164, 165, 172, 179, 180, 355, 356, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 470, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 625, 626, 631, 633, 634, 635, 637, 638, 639, 641, 642], "same": [117, 118, 119, 174, 176, 179, 180, 350, 351, 353, 355, 357, 359, 360, 363, 364, 366, 367, 368, 370, 372, 374, 375, 409, 410, 413, 417, 420, 423, 424, 425, 427, 428, 434, 435, 436, 461, 470, 471, 505, 511, 512, 515, 524, 531, 541, 561, 566, 567, 568, 578, 579, 599, 601, 602, 622, 625, 626, 761], "convert": [117, 118, 119, 120, 121, 176, 179, 180, 363, 370, 387, 388, 396, 409, 411, 421, 428, 432, 433, 461, 477, 478, 479, 480, 500, 507, 510, 579, 632, 638, 639], "args_to_n": [117, 367, 372], "nativ": [117, 119, 120, 121, 160, 166, 179, 180, 365, 367, 372, 373, 409, 421, 428, 432, 433, 438, 461, 477, 478, 479, 480, 481, 500, 507, 510, 579, 613, 615, 618], "backend": [117, 119, 121, 164, 165, 166, 172, 174, 179, 180, 351, 352, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 372, 375, 428, 445, 446, 448, 460, 461, 496, 498, 508, 579, 610, 613, 614, 620, 761, 767], "to_ivi": [117, 179, 180, 372], "x": [117, 120, 121, 124, 125, 128, 129, 130, 131, 142, 143, 160, 164, 172, 179, 180, 181, 182, 313, 314, 317, 318, 319, 320, 331, 332, 335, 336, 341, 342, 353, 355, 356, 357, 360, 361, 364, 367, 368, 370, 372, 373, 374, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 411, 413, 415, 417, 420, 421, 423, 424, 425, 426, 427, 428, 434, 436, 437, 442, 461, 480, 481, 482, 483, 486, 487, 495, 499, 504, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 556, 559, 560, 562, 564, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 583, 584, 585, 587, 588, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 618, 622, 631, 632, 635, 637, 638, 639, 641, 642, 761], "input": [117, 120, 121, 132, 133, 179, 180, 181, 182, 183, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 388, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 415, 417, 420, 421, 423, 424, 425, 427, 428, 434, 435, 437, 438, 439, 440, 441, 442, 443, 449, 450, 451, 452, 456, 461, 470, 471, 480, 481, 482, 483, 485, 486, 489, 493, 499, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 587, 588, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 608, 609, 611, 612, 613, 615, 616, 617, 618, 631, 632, 635, 637, 638, 639, 641, 642], "an": [117, 120, 121, 158, 159, 175, 176, 179, 180, 347, 348, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 398, 401, 402, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 444, 449, 450, 452, 461, 483, 487, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 587, 588, 590, 599, 600, 601, 609, 613, 615, 616, 617, 618, 638, 639, 640, 761], "If": [117, 120, 121, 160, 164, 165, 166, 174, 179, 180, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 375, 387, 409, 410, 412, 413, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 434, 436, 452, 461, 480, 504, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 531, 532, 533, 539, 540, 541, 550, 551, 553, 554, 556, 557, 561, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 579, 613, 761], "set": [117, 120, 121, 151, 160, 164, 165, 166, 172, 174, 179, 180, 340, 349, 351, 354, 355, 360, 362, 363, 364, 365, 366, 367, 370, 372, 373, 461, 480, 490, 491, 502, 503, 504, 505, 511, 521, 579, 580, 627, 628, 629, 630], "appli": [117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 356, 357, 359, 360, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 385, 387, 398, 399, 400, 401, 402, 403, 404, 405, 428, 452, 579, 595, 596, 597, 761], "leaf": [117, 120, 121, 179, 180, 360, 364, 373], "contain": [117, 120, 121, 130, 131, 174, 177, 178, 179, 180, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 357, 359, 360, 365, 367, 368, 369, 370, 371, 374, 375, 387, 398, 401, 402, 404, 409, 410, 413, 415, 422, 424, 425, 426, 428, 437, 461, 482, 483, 486, 495, 499, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 587, 588, 590, 591, 598, 601, 602, 608, 617, 637, 638, 639, 761], "within": [117, 120, 121, 351, 359, 374, 387, 409, 410], "union": [117, 120, 121, 130, 131, 138, 139, 179, 180, 355, 357, 360, 363, 364, 365, 366, 367, 368, 370, 375, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 494, 500, 502, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 587, 588, 591, 592, 595, 596, 597, 599, 600, 601, 602, 606, 608, 609, 611, 612, 613, 622, 625, 626, 631, 632, 637, 638, 639, 641, 642], "nativearrai": [117, 120, 121, 130, 131, 355, 357, 360, 363, 364, 367, 368, 370, 372, 375, 388, 396, 398, 400, 401, 402, 403, 404, 405, 409, 410, 411, 413, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 434, 435, 436, 437, 442, 444, 447, 449, 450, 452, 456, 461, 480, 481, 483, 499, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 587, 588, 590, 591, 592, 595, 596, 597, 599, 600, 601, 602, 606, 608, 609, 611, 612, 613, 622, 625, 626, 631, 632, 637, 638, 639, 641, 642], "mayb": [117, 120, 121, 350, 370, 372], "manner": [117, 120, 121, 174, 179, 180, 355, 356, 366, 373, 386, 387], "so": [117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 355, 356, 357, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 388, 396, 761], "travers": [117, 120, 121, 179, 180, 364, 370, 372], "lowest": [117, 120, 121, 179, 180, 360, 387], "leav": [117, 120, 121, 179, 180, 181, 182, 356, 357, 359, 360, 364, 365, 367, 368, 373, 374], "search": [117, 120, 121, 149, 174, 179, 180, 338, 350, 355, 357, 359], "s": [117, 120, 121, 160, 164, 165, 166, 172, 175, 176, 179, 180, 349, 350, 351, 353, 354, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 408, 409, 420, 424, 425, 428, 445, 446, 461, 480, 504, 511, 566, 579, 584, 761], "case": [117, 120, 121, 175, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 387, 409, 420, 461, 500, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 528, 530, 531, 532, 533, 539, 540, 541, 550, 551, 553, 554, 561, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 579, 613, 625, 626], "to_n": [117, 179, 180], "item": [117, 121, 158, 159, 179, 180, 365, 370, 372, 373, 375, 428, 439, 461, 470, 471, 473, 480, 482, 484, 486, 488, 492, 579, 589, 607, 633, 634, 761], "convers": [118, 119, 120, 121, 176, 179, 180, 369, 371, 375, 386, 387, 761, 767], "arraywithcr": 122, "creation": [123, 179, 180, 181, 182, 183, 312, 355, 365, 366, 370, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "data_typ": [124, 125, 313, 314, 355, 365, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "arraywithdatatyp": 124, "can_cast": [124, 125, 313, 314, 360, 365, 428], "method": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 352, 355, 356, 357, 359, 360, 363, 368, 370, 371, 374, 375, 387, 398, 400, 401, 402, 403, 404, 405, 409, 415, 420, 511, 516, 518, 523, 528, 530, 531, 533, 541, 544, 559, 560, 562, 563, 567, 573, 574, 577, 579, 589, 590, 601, 625, 626, 637, 639, 761], "variant": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 356, 357], "thi": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 176, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 409, 410, 411, 420, 421, 428, 437, 461, 485, 489, 493, 500, 505, 510, 511, 512, 515, 516, 518, 523, 527, 528, 530, 531, 533, 540, 541, 556, 557, 563, 566, 567, 573, 574, 576, 577, 579, 600, 601, 613, 624, 629, 761, 767], "simpli": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 351, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 374, 375, 511, 540], "docstr": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 352, 353, 354, 355, 360, 364, 368, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577], "minim": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 356, 367, 370], "chang": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 176, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 353, 356, 358, 359, 364, 370, 374, 387, 461, 761, 767], "exampl": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 176, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 375, 386, 387, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 416, 417, 420, 422, 423, 426, 427, 428, 434, 437, 445, 446, 461, 480, 481, 483, 495, 496, 497, 498, 499, 502, 504, 506, 508, 509, 511, 515, 516, 518, 522, 523, 524, 527, 528, 530, 531, 532, 533, 539, 541, 543, 544, 548, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 580, 583, 584, 590, 591, 598, 601, 602, 605, 616, 631, 632, 637, 638, 639, 761], "1": [124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 160, 166, 172, 175, 176, 179, 180, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 353, 357, 360, 364, 367, 368, 369, 370, 372, 373, 374, 375, 387, 398, 400, 401, 402, 403, 405, 409, 410, 417, 418, 419, 420, 422, 423, 427, 428, 434, 437, 444, 461, 465, 468, 470, 475, 480, 481, 483, 485, 489, 493, 495, 498, 499, 506, 511, 513, 514, 515, 516, 518, 521, 523, 524, 527, 528, 530, 531, 532, 533, 539, 540, 541, 543, 544, 548, 550, 551, 552, 553, 559, 560, 562, 563, 565, 567, 568, 569, 571, 573, 574, 576, 577, 579, 580, 583, 584, 590, 591, 598, 601, 602, 616, 622, 625, 626, 631, 632, 634, 637, 638, 639, 641, 761], "2": [124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 160, 164, 179, 180, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 353, 357, 361, 364, 368, 369, 370, 372, 373, 374, 375, 387, 398, 400, 401, 402, 403, 405, 408, 409, 416, 417, 420, 422, 423, 427, 428, 434, 437, 461, 480, 481, 483, 495, 497, 499, 506, 511, 515, 516, 518, 520, 521, 523, 524, 527, 528, 530, 531, 532, 533, 539, 541, 543, 544, 548, 553, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 580, 583, 584, 587, 588, 591, 598, 601, 602, 616, 631, 632, 637, 761], "3": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 353, 357, 361, 364, 370, 372, 373, 374, 375, 398, 400, 401, 402, 403, 408, 409, 417, 420, 423, 426, 427, 428, 437, 461, 480, 483, 499, 506, 511, 515, 516, 518, 523, 527, 528, 530, 531, 533, 539, 541, 543, 544, 548, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 583, 584, 591, 598, 601, 602, 631, 632, 637, 639, 761], "print": [124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 350, 357, 364, 370, 372, 373, 374, 398, 400, 401, 402, 403, 404, 405, 409, 416, 417, 420, 422, 423, 426, 427, 428, 434, 437, 445, 446, 461, 481, 495, 496, 497, 498, 499, 501, 504, 508, 511, 515, 516, 518, 522, 523, 524, 527, 528, 530, 531, 532, 533, 539, 541, 543, 544, 548, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 580, 583, 584, 590, 591, 598, 601, 602, 605, 623, 631, 632, 637, 638, 639, 761], "dtype": [124, 125, 154, 155, 179, 180, 313, 314, 343, 344, 355, 357, 360, 365, 366, 372, 409, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 426, 427, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 501, 511, 527, 579, 583, 584, 622, 638, 761], "float32": [124, 125, 313, 314, 357, 365, 428, 432, 433, 437, 445], "float64": [124, 125, 365, 428, 434, 437, 445], "true": [124, 125, 130, 131, 138, 139, 152, 153, 158, 159, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 359, 360, 364, 365, 367, 370, 372, 373, 374, 375, 398, 399, 406, 407, 409, 418, 428, 434, 437, 461, 480, 497, 501, 502, 511, 523, 528, 530, 543, 544, 545, 546, 547, 548, 556, 557, 563, 579, 580, 583, 584, 585, 586, 591, 598, 600, 608, 609, 616, 631, 637, 639, 642], "arraywithdevic": [126, 372], "devic": [127, 175, 179, 180, 316, 335, 336, 351, 354, 355, 360, 362, 365, 372, 373, 387, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 579, 601, 602, 622, 625, 626], "arraywithelementwis": [128, 352, 363], "ab": [128, 129, 317, 318, 359, 362, 511, 565, 761], "out": [128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 174, 175, 176, 179, 180, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 372, 373, 374, 375, 386, 398, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 416, 417, 422, 423, 424, 425, 426, 427, 428, 434, 436, 461, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 587, 588, 590, 591, 592, 595, 596, 597, 599, 601, 602, 609, 622, 761], "aco": [128, 129, 317, 318, 511, 761], "acosh": [128, 129, 317, 318, 428, 445, 446, 511, 761], "add": [128, 129, 158, 159, 179, 180, 181, 182, 317, 318, 319, 320, 347, 348, 350, 351, 352, 354, 355, 356, 360, 361, 363, 364, 368, 370, 372, 387, 511, 761, 767], "x2": [128, 129, 130, 131, 138, 139, 179, 180, 317, 318, 319, 320, 327, 328, 357, 368, 428, 456, 461, 499, 511, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 543, 544, 548, 549, 554, 555, 557, 558, 559, 560, 561, 563, 565, 566, 575, 579, 580], "y": [128, 129, 130, 131, 142, 143, 181, 182, 317, 318, 319, 320, 331, 332, 335, 336, 355, 357, 361, 364, 370, 372, 398, 400, 401, 402, 403, 404, 405, 409, 416, 417, 420, 422, 423, 427, 428, 434, 461, 481, 495, 499, 504, 511, 515, 516, 518, 521, 523, 524, 527, 528, 530, 531, 532, 533, 539, 541, 544, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 580, 583, 584, 590, 591, 598, 599, 601, 602, 631, 637, 638, 639], "4": [128, 129, 142, 143, 176, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 353, 357, 361, 364, 370, 372, 373, 374, 375, 398, 400, 401, 403, 409, 417, 420, 423, 427, 428, 437, 461, 483, 499, 511, 515, 516, 518, 521, 523, 528, 530, 531, 533, 541, 544, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 584, 591, 600, 601, 602, 632, 637, 761], "5": [128, 129, 130, 131, 142, 143, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 351, 353, 357, 361, 368, 372, 373, 374, 398, 400, 401, 403, 409, 417, 420, 423, 426, 427, 428, 437, 461, 483, 499, 511, 515, 516, 518, 522, 523, 527, 528, 530, 531, 533, 541, 544, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 584, 591, 601, 602, 632, 637], "6": [128, 129, 132, 133, 142, 143, 181, 182, 317, 318, 319, 320, 335, 336, 353, 357, 361, 364, 372, 373, 374, 398, 400, 401, 403, 409, 417, 461, 483, 499, 511, 515, 516, 518, 523, 524, 528, 530, 531, 533, 541, 544, 559, 560, 562, 567, 573, 574, 576, 577, 579, 584, 591, 601, 602, 632, 637], "z": [128, 129, 130, 131, 181, 182, 317, 318, 319, 320, 357, 361, 364, 370, 372, 461, 495, 511, 515, 523, 528, 530, 544, 559, 560, 579, 583, 584, 601, 631], "7": [128, 129, 142, 143, 181, 182, 317, 318, 335, 336, 351, 353, 357, 360, 364, 367, 398, 400, 401, 461, 483, 511, 515, 523, 524, 528, 530, 531, 533, 539, 541, 544, 559, 560, 567, 573, 576, 577, 579, 584, 591, 601], "9": [128, 129, 132, 133, 142, 143, 181, 182, 317, 318, 321, 322, 335, 336, 353, 357, 373, 374, 511, 515, 523, 524, 559, 560, 567, 573, 574, 579, 601], "asin": [128, 129, 317, 318, 511, 761], "asinh": [128, 129, 317, 318, 511, 761], "atan": [128, 129, 317, 318, 511, 761], "atan2": [128, 129, 317, 318, 511, 761], "atanh": [128, 129, 317, 318, 511, 761], "bitwise_and": [128, 129, 317, 318, 511], "bitwise_invert": [128, 129, 317, 318, 511], "bitwise_left_shift": [128, 129, 317, 318, 511], "bitwise_or": [128, 129, 317, 318, 511], "bitwise_right_shift": [128, 129, 317, 318, 511], "bitwise_xor": [128, 129, 317, 318, 511], "ceil": [128, 129, 317, 318, 409, 410, 511, 761], "0": [128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 144, 145, 154, 155, 160, 164, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 355, 356, 357, 370, 372, 373, 374, 375, 398, 400, 401, 402, 403, 404, 405, 409, 410, 414, 418, 419, 423, 424, 425, 426, 427, 428, 434, 437, 444, 461, 463, 466, 470, 473, 477, 480, 481, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 502, 504, 505, 509, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 531, 532, 533, 539, 540, 541, 544, 550, 551, 553, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 583, 584, 587, 588, 590, 591, 592, 598, 601, 602, 607, 616, 622, 625, 626, 631, 637, 638, 639, 761], "co": [128, 129, 175, 317, 318, 370, 386, 511, 579, 600, 761], "cosh": [128, 129, 317, 318, 511, 761], "divid": [128, 129, 179, 180, 317, 318, 357, 363, 511, 542, 579, 633], "equal": [128, 129, 179, 180, 317, 318, 357, 364, 365, 409, 414, 416, 417, 428, 434, 511, 525, 527, 545, 546, 565, 567, 579, 580, 583, 584], "erf": [128, 129, 317, 318, 511], "exp": [128, 129, 317, 318, 511, 540, 554, 761], "expm1": [128, 129, 317, 318, 511], "floor": [128, 129, 317, 318, 511, 527, 579, 599, 761], "floor_divid": [128, 129, 317, 318, 511], "greater": [128, 129, 179, 180, 317, 318, 511, 513, 516, 518, 521, 525, 527, 541, 542, 565, 566, 568, 578], "greater_equ": [128, 129, 317, 318, 511], "isfinit": [128, 129, 317, 318, 511], "isinf": [128, 129, 317, 318, 511], "isnan": [128, 129, 317, 318, 511], "less": [128, 129, 175, 179, 180, 317, 318, 351, 357, 364, 368, 369, 370, 511, 513, 514, 516, 518, 521, 531, 550, 551, 553, 565, 566, 568, 573], "less_equ": [128, 129, 317, 318, 511], "log": [128, 129, 317, 318, 350, 351, 360, 364, 367, 370, 373, 409, 419, 511, 552, 554, 761], "log10": [128, 129, 317, 318, 511], "log1p": [128, 129, 317, 318, 511], "log2": [128, 129, 317, 318, 511], "logaddexp": [128, 129, 317, 318, 511], "logical_and": [128, 129, 317, 318, 511, 761], "logical_not": [128, 129, 317, 318, 511, 761], "logical_or": [128, 129, 317, 318, 511, 761], "logical_xor": [128, 129, 317, 318, 511], "multipli": [128, 129, 317, 318, 357, 361, 363, 511, 579, 591], "neg": [128, 129, 317, 318, 360, 364, 367, 398, 400, 409, 410, 414, 511, 545, 546, 561, 565, 566], "not_equ": [128, 129, 317, 318, 511], "pow": [128, 129, 317, 318, 511], "remaind": [128, 129, 179, 180, 317, 318, 511, 579, 599], "round": [128, 129, 174, 175, 176, 317, 318, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 511, 515, 531, 541, 542, 561, 573, 578, 761], "sign": [128, 129, 175, 317, 318, 350, 371, 375, 409, 410, 511, 512, 515, 521, 527, 561, 566], "sin": [128, 129, 317, 318, 363, 370, 511, 579, 600, 761], "sinh": [128, 129, 317, 318, 511, 761], "sqrt": [128, 129, 317, 318, 511], "squar": [128, 129, 317, 318, 511, 573], "subtract": [128, 129, 317, 318, 357, 363, 511], "tan": [128, 129, 317, 318, 356, 360, 364, 367, 368, 370, 511, 516, 518, 761], "56": [128, 129, 317, 318, 357, 511, 573, 576], "19": [128, 129, 317, 318, 357, 511, 528, 530, 576], "tanh": [128, 129, 317, 318, 370, 398, 511, 761], "762": [128, 129, 317, 318, 398, 405, 511, 577], "964": [128, 129, 317, 318, 398, 405, 511, 577], "trunc": [128, 129, 317, 318, 511], "elementwis": [129, 179, 180, 318, 355, 360, 370, 375, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578], "arraywithgener": [130, 372], "all_equ": [130, 131, 319, 320, 579], "equality_matrix": [130, 131, 319, 320, 579, 580], "With": [130, 131, 132, 133, 175, 176, 179, 180, 181, 182, 317, 318, 319, 320, 331, 332, 335, 336, 350, 357, 359, 370, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 461, 483, 499, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 544, 559, 560, 562, 563, 567, 573, 574, 576, 577, 579, 580, 584, 590, 591, 598, 601, 602, 632, 637, 638, 639], "x1": [130, 131, 317, 318, 319, 320, 357, 368, 428, 456, 461, 499, 511, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 543, 544, 548, 549, 554, 555, 557, 558, 559, 560, 561, 563, 565, 566, 575, 579, 580, 583], "mix": [130, 131, 181, 182, 354, 357, 359, 370, 428, 452, 461, 499, 511, 515, 523, 528, 530, 544, 559, 560, 563, 579, 590, 598, 601, 602, 637, 638, 639], "native_arrai": [130, 131, 160, 166, 172, 319, 320, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 461, 483, 499, 511, 516, 518, 523, 528, 530, 531, 541, 544, 559, 560, 562, 563, 573, 574, 577, 579, 580, 584, 590, 591, 598, 601, 602, 632, 637, 638, 639], "gather_nd": [130, 131, 179, 180, 319, 320, 579, 761], "indic": [130, 131, 179, 180, 319, 320, 353, 371, 375, 398, 403, 511, 568, 579, 601, 602, 609, 622, 625, 626, 761], "gener": [131, 158, 159, 179, 180, 320, 347, 348, 351, 352, 353, 354, 355, 356, 357, 360, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 386, 387, 406, 409, 410, 418, 419, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 566, 573, 574, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 761], "arraywithgradi": [132, 372], "adam_step": [132, 133, 321, 322], "mw": [132, 133, 321, 322, 374], "vw": [132, 133, 321, 322, 374], "step": [132, 133, 176, 179, 180, 321, 322, 350, 351, 353, 357, 361, 363, 364, 365, 366, 370, 373, 374, 375, 386, 409, 410, 418, 419, 461, 761], "beta1": [132, 133, 321, 322, 374], "beta2": [132, 133, 321, 322, 374], "999": [132, 133, 317, 318, 321, 322, 374, 511, 577], "epsilon": [132, 133, 140, 141, 144, 145, 321, 322, 329, 330, 333, 334, 360, 364, 367, 374], "1e": [132, 133, 140, 141, 144, 145, 321, 322, 329, 330, 333, 334, 360, 364, 367, 374, 375, 579, 605, 761], "07": [132, 133, 140, 141, 321, 322, 329, 330, 374], "dcdw": [132, 133, 321, 322], "adam_step_delta": [132, 133, 321, 322], "639": [132, 133], "11": [132, 133, 181, 182, 317, 318, 335, 336, 357, 364, 511, 515, 523, 567, 579, 591, 601], "32": [132, 133, 373, 398, 400, 511, 528, 530], "63": [132, 133, 511, 573], "00121": [132, 133], "0102": [132, 133], "0397": [132, 133], "gradient": [133, 179, 180, 322, 355, 364, 373, 374, 386, 387, 461, 505, 761], "arraywithimag": [134, 372], "imag": [135, 324, 350, 353, 355, 370, 371, 373, 375, 386, 761], "arraywithlay": 136, "layer": [137, 174, 326, 355, 356, 370, 371, 374, 761], "linear_algebra": [138, 139, 327, 328, 355, 372], "arraywithlinearalgebra": 138, "choleski": [138, 139], "upper": [138, 139, 179, 180, 409, 414, 425], "cross": [138, 139, 761], "axi": [138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 179, 180, 329, 330, 331, 332, 341, 342, 343, 344, 345, 346, 357, 360, 364, 365, 367, 368, 370, 372, 375, 386, 398, 403, 409, 418, 419, 461, 463, 466, 473, 486, 487, 488, 489, 490, 491, 492, 493, 505, 579, 591, 592, 601, 641], "det": [138, 139], "diagon": [138, 139, 409, 414, 424, 425], "offset": [138, 139, 144, 145, 333, 334], "axis1": [138, 139, 142, 143, 331, 332], "axis2": [138, 139], "eigh": [138, 139], "namedtupl": [138, 139], "eigvalsh": [138, 139], "inv": [138, 139, 372, 761], "matmul": [138, 139, 327, 328, 355, 361, 370, 761], "matrix_norm": [138, 139, 179, 180], "ord": [138, 139, 179, 180], "fro": [138, 139], "keepdim": [138, 139, 154, 155, 156, 157, 179, 180, 343, 344, 345, 346, 579, 641], "matrix_rank": [138, 139], "rtol": [138, 139], "matrix_transpos": [138, 139, 372], "outer": [138, 139], "pinv": [138, 139, 761], "qr": [138, 139], "mode": [138, 139, 179, 180, 350, 357, 364, 387, 406, 407, 461, 490, 491, 492, 493, 505, 511, 515, 561], "reduc": [138, 139, 179, 180, 372, 461, 505, 579, 596], "solv": [138, 139, 371, 386], "svd": [138, 139, 761], "full_matric": [138, 139], "svdval": [138, 139], "tensordot": [138, 139], "ax": [138, 139, 142, 143, 179, 180, 331, 332, 355, 357, 365, 372, 461, 505, 579, 591], "trace": [138, 139, 179, 180, 370, 387, 579, 615, 616, 618], "vecdot": [138, 139], "vector_norm": [138, 139, 179, 180], "vector_to_skew_symmetric_matrix": [138, 139, 761], "arraywithloss": 140, "binary_cross_entropi": [140, 141, 329, 330], "pred": [140, 141, 329, 330, 360, 364, 367], "cross_entropi": [140, 141, 329, 330, 360, 364, 367], "sparse_cross_entropi": [140, 141, 329, 330], "loss": [141, 330, 355, 360, 373, 374, 375, 761], "arraywithmanipul": 142, "clip": [142, 143, 179, 180, 331, 332, 360, 364, 367, 370, 373, 375, 511, 559, 560, 579, 587, 588, 761], "x_min": [142, 143, 179, 180, 331, 332, 370, 375], "x_max": [142, 143, 179, 180, 331, 332, 370, 375], "roll": [142, 143, 331, 332, 364, 368], "8": [142, 143, 181, 182, 317, 318, 335, 336, 350, 353, 357, 364, 369, 373, 398, 402, 461, 483, 511, 515, 523, 531, 533, 544, 559, 560, 567, 573, 574, 577, 579, 584, 601, 761], "concat": [142, 143, 179, 180, 331, 332, 461, 490, 491, 492, 493, 505, 579, 600, 761], "xs": [142, 143, 331, 332, 364, 461, 484, 488, 490, 491, 492, 579, 580, 584], "constant_pad": [142, 143, 331, 332], "pad_width": [142, 143, 331, 332], "valu": [142, 143, 179, 180, 181, 182, 183, 331, 332, 351, 357, 359, 360, 364, 365, 366, 367, 368, 370, 372, 375, 387, 409, 410, 414, 416, 417, 418, 419, 428, 434, 439, 440, 441, 461, 473, 504, 505, 511, 512, 513, 515, 516, 518, 520, 531, 535, 536, 538, 541, 542, 543, 544, 548, 549, 559, 560, 561, 563, 564, 565, 567, 577, 578, 579, 587, 588, 589, 594, 600, 601, 602, 607, 610, 614, 624, 625, 626, 627, 628, 629, 642], "expand_dim": [142, 143, 331, 332, 370, 373, 761], "flip": [142, 143, 331, 332, 372, 373, 375, 511, 524, 761], "permute_dim": [142, 143, 331, 332], "repeat": [142, 143, 179, 180, 331, 332, 351, 356, 357, 361, 363, 364, 579, 597], "reshap": [142, 143, 179, 180, 331, 332, 367, 370, 372, 375, 761], "shape": [142, 143, 179, 180, 321, 322, 331, 332, 335, 336, 351, 355, 356, 357, 365, 366, 367, 368, 370, 372, 373, 374, 375, 398, 401, 409, 412, 413, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 461, 473, 501, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 588, 599, 602, 606, 622, 625, 626, 632, 761], "shift": [142, 143, 331, 332, 357, 368, 511, 525, 527], "squeez": [142, 143, 331, 332, 761], "stack": [142, 143, 179, 180, 331, 332, 370, 409, 424, 425, 761], "swapax": [142, 143, 331, 332], "axis0": [142, 143, 331, 332], "tile": [142, 143, 331, 332, 761], "rep": [142, 143, 331, 332], "zero_pad": [142, 143, 331, 332, 761], "manipul": [143, 174, 332, 355, 375, 386], "arraywithnorm": 144, "layer_norm": [144, 145, 333, 334], "normalized_idx": [144, 145, 333, 334], "05": [144, 145, 333, 334, 461], "scale": [144, 145, 333, 334, 364, 461, 503, 504], "new_std": [144, 145, 333, 334], "norm": [145, 179, 180, 334, 355, 579, 587, 588, 761], "arraywithrandom": [146, 372], "random": [147, 179, 180, 336, 355, 366, 375, 386, 761], "arraywithsearch": 148, "arraywithset": 150, "arraywithsort": 152, "argsort": [152, 153, 341, 342], "descend": [152, 153, 341, 342], "stabl": [152, 153, 341, 342, 350, 370, 387, 579, 604, 605, 627, 628, 633, 634], "sort": [153, 179, 180, 181, 182, 183, 342, 355], "arraywithstatist": 154, "einsum": [154, 155, 343, 344], "equat": [154, 155, 343, 344], "max": [154, 155, 179, 180, 343, 344, 428, 444, 447, 511, 559, 579, 587, 588, 596, 625, 626], "mean": [154, 155, 179, 180, 343, 344, 347, 348, 350, 351, 354, 357, 360, 364, 365, 366, 367, 370, 372, 373, 374, 375, 386, 387, 461, 490, 491, 492, 493, 505, 579, 596, 761], "min": [154, 155, 179, 180, 343, 344, 428, 444, 447, 511, 560, 579, 596, 625, 626, 633], "prod": [154, 155, 179, 180, 343, 344, 357, 365, 579, 596], "std": [154, 155, 343, 344, 357], "correct": [154, 155, 343, 344, 351, 352, 354, 360, 364, 365, 366, 368, 428, 456, 761], "sum": [154, 155, 179, 180, 343, 344, 360, 364, 365, 367, 370, 461, 490, 491, 492, 493, 505, 511, 515, 554, 579, 592, 596, 625, 626], "var": [154, 155, 343, 344, 347, 348, 357, 370], "statist": [155, 344, 347, 348, 355, 365], "arraywithutil": 156, "util": [157, 346, 355, 366, 461, 494], "add_ivy_array_instance_method": 158, "cl": [158, 159, 347, 348], "modul": [158, 159, 160, 164, 165, 176, 179, 180, 181, 182, 183, 347, 348, 350, 353, 359, 360, 361, 363, 367, 370, 371, 373, 375, 386, 387, 579, 620, 761], "to_ignor": [158, 159, 347, 348], "loop": [158, 159, 347, 348, 361, 387], "over": [158, 159, 160, 164, 174, 176, 179, 180, 347, 348, 350, 356, 357, 361, 367, 372, 387], "etc": [158, 159, 176, 179, 180, 347, 348, 350, 351, 352, 355, 357, 359, 363, 364, 365, 368, 370, 372, 373, 387, 409, 418, 419, 579, 601, 602, 622, 625, 626], "us": [158, 159, 160, 165, 172, 175, 176, 179, 180, 181, 182, 183, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 386, 387, 398, 400, 401, 402, 403, 404, 405, 408, 428, 443, 461, 470, 471, 496, 500, 503, 504, 505, 506, 508, 510, 511, 516, 518, 523, 528, 530, 533, 544, 559, 560, 562, 563, 567, 573, 579, 601, 604, 605, 619, 625, 626, 627, 628, 633, 634, 761], "_wrap_funct": [158, 159, 347, 348, 360, 362], "we": [158, 159, 160, 165, 166, 172, 173, 174, 175, 176, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387, 761, 767], "want": [158, 159, 160, 165, 175, 347, 348, 349, 350, 351, 359, 373, 374, 375, 387], "don": [158, 159, 176, 347, 348, 350, 351, 352, 365, 374, 387], "t": [158, 159, 160, 165, 175, 176, 347, 348, 350, 351, 352, 353, 357, 365, 370, 372, 373, 374, 375, 387, 579, 584], "As": [158, 159, 174, 347, 348, 351, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 387], "shown": [158, 159, 179, 180, 347, 348, 351, 357, 368, 370, 372, 387, 409, 420, 511, 523, 528, 530, 533, 567, 577], "appropri": [158, 159, 347, 348, 351, 362, 511, 515, 561], "our": [158, 159, 174, 175, 347, 348, 349, 350, 351, 357, 364, 369, 372, 373, 374, 375, 387, 761], "toi": [158, 159, 347, 348], "arrayexampl": [158, 159], "import": [158, 159, 160, 164, 175, 347, 348, 352, 355, 356, 357, 361, 363, 364, 365, 366, 367, 370, 372, 373, 375, 387, 461, 502, 761, 767], "pass": [158, 159, 160, 164, 179, 180, 181, 182, 183, 347, 348, 352, 356, 357, 358, 359, 360, 361, 363, 364, 367, 368, 372, 387, 428, 438, 461, 470, 505, 511, 521, 579, 586, 613], "hasattr": [158, 159, 347, 348, 372], "relu": [158, 159, 373, 374, 398, 399, 400, 761], "softmax": [158, 159, 398, 761], "backend_handl": [160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 761], "contextmanag": [160, 161], "object": [160, 179, 180, 181, 182, 183, 372, 375, 409, 415, 428, 444, 461, 506], "__init__": [160, 161, 164, 165, 179, 180, 181, 182, 183, 355, 361, 365, 370, 372, 373, 374, 375, 428, 429, 430, 431, 461, 462, 469, 470, 471, 472, 473, 474, 475, 476, 761, 774, 777, 780], "choose_random_backend": 160, "exclud": [160, 162, 357, 370, 409, 410], "clear_backend_stack": 160, "current_backend": [160, 355, 360], "current": [160, 164, 165, 172, 176, 179, 180, 181, 182, 183, 350, 351, 352, 353, 360, 366, 370, 375, 386, 387, 428, 445, 446, 448, 460, 461, 470, 494, 495, 499, 501, 579, 603, 610, 614, 621, 623, 761], "prioriti": [160, 164, 179, 180, 351, 367], "global_backend": [160, 164], "which": [160, 164, 165, 174, 175, 176, 179, 180, 181, 182, 183, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 437, 438, 442, 444, 447, 448, 460, 461, 470, 471, 481, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 501, 503, 504, 505, 511, 566, 579, 581, 591, 592, 594, 601, 602, 603, 609, 613, 621, 622, 623, 625, 626, 641, 761], "try": [160, 164, 173, 175, 176, 179, 180, 350, 351, 352, 353, 363, 364, 372, 387, 579, 640, 761], "infer": [160, 164, 354, 361, 365, 366, 370, 375, 406, 407, 409, 410, 411, 413, 416, 417, 421, 423, 427, 511, 543, 579, 606, 631], "when": [160, 164, 174, 175, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 375, 387, 428, 434, 461, 511, 515, 540, 565, 579, 586, 613, 634, 761], "global": [160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 360, 361, 365, 366, 370, 428, 439, 440, 441, 461, 470, 471, 503, 504, 505, 579, 604, 605, 624, 627, 628, 629, 633, 634], "numpi": [160, 164, 165, 166, 174, 175, 179, 180, 351, 352, 359, 361, 365, 366, 367, 368, 370, 372, 375, 579, 638, 761], "np": [160, 164, 363, 365, 366, 367, 368, 372, 373, 375, 761], "py": [160, 164, 165, 351, 355, 356, 360, 361, 365, 366, 368, 370, 372, 374, 375], "noqa": [160, 164, 165, 409, 420, 428, 437, 511, 515, 523, 528, 530, 531, 533, 563, 567, 573, 574, 576, 577], "set_backend": [160, 164, 165, 172, 360, 361, 362, 365, 428, 445, 446, 461, 502, 579, 631, 761], "ha": [160, 164, 165, 174, 175, 176, 179, 180, 351, 356, 357, 360, 361, 362, 365, 366, 370, 372, 374, 375, 386, 387, 409, 420, 461, 480, 511, 512, 561, 565], "jax": [160, 164, 165, 166, 175, 176, 351, 352, 361, 365, 366, 367, 368, 370, 372, 375, 387, 761], "get_backend": [160, 360, 361], "specifi": [160, 165, 179, 180, 354, 359, 360, 365, 366, 367, 368, 370, 373, 374, 375, 409, 410, 412, 416, 418, 419, 422, 424, 425, 426, 428, 434, 436, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 499, 501, 504, 505, 506, 511, 566, 579, 581, 591, 601, 602, 608, 641], "isn": [160, 165, 351, 373, 387], "associ": [160, 165, 351, 360, 362, 387, 511, 515, 561], "retriev": [160, 165, 351, 579, 581], "i": [160, 165, 351, 353, 354, 370, 373, 375, 409, 410, 420, 511, 512, 521, 525, 527, 531, 541, 542, 545, 559, 560, 562, 565, 566, 579, 583, 584], "e": [160, 165, 175, 176, 349, 351, 353, 354, 364, 373, 387, 408, 409, 420, 428, 433, 452, 461, 477, 511, 512, 521, 525, 527, 531, 539, 541, 542, 545, 550, 552, 559, 560, 562, 565, 566], "one": [160, 165, 175, 176, 179, 180, 317, 318, 319, 320, 331, 332, 335, 336, 350, 351, 357, 360, 363, 364, 365, 367, 368, 369, 372, 373, 375, 387, 409, 410, 420, 428, 435, 437, 461, 490, 491, 492, 493, 505, 579, 580, 619, 622, 625, 626, 761], "torch": [160, 165, 172, 351, 355, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 406, 407, 428, 445, 446, 461, 502, 579, 631, 761], "tensorflow": [160, 165, 172, 175, 176, 351, 352, 365, 366, 367, 368, 370, 375, 387, 761], "mxnet": [160, 165, 175, 352, 365, 366, 367, 370, 375, 761], "either": [160, 165, 172, 179, 180, 350, 351, 353, 356, 357, 360, 361, 364, 365, 366, 370, 372, 373, 387, 409, 415, 511, 515, 521, 546, 550, 551, 553, 554, 561, 566, 568, 569, 571, 576, 579, 594, 615, 619, 620], "doesn": [160, 165, 350, 353, 357, 365, 370, 387], "matter": [160, 165, 174, 357], "been": [160, 165, 351, 356, 360, 361, 364, 365, 366, 368, 370, 386, 387, 461, 480, 579, 595, 596, 597], "ivy_np": [160, 165], "ivy_jax": [160, 165], "subsequ": [160, 166, 350, 357, 359, 360, 363, 367, 368, 374], "call": [160, 166, 172, 175, 181, 182, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 461, 505, 579, 624, 629, 640], "ndarrai": [160, 166, 363, 365, 366, 367, 368, 372, 409, 411, 421, 579, 638], "Or": [160, 166, 373], "jaxlib": [160, 166, 350, 365, 366, 368, 372], "xla_extens": [160, 166, 365, 366, 368, 372], "devicearrai": [160, 166, 372], "try_import_ivy_jax": 160, "warn": [160, 167, 168, 169, 170, 171], "try_import_ivy_mxnet": 160, "try_import_ivy_numpi": 160, "try_import_ivy_tf": 160, "try_import_ivy_torch": 160, "unset_backend": [160, 361], "unset": [160, 172, 361, 370, 372], "adjust": [160, 172], "previous": [160, 172, 350, 353, 359, 360, 370, 579, 586], "implement": [160, 172, 351, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 428, 434, 452, 461, 506, 511, 512, 513, 514, 516, 518, 519, 520, 521, 532, 533, 539, 540, 550, 551, 552, 553, 561, 565, 566, 569, 571, 572, 576, 577, 761], "wa": [160, 172, 175, 179, 180, 357, 370, 372, 579, 640], "last": [160, 172, 176, 179, 180, 351, 357, 361, 387, 398, 403, 461, 480], "henc": [160, 172], "here": [160, 172, 350, 351, 352, 355, 357, 364, 368, 370, 371, 372, 373, 374, 375, 386, 387], "tensor": [160, 172, 174, 179, 180, 355, 360, 361, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 409, 418, 419, 428, 442, 511, 523, 559, 560, 579, 622, 625, 626, 761], "howev": [160, 172, 175, 350, 352, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 375, 387], "befor": [160, 172, 179, 180, 350, 351, 352, 356, 359, 363, 365, 366, 367, 370, 373, 387, 461, 505, 511, 578], "becom": [160, 172, 174, 176, 351, 357, 364, 370, 375, 387], "swap": [160, 172], "python": [160, 172, 173, 174, 175, 350, 351, 353, 370, 372, 373, 387, 409, 410, 461, 500, 510, 511, 566, 761, 767], "op": [160, 172, 355, 370, 387], "eagertensor": [160, 172], "def": [161, 352, 355, 357, 360, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 429, 430, 431, 462, 469, 472, 761, 774, 777, 780], "ml": [173, 175, 176, 349, 369, 370, 371, 373, 374, 375, 386, 761, 767], "explos": [173, 175, 761], "A": [173, 174, 175, 176, 179, 180, 181, 182, 183, 353, 354, 359, 360, 364, 365, 366, 370, 373, 387, 409, 414, 421, 461, 470, 471, 505, 511, 564, 579, 605, 637, 761], "huge": [173, 175, 373, 761], "number": [173, 174, 179, 180, 181, 182, 183, 350, 357, 364, 366, 367, 370, 373, 375, 406, 407, 408, 409, 410, 411, 414, 418, 419, 420, 421, 428, 435, 443, 444, 447, 449, 450, 452, 461, 497, 498, 499, 511, 515, 521, 531, 541, 542, 559, 560, 561, 565, 566, 567, 568, 578, 579, 580, 600, 605, 606, 621, 639, 642, 761], "tool": [173, 176, 351, 371, 375, 386, 387, 761], "have": [173, 174, 175, 176, 179, 180, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387, 398, 401, 409, 410, 412, 413, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 444, 461, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 595, 596, 597, 599, 761], "explod": [173, 174, 761], "onto": [173, 174, 461, 490, 491, 761], "scene": [173, 174, 354, 369, 371, 761], "b": [173, 176, 181, 182, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 354, 357, 360, 361, 364, 369, 370, 371, 373, 374, 375, 385, 428, 437, 461, 483, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 544, 562, 563, 567, 573, 574, 576, 577, 579, 580, 583, 584, 590, 591, 598, 601, 602, 639, 761, 767], "why": [173, 175, 351, 364, 367, 368, 372, 761], "unifi": [173, 175, 179, 180, 363, 370, 387, 461, 490, 491, 492, 493, 505, 761], "should": [173, 175, 179, 180, 181, 182, 183, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 406, 407, 409, 420, 424, 425, 428, 436, 461, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 539, 540, 541, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 561, 563, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 613, 622, 761], "them": [173, 174, 175, 176, 359, 361, 363, 364, 370, 372, 373, 374, 387, 761], "c": [173, 175, 176, 335, 336, 349, 354, 357, 360, 364, 369, 370, 371, 373, 387, 511, 563, 579, 583, 584, 590, 639, 761, 767], "standard": [173, 354, 355, 356, 358, 359, 363, 367, 368, 387, 409, 420, 428, 437, 444, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 761, 767], "re": [173, 174, 175, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 375, 387, 461, 505, 579, 595, 761], "collabor": [173, 174, 175, 761], "consortium": [173, 175, 761, 767], "data": [173, 175, 179, 180, 181, 182, 183, 354, 355, 356, 360, 362, 364, 366, 367, 368, 372, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 460, 461, 463, 464, 465, 466, 467, 468, 473, 474, 475, 477, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 563, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 615, 616, 618, 635, 761, 767], "api": [173, 174, 350, 351, 354, 356, 357, 359, 360, 362, 363, 365, 366, 367, 368, 369, 371, 373, 387, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 761, 767], "open": [174, 175, 176, 349, 350, 353, 356, 386, 409, 410, 761], "project": [174, 175, 176, 350, 351, 353, 355, 361, 372, 374, 386, 387], "grown": 174, "consider": [174, 357, 368], "recent": [174, 175, 350, 351], "year": [174, 176, 387, 761], "especi": [174, 350], "deep": [174, 179, 180, 349, 351, 352, 369, 373, 761], "learn": [174, 175, 350, 352, 354, 360, 369, 375, 386, 511, 543, 761], "can": [174, 175, 176, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 409, 411, 421, 428, 437, 461, 503, 504, 505, 761, 767], "seen": [174, 175, 357, 372, 373], "rapidli": 174, "increas": [174, 461, 485, 489, 493], "github": [174, 351, 352, 356, 359], "repo": [174, 175, 176, 350, 351, 358, 370, 372, 373, 374, 375, 386, 761, 767], "term": [174, 351, 364], "time": [174, 175, 176, 350, 351, 352, 359, 360, 364, 365, 368, 370, 373, 375, 387], "These": [174, 175, 176, 351, 356, 357, 359, 360, 364, 365, 367, 368, 370, 371, 373, 374, 375, 387, 761, 767], "written": [174, 350, 355, 356, 363, 367, 368, 370, 372, 375, 387], "mani": [174, 175, 176, 179, 180, 350, 351, 352, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 387], "differ": [174, 175, 176, 179, 180, 181, 182, 183, 350, 351, 354, 355, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 387, 428, 444, 461, 482, 483, 486, 487, 511, 515, 561, 575, 761], "while": [174, 175, 179, 180, 181, 182, 183, 350, 351, 357, 361, 367, 374, 375, 387, 511, 556, 557], "wonder": [174, 176, 372], "thing": [174, 175, 176, 350, 351, 352, 361, 372, 373], "research": [174, 386], "develop": [174, 175, 176, 349, 350, 351, 352, 386, 387, 761], "consid": [174, 175, 179, 180, 355, 360, 371, 372, 373, 511, 556, 557], "speed": 174, "evolv": 174, "sharabl": 174, "code": [174, 175, 176, 179, 180, 181, 182, 183, 321, 322, 350, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 398, 400, 401, 402, 403, 404, 405, 461, 483, 506, 511, 528, 530, 574, 761, 767], "significantli": 174, "hinder": [174, 368], "librari": [174, 175, 176, 370, 375, 385, 387, 461, 506, 511, 540, 556, 557, 761], "outdat": 174, "month": 174, "rigor": 174, "maintain": [174, 351], "against": [174, 179, 180, 359, 387, 428, 435], "newest": 174, "version": [174, 175, 176, 350, 356, 370, 372, 761], "For": [174, 175, 176, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 410, 420, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 531, 532, 533, 539, 540, 541, 550, 551, 553, 554, 561, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578], "softwar": [174, 175, 350, 351], "pipelin": [174, 363, 375], "where": [174, 175, 176, 179, 180, 349, 350, 351, 352, 353, 356, 360, 361, 363, 364, 365, 366, 367, 370, 373, 374, 375, 387, 409, 416, 417, 420, 511, 521, 539, 552, 561, 565, 579, 609, 613, 622, 761], "rapid": [174, 175, 350], "prototyp": 174, "vital": [174, 375], "signific": [174, 175, 387], "bottleneck": 174, "new": [174, 175, 176, 179, 180, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 364, 365, 367, 369, 372, 375, 386, 409, 412, 415, 416, 417, 422, 423, 426, 427, 428, 456, 511, 522, 552, 564, 579, 595, 596, 597, 600, 601, 602, 625, 626, 627, 628, 633, 634, 761], "futur": [174, 176, 350, 351, 372, 387], "avail": [174, 179, 180, 350, 351, 356, 366, 387, 461, 480, 496, 497, 498, 508, 579, 596], "specif": [174, 179, 180, 352, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 386, 387, 428, 452, 461, 503, 506, 511, 556, 557, 579, 595, 596, 597, 620, 761, 767], "quickli": [174, 176, 350, 351, 373, 374], "obsolet": [174, 176], "user": [174, 175, 350, 351, 353, 354, 359, 361, 364, 367, 369, 387], "constantli": 174, "invent": 174, "wheel": 174, "desir": [174, 179, 180, 428, 434, 437, 461, 506, 579, 609], "provid": [174, 179, 180, 350, 351, 356, 357, 360, 363, 364, 365, 366, 367, 368, 370, 374, 386, 387, 406, 407, 409, 420, 428, 439, 440, 441, 448, 452, 460, 461, 480, 579, 594, 622, 626], "simultan": [174, 176], "modern": [174, 175], "simpl": [174, 350, 351, 355, 356, 357, 359, 360, 363, 364, 365, 366, 367, 370, 372, 374, 375, 387, 579, 598], "scalabl": [174, 370], "must": [174, 176, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 360, 363, 364, 365, 366, 368, 370, 374, 375, 398, 401, 409, 410, 412, 413, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 461, 490, 491, 492, 493, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 599, 626], "determin": [174, 179, 180, 356, 360, 364, 365, 366, 428, 437, 438, 443, 448, 449, 450, 460, 461, 496, 497, 498, 508, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 530, 532, 533, 534, 539, 540, 545, 546, 547, 550, 551, 553, 554, 558, 561, 565, 566, 569, 571, 572, 573, 576, 577, 579, 580, 583, 584, 608, 610, 614, 615, 616, 617, 618, 635, 642], "exactli": [174, 176, 357, 364, 366, 761, 767], "common": [174, 179, 180, 351, 352, 357, 360, 362, 364, 366, 387], "ground": [174, 359], "li": 174, "between": [174, 179, 180, 181, 182, 183, 357, 359, 360, 363, 364, 368, 369, 371, 372, 373, 375, 386, 409, 410, 428, 444, 511, 521, 565, 761], "find": [174, 179, 180, 350, 351, 370, 373, 761], "exist": [174, 175, 179, 180, 350, 352, 353, 356, 357, 358, 359, 360, 361, 362, 367, 370, 387, 579, 594], "essenti": [174, 175, 352, 357, 360, 366], "order": [174, 179, 180, 181, 182, 183, 350, 351, 353, 356, 357, 361, 363, 364, 365, 366, 368, 372, 373, 375, 387, 511, 521], "design": [174, 175, 354, 367, 370, 372, 387], "univers": 174, "abstract": [174, 364, 374, 387, 461, 476], "In": [174, 176, 350, 351, 355, 356, 357, 360, 361, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 461, 500, 506, 507, 510, 511, 515, 561, 566, 579, 581, 613, 761], "languag": [174, 176, 370], "first": [174, 175, 350, 351, 353, 357, 360, 363, 364, 368, 370, 372, 373, 375, 406, 407, 409, 418, 419, 428, 451, 456, 461, 480, 492, 511, 515, 523, 525, 526, 527, 528, 530, 535, 542, 544, 548, 549, 554, 555, 557, 558, 561, 563, 565, 575, 579, 583], "see": [174, 349, 350, 351, 352, 358, 360, 364, 366, 368, 372, 373, 386, 387, 409, 410, 415, 418, 419, 428, 436, 452, 511, 515, 523, 525, 526, 527, 528, 530, 534, 540, 548, 554, 557, 558, 561, 563, 565, 566, 575, 761], "clear": [174, 175, 176, 351, 352, 357, 359, 365, 366, 370, 372, 461, 479], "front": [174, 369, 370, 373, 761, 767], "runner": 174, "look": [174, 350, 351, 353, 355, 357, 360, 361, 364, 365, 366, 368, 370, 372, 374, 375, 761], "littl": [174, 372], "deeper": [174, 351, 354, 369, 461, 485, 489, 493], "follow": [174, 175, 179, 180, 350, 351, 352, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 387, 428, 447, 461, 505, 511, 566, 579, 611, 612, 613, 633, 634, 761], "core": [174, 350, 352, 366, 370, 375, 461, 497, 761], "principl": 174, "oper": [174, 179, 180, 181, 182, 350, 352, 356, 357, 360, 363, 364, 366, 367, 373, 374, 409, 418, 419, 428, 452, 511, 515, 527, 528, 530, 544, 562, 563, 566, 574, 579, 585, 595, 596, 597, 635], "expos": [174, 370, 374, 579, 589], "almost": [174, 351, 364, 371, 373], "ident": [174, 176, 179, 180, 360, 362, 364, 372, 373, 387, 461, 495, 761], "uniqu": [174, 360, 364, 387, 461, 470, 471], "syntax": [174, 175], "There": [174, 350, 351, 357, 360, 363, 364, 365, 370, 373, 387], "onli": [174, 179, 180, 349, 350, 351, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 385, 387, 461, 501, 511, 556, 557, 761], "wai": [174, 175, 350, 361, 367, 372, 373, 374, 375, 387], "unsurprisingli": [174, 357], "fundament": [174, 364, 370], "consist": [174, 179, 180, 363, 367, 461, 493], "each": [174, 175, 176, 179, 180, 181, 182, 183, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 375, 386, 387, 398, 401, 402, 404, 409, 420, 428, 435, 461, 470, 471, 482, 483, 484, 485, 486, 487, 488, 492, 505, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 761, 767], "veri": [174, 175, 350, 351, 355, 357, 359, 360, 364, 366, 367, 368, 371, 373, 374, 375, 387, 761], "similar": [174, 355, 364, 365, 366, 373, 387, 511, 566], "convent": [174, 386], "those": [174, 179, 180, 350, 351, 352, 364, 370, 375, 409, 410], "introduc": [174, 364, 373], "2006": 174, "therefor": [174, 351, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 374, 387, 428, 437, 511, 515, 516, 518, 531, 541, 563, 573, 574, 576, 579, 601], "present": [174, 179, 180, 351, 358, 364, 365, 366, 367, 368, 370], "itself": [174, 350, 351, 364, 367, 368, 374, 386, 387, 579, 581], "cut": 174, "cloth": 174, "adher": [174, 175, 356, 358, 370, 375], "semant": [174, 370, 375, 511, 566], "up": [174, 175, 176, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387], "hopefulli": [174, 175, 176, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386], "paint": [174, 370], "pictur": [174, 370], "how": [174, 176, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 386, 387, 761, 767], "pleas": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 761], "discuss": [174, 175, 176, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 761], "faq": [174, 175, 176, 370, 372, 373, 374, 375, 386], "reach": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 461, 485, 489, 493], "discord": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 761], "you": [174, 175, 176, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 761, 767], "question": [174, 175, 176, 350, 351, 357, 359, 370, 372, 373, 374, 375, 386, 387, 761], "central": 175, "goal": [175, 352], "being": [175, 176, 179, 180, 350, 351, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 373, 386, 387, 409, 410, 579, 624, 629, 761], "would": [175, 350, 351, 353, 354, 356, 357, 359, 361, 362, 363, 364, 367, 368, 369, 370, 372, 374, 375, 387, 398, 403, 461, 506, 761], "entir": [175, 176, 179, 180, 351, 357, 358, 359, 363, 364, 367, 372, 373, 374, 375, 387, 461, 505], "forgiven": 175, "rais": [175, 179, 180, 351, 367, 370, 372, 428, 436, 511, 539, 565, 579, 585, 604, 613, 627, 634, 640], "eyebrow": 175, "somehow": 175, "pytorch": [175, 176, 352, 360, 365, 366, 367, 368, 370, 372, 375, 387, 761], "other": [175, 179, 180, 181, 182, 350, 351, 355, 356, 357, 359, 360, 363, 364, 367, 370, 372, 374, 375, 385, 386, 387, 406, 407, 409, 410, 511, 540, 579, 580, 581, 761], "strong": [175, 387], "industri": 175, "back": [175, 363, 369, 370, 372, 387, 761, 767], "momentum": 175, "won": [175, 176, 351, 375], "ad": [175, 347, 348, 350, 351, 352, 355, 356, 357, 359, 360, 362, 363, 364, 365, 367, 368, 370, 374, 387, 579, 633, 634], "just": [175, 176, 350, 351, 356, 357, 359, 360, 367, 370, 372, 373, 387], "make": [175, 176, 350, 351, 352, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 375, 461], "problem": [175, 351, 363, 372], "even": [175, 176, 350, 351, 356, 360, 365, 366, 368, 372, 373, 374, 375, 387, 511, 565, 567], "wors": 175, "rather": [175, 179, 180, 355, 356, 359, 364, 375, 387, 409, 410, 461, 505, 579, 615, 616, 618], "funni": 175, "comic": 175, "strip": 175, "easi": [175, 350, 351, 360, 364], "feasibl": 175, "space": [175, 409, 410, 418, 419, 579, 600], "unlik": [175, 357, 364, 461], "charger": 175, "charact": 175, "encod": [175, 373, 579, 600], "instant": [175, 761], "messag": [175, 351, 370, 372, 807, 808], "much": [175, 351, 355, 363, 364, 367, 370, 372, 373], "doe": [175, 179, 180, 351, 353, 354, 355, 356, 357, 359, 360, 361, 365, 367, 368, 370, 372, 373, 387, 511, 528, 530, 579, 613], "mandat": [175, 359, 367], "adopt": [175, 351, 363], "continu": [175, 176, 358, 359, 387], "own": [175, 176, 350, 356, 370, 387], "signatur": [175, 355, 356, 357, 364, 365, 366, 367, 368, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "replac": [175, 179, 180, 351, 353, 357, 359, 362, 364, 365, 366, 370, 372, 375, 387, 579, 625, 626], "your": [175, 176, 349, 350, 352, 353, 355, 356, 373, 374, 387, 761], "10": [175, 177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 353, 357, 364, 370, 372, 373, 409, 416, 419, 461, 511, 523, 524, 533, 544, 551, 573, 579, 591, 601, 624, 629], "100": [175, 176, 335, 336, 373, 374, 375, 387, 511, 573, 761], "despit": [175, 364, 366], "distinct": [175, 356, 364, 367, 369, 761], "still": [175, 179, 180, 356, 359, 365, 372, 374, 387, 761], "believ": [175, 351], "share": [175, 179, 180, 357, 359, 360, 361, 364, 370, 428, 456], "bring": [175, 370, 371], "benefit": [175, 176, 350, 351, 363, 364, 367, 372, 373, 387], "unrel": [175, 351], "what": [175, 176, 351, 354, 356, 357, 362, 364, 368, 369, 370, 372, 373, 374, 375, 386, 387, 761], "again": [175, 176, 351, 355, 357, 364, 367, 373, 375, 387], "contrari": 175, "bumpi": 175, "road": 175, "allud": [175, 373], "most": [175, 179, 180, 350, 351, 355, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 387], "technolog": 175, "sector": [175, 511, 514, 519, 522], "full": [175, 176, 351, 356, 365, 368, 370, 387, 409, 428, 444, 511, 544], "success": 175, "reason": [175, 351, 355, 357, 360, 363, 364, 365, 367, 370, 372, 511, 566], "build": [175, 349, 350, 360, 369, 371, 374, 375, 387, 761], "custom": [175, 374], "comput": [175, 176, 179, 180, 350, 360, 364, 370, 373, 387, 461, 505, 511, 515, 523, 526, 528, 530, 535, 536, 538, 543, 544, 548, 549, 555, 556, 557, 558, 561, 562, 563, 579, 587, 588, 591, 592], "thank": [175, 373], "interoper": 175, "compon": [175, 370], "bio": [175, 350], "hardwar": [175, 350], "initi": [175, 179, 180, 181, 182, 183, 351, 361, 365, 366, 461], "pcie": 175, "interfac": [175, 375, 387], "motherboard": 175, "raid": 175, "storag": [175, 373], "virtual": [175, 351, 353], "bluetooth": 175, "wireless": 175, "exchang": 175, "btx": 175, "factor": [175, 461, 470, 503, 504, 505], "sata": 175, "connect": [175, 350, 374, 375], "host": [175, 387], "bu": 175, "adapt": 175, "html": [175, 353, 356, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "enabl": [175, 179, 180, 181, 182, 183, 350, 351, 359, 360, 363, 364, 367, 369, 370, 371, 373, 375, 387], "anyon": [175, 349, 387], "websit": 175, "tcp": 175, "ip": 175, "node": [175, 179, 180, 364], "commun": [175, 349, 351, 352, 387, 761, 767], "network": [175, 360, 364, 370, 374, 386, 761], "smtp": 175, "possibl": [175, 349, 350, 351, 352, 356, 357, 359, 364, 365, 367, 370, 373, 386, 387, 579, 619, 637], "send": 175, "gmail": 175, "outlook": 175, "pop": 175, "email": 175, "ieee": [175, 408, 428, 444, 511, 515, 540, 561, 566, 573], "754": [175, 408, 428, 444, 511, 515, 540, 561, 566, 573], "allow": [175, 370, 387, 409, 418, 419, 579, 619], "calcul": [175, 179, 180, 181, 182, 183, 356, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 532, 533, 534, 539, 540, 550, 551, 552, 553, 554, 561, 565, 569, 571, 572, 573, 575, 576, 577], "live": [175, 176], "depend": [175, 350, 351, 356, 362, 364, 365, 370, 387, 428, 434, 511, 512, 513, 514, 516, 518, 519, 520, 521, 532, 533, 539, 540, 550, 551, 552, 553, 565, 569, 571, 572, 576, 577], "did": [175, 352, 375], "aris": [175, 387], "until": [175, 351, 387, 761], "substanti": [175, 351, 359, 363], "innov": 175, "growth": 175, "usag": [175, 370, 461, 505], "relev": [175, 350, 352, 357, 364, 365, 373], "area": [175, 367, 385, 511, 514, 519, 522, 761], "necess": 175, "parti": [175, 387], "could": [175, 176, 350, 351, 357, 359, 364, 365, 367, 370, 372, 373, 374], "easili": [175, 351, 373, 374, 375, 387, 761], "engag": [175, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "regard": [175, 364, 461], "effect": [175, 356, 363, 364, 368, 387, 409, 420], "2015": 175, "sinc": [175, 350, 351, 387], "alongsid": 175, "machin": [175, 350, 360, 386, 428, 444, 447, 511, 543], "given": [175, 176, 179, 180, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 374, 375, 386, 409, 410, 412, 418, 419, 461, 494, 500, 502, 503, 504, 505, 507, 510, 579, 591, 592, 602, 625, 626, 641], "frame": [175, 386], "matur": [175, 387], "state": [175, 356, 368, 369, 370, 371, 373, 386, 511, 561, 761], "than": [175, 179, 180, 351, 355, 357, 359, 364, 367, 370, 373, 374, 375, 387, 409, 410, 428, 444, 461, 505, 511, 513, 514, 516, 518, 521, 525, 527, 531, 541, 542, 550, 551, 553, 559, 565, 566, 568, 573, 578, 579, 615, 616, 618], "preced": [175, 374], "mention": [175, 350, 351, 357, 360, 367, 368], "aros": 175, "70": 175, "80": 175, "90": [175, 335, 336, 511, 528, 530, 567], "effort": [175, 349, 387], "stage": [175, 349, 351, 353, 354, 761], "complet": [175, 179, 180, 351, 352, 363, 364, 372, 373], "natur": [175, 357, 363, 364, 386, 511, 539, 550, 552], "like": [175, 350, 351, 353, 354, 355, 356, 357, 359, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 761], "certainli": 175, "mission": [175, 761], "creat": [175, 179, 180, 349, 350, 351, 353, 365, 366, 367, 370, 371, 374, 385, 386, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 426, 427, 461, 470, 471, 579, 601, 602, 622, 625, 626, 637, 761, 767], "At": [175, 352], "process": [175, 176, 349, 350, 351, 353, 360, 364, 370, 375, 461, 470, 471, 500, 510], "ourselv": 175, "lead": [175, 176, 179, 180, 181, 182, 183, 387], "quansight": 175, "compani": 175, "made": [175, 351, 352, 364, 367, 370, 372], "organ": [175, 355, 360, 363, 364], "panda": 175, "scipi": 175, "conda": [175, 350, 353], "dask": 175, "apach": 175, "onnx": 175, "scikit": 175, "jupyt": 175, "aw": 175, "cupi": 175, "net": [175, 176, 370, 375], "sympi": 175, "rai": [175, 511, 521], "modin": 175, "spyder": 175, "includ": [175, 179, 180, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 386, 387, 409, 410, 411, 421, 579, 608, 642], "member": [175, 351], "googl": [175, 761], "octoml": 175, "einop": [175, 179, 180, 579, 595, 596, 597], "further": [175, 176, 351, 353, 357, 363, 369, 373, 374, 761], "sponsor": 175, "lg": 175, "electron": 175, "microsoft": 175, "d": [175, 176, 335, 336, 349, 350, 354, 364, 373, 579, 584, 590, 761, 767], "shaw": 175, "intel": 175, "togeth": [175, 179, 180, 363, 364, 374, 375, 387], "major": [175, 365, 366, 387], "involv": [175, 349, 353, 354, 365, 375, 428, 452, 511, 515, 561, 761, 767], "anoth": [175, 179, 180, 350, 351, 360, 364, 365, 372, 375, 409, 415, 428, 435, 437], "promis": 175, "pursuit": 175, "unif": [175, 349, 372, 761, 767], "clearli": [175, 352, 357], "lot": [175, 176, 362, 372, 387], "thought": [175, 350, 351, 368], "care": [175, 351, 375], "attent": [175, 351, 363, 364], "gone": [175, 369], "simplifi": [175, 370, 371, 372, 374], "compat": [175, 368, 387, 428, 436, 511, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 544, 548, 549, 554, 555, 557, 558, 561, 563, 565, 566, 575, 761], "excit": [175, 349, 354, 761], "complianc": 175, "hope": [175, 387], "due": [175, 350, 364, 367, 511, 561], "suit": [175, 350, 351, 354, 358, 359, 373, 386], "some": [175, 176, 179, 180, 350, 351, 352, 355, 356, 357, 360, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 386, 387, 511, 540, 761], "motiv": [175, 372], "great": [175, 176, 359, 370, 372], "convinc": 175, "celebr": 175, "encourag": [175, 386, 387, 761, 767], "foundat": 175, "point": [176, 351, 356, 357, 363, 367, 368, 370, 372, 373, 386, 408, 409, 410, 412, 414, 416, 422, 426, 428, 434, 444, 449, 452, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 528, 530, 531, 532, 533, 534, 539, 540, 541, 550, 551, 553, 554, 561, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578], "mai": [176, 350, 351, 364, 372, 374, 409, 410, 415, 461, 506, 511, 535, 544, 549, 556, 557, 579, 594], "ask": [176, 370, 372, 387, 761], "perfectli": 176, "happi": [176, 350, 387], "abund": 176, "better": [176, 351, 354, 369, 372, 373, 374], "ll": [176, 349, 351, 357, 364, 367, 373], "give": [176, 350, 351, 354, 356, 357, 361, 368, 372], "two": [176, 181, 182, 356, 357, 359, 363, 364, 369, 373, 375, 409, 410, 414, 420, 424, 425, 428, 451, 456, 511, 527, 567, 579, 583, 761], "streamlin": 176, "workflow": [176, 351, 373, 385, 761], "save": [176, 179, 180, 387, 579, 630], "week": [176, 351, 352, 761], "let": [176, 356, 357, 364, 365, 366, 370, 372, 373, 374, 375, 761], "sai": [176, 350, 362, 372], "deepmind": 176, "releas": [176, 350, 352, 761], "awesom": 176, "paper": 176, "love": 176, "choic": [176, 350, 367, 373], "perceiverio": 176, "happen": [176, 350, 351, 373], "slew": 176, "rush": 176, "f": [176, 353, 354, 364, 370, 373, 375, 511, 543, 579, 610, 614], "g": [176, 354, 364, 387, 428, 433, 452, 461, 477], "inevit": 176, "deviat": 176, "origin": [176, 179, 180, 181, 182, 183, 361, 362, 365, 370, 372, 511, 521], "often": [176, 360, 387], "erron": 176, "train": [176, 360, 364, 366, 373, 374, 375, 385, 386, 387, 761], "poor": 176, "converg": 176, "perform": [176, 179, 180, 355, 357, 359, 360, 361, 363, 364, 366, 367, 368, 370, 373, 387, 398, 403, 409, 418, 419, 461, 579, 591, 595, 596, 597, 611, 612, 613], "issu": [176, 349, 352, 370, 372, 374, 387], "publish": [176, 387], "manag": [176, 349, 367, 387, 461], "get": [176, 179, 180, 349, 350, 352, 354, 360, 365, 366, 367, 370, 371, 372, 373, 374, 428, 442, 443, 444, 447, 461, 470, 471, 480, 481, 494, 495, 500, 504, 507, 510, 579, 582, 603, 604, 605, 624, 761, 767], "work": [176, 350, 351, 352, 354, 359, 364, 365, 366, 369, 370, 371, 372, 374, 375, 761, 767], "repositori": [176, 350, 351, 353, 358], "pull": [176, 349, 350, 353, 355, 387], "request": [176, 349, 355, 461, 497], "confus": [176, 367], "do": [176, 179, 180, 350, 351, 352, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 511, 566, 579, 613], "expect": [176, 387, 579, 582, 761], "codebas": [176, 349, 354, 355, 367, 369, 461, 503, 504, 761], "total": [176, 179, 180, 181, 182, 183, 349, 351, 357, 359, 366, 373, 374, 387, 461, 507], "hour": 176, "spent": 176, "spin": 176, "off": [176, 369], "test": [176, 350, 352, 354, 357, 387, 428, 449, 450, 511, 545, 546, 547], "error": [176, 179, 180, 350, 359, 363, 366, 368, 372, 387, 398, 399, 461, 511, 536, 538], "address": [176, 351, 352, 363, 370], "sake": 176, "singl": [176, 179, 180, 351, 355, 357, 359, 360, 362, 364, 367, 368, 370, 373, 374, 375, 387, 461, 470, 471, 490, 491, 492, 493, 579, 639, 642], "multipl": [176, 179, 180, 317, 318, 319, 320, 331, 332, 335, 336, 351, 357, 360, 364, 387, 511, 561, 579, 580, 619], "line": [176, 350, 357, 363, 371, 372, 373, 374, 385, 761, 767], "directli": [176, 351, 355, 356, 360, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 386, 387], "graph": [176, 360, 364, 371, 387], "guarante": [176, 363, 387], "turn": [176, 357, 364], "take": [176, 349, 350, 351, 356, 357, 359, 364, 365, 366, 370, 372, 374, 375, 387, 511, 528, 530, 761, 767], "few": [176, 351, 352, 360, 364, 365, 366, 367, 371, 372, 373, 374, 385, 761, 767], "second": [176, 350, 357, 367, 372, 428, 451, 456, 461, 492, 511, 515, 523, 525, 526, 527, 528, 530, 535, 542, 544, 548, 549, 554, 555, 557, 558, 561, 563, 565, 575, 579, 583, 624, 629], "automat": [176, 350, 351, 360, 364, 368, 369, 370, 371, 374, 375, 761], "everyon": [176, 349, 351, 387], "regardless": [176, 179, 180, 349, 372, 375, 406, 407], "wouldn": 176, "nice": [176, 359], "write": [176, 179, 180, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 367, 370, 372, 375, 398, 401, 461, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 588, 592, 599, 601], "onc": [176, 350, 351, 364, 365, 366, 370, 373, 387, 461, 505], "know": 176, "among": [176, 179, 180, 359], "frantic": 176, "port": 176, "lucid": 176, "honk": 176, "improv": [176, 351, 360, 370], "understand": [176, 350, 351, 352, 353, 354, 356, 357, 358, 368, 369], "pattern": [176, 179, 180, 356, 365, 579, 595, 596, 597], "hasn": 176, "now": [176, 179, 180, 350, 353, 355, 362, 364, 365, 368, 372, 373, 375, 386, 387], "spend": 176, "torchvis": 176, "probabl": 176, "sonnet": 176, "about": [176, 350, 351, 358, 369, 370, 374, 375, 387, 428, 444, 447], "next": [176, 350, 351, 352, 353, 356, 357, 361, 362, 372, 373, 428, 444, 761], "everyth": [176, 351, 352, 371, 387], "zero": [176, 179, 180, 357, 363, 364, 365, 366, 368, 370, 373, 374, 398, 400, 401, 409, 412, 414, 420, 424, 425, 427, 428, 434, 511, 515, 516, 518, 525, 533, 540, 541, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 573, 574, 576, 577, 579, 591, 622, 625, 626, 761], "need": [176, 350, 351, 352, 353, 355, 356, 357, 358, 360, 363, 364, 367, 370, 372, 373, 386, 387, 579, 587, 588], "said": 176, "high": [176, 179, 180, 335, 336, 352, 373], "level": [176, 349, 352, 360, 369, 370, 373, 374, 375, 387], "optim": [176, 367, 371, 373, 375, 386, 461, 761], "trainer": [176, 385, 387, 761], "statu": 176, "quo": 176, "kera": 176, "dopamin": 176, "ignit": 176, "catalyst": 176, "lightn": 176, "fastai": 176, "haiku": [176, 375], "flax": [176, 375, 387], "trax": [176, 375], "objax": [176, 375], "idea": [176, 386], "fulli": [176, 363, 364, 368, 370, 371, 372, 373, 374, 375, 387], "offer": [176, 374], "containerwithactiv": [177, 181, 182], "dict_in": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "queue": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 461, 470, 471, 579, 624, 629], "queue_load_s": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "container_combine_method": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "list_join": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "queue_timeout": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 579], "print_limit": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "key_length_limit": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "print_ind": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "print_line_spac": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "ivyh": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "default_key_color": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "green": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 807, 808], "keyword_color_dict": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "rebuild_child_contain": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "types_to_iteratively_nest": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "alphabetical_kei": [177, 178, 179, 180, 181, 182, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "containerbas": [177, 178, 179, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 364], "__getitem__": [179, 180, 364], "queri": [179, 180, 364, 365, 372, 461, 494, 504], "slice": [179, 180, 579, 601, 602], "chain": [179, 180, 363, 364, 374, 375, 387], "element": [179, 180, 356, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 416, 417, 424, 425, 461, 484, 488, 492, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 587, 588, 591, 592, 599, 609, 638, 639], "represent": [179, 180, 181, 182, 183, 386, 408, 428, 432, 433, 444, 447, 461, 477, 478, 511, 512, 515, 523, 526, 528, 530, 558, 561, 579, 581, 632, 637], "dictionari": [179, 180, 181, 182, 183, 373, 387, 461, 504], "around": [179, 180, 181, 182, 183, 351, 360, 363, 368, 372, 387], "sequenc": [179, 180, 181, 182, 183, 357, 365, 386, 461, 470, 471, 579, 584, 619], "multiprocess": [179, 180, 181, 182, 183, 373, 387, 461, 470, 579], "asynchron": [179, 180, 181, 182, 183], "wait": [179, 180, 181, 182, 183, 351], "size": [179, 180, 181, 182, 183, 372, 373, 409, 418, 419, 461, 503, 504, 505, 579, 625, 631], "dimens": [179, 180, 181, 182, 183, 357, 370, 373, 398, 403, 409, 424, 425, 461, 492, 579, 595, 596, 597, 600, 606, 622, 641], "combin": [179, 180, 181, 182, 183, 351, 357, 359, 360, 363, 364, 375], "arriv": [179, 180, 181, 182, 183], "timeout": [179, 180, 181, 182, 183, 461, 470, 471, 579, 624, 629], "limit": [179, 180, 181, 182, 183, 351, 357, 359, 370, 373, 375, 387, 428, 444, 447, 579, 587, 588], "maximum": [179, 180, 181, 182, 183, 357, 370, 373, 375, 461, 485, 489, 493, 505, 511, 579, 587, 588, 600, 761], "length": [179, 180, 181, 182, 183, 373, 409, 410, 420], "whitespac": [179, 180, 181, 182, 183], "indent": [179, 180, 181, 182, 183, 373], "extra": [179, 180, 181, 182, 183, 357, 362, 363, 370], "newlin": [179, 180, 181, 182, 183, 356], "handl": [179, 180, 181, 182, 183, 354, 359, 360, 362, 364, 365, 366, 367, 368, 374, 387, 406, 407, 461, 477, 478, 479, 480, 481, 495, 499, 500, 507, 510], "result": [179, 180, 181, 182, 183, 355, 356, 357, 359, 363, 364, 365, 367, 368, 373, 387, 398, 401, 409, 410, 428, 452, 461, 470, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 592, 599, 601, 625, 626, 761], "color": [179, 180, 181, 182, 183, 807, 808], "termin": [179, 180, 181, 182, 183, 350, 351, 353, 364, 370, 373], "map": [179, 180, 181, 182, 183, 359, 360, 364, 368, 373, 386, 387, 461, 470], "termcolor": [179, 180, 181, 182, 183], "rebuild": [179, 180, 181, 182, 183], "found": [179, 180, 181, 182, 183, 350, 351, 356, 363, 364, 461, 495], "constructor": [179, 180, 181, 182, 183, 365, 366, 372, 579, 582], "param": [179, 180, 181, 182, 183, 319, 320, 370, 375, 579, 581, 601, 602], "kept": [179, 180, 181, 182, 183, 351, 367], "structur": [179, 180, 181, 182, 183, 353, 355, 360, 363, 364, 373, 374, 579, 589], "alphabet": [179, 180, 181, 182, 183], "preserv": [179, 180, 181, 182, 183, 375, 387], "__setitem__": [179, 180, 363, 364, 372], "val": [179, 180, 367, 372, 579, 611, 612, 613, 627, 628], "after": [179, 180, 357, 364, 365, 369, 428, 456, 511, 573], "updat": [179, 180, 350, 351, 352, 353, 354, 357, 358, 362, 363, 364, 365, 368, 370, 372, 373, 375, 387, 461, 470, 579, 613, 625, 626], "all_fals": [179, 180], "assert_is_bool": [179, 180], "key_chain": [179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346], "to_appli": [179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346], "prune_unappli": [179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346], "map_sequ": [179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346], "entri": [179, 180, 409, 418, 419], "boolean": [179, 180, 364, 409, 416, 428, 434, 448, 460, 461, 496, 508, 511, 523, 524, 526, 528, 530, 555, 556, 557, 558, 579, 580, 583, 584, 608, 609, 610, 614, 615, 616, 617, 618, 635, 642], "evalu": [179, 180, 364, 511, 539, 540, 550, 551, 552, 553, 562, 568, 574], "assert": [179, 180, 372, 373, 579, 585], "skip": [179, 180, 353, 359], "prune": [179, 180], "all_key_chain": [179, 180], "include_empti": [179, 180], "all_tru": [179, 180, 364, 373], "arrays_as_list": [179, 180], "intermedi": [179, 180], "as_arrai": [179, 180, 579, 606, 631], "as_bool": [179, 180], "as_on": [179, 180], "ones": [179, 180, 359, 370, 372, 373, 409, 414, 423, 511, 531, 579, 622, 761], "sub": [179, 180, 351, 352, 354, 359, 364, 372, 373, 374, 461, 486, 487, 490, 491, 492, 493, 761], "fill": [179, 180, 409, 412, 416, 417, 422, 423, 426, 427], "as_random_uniform": [179, 180], "low": [179, 180, 335, 336, 370], "uniform": [179, 180, 374, 780], "lower": [179, 180, 351, 357, 370, 387, 409, 414, 424, 511, 559], "boundari": [179, 180], "output": [179, 180, 350, 354, 355, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 372, 374, 375, 387, 398, 401, 409, 410, 412, 413, 414, 416, 417, 420, 422, 423, 426, 427, 461, 470, 471, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 586, 588, 592, 599, 601, 761], "interv": [179, 180, 370, 375, 409, 410, 418, 419], "as_vari": [179, 180], "as_zero": [179, 180], "assert_contains_sub_contain": [179, 180], "sub_cont": [179, 180], "partial": [179, 180, 351], "except": [179, 180, 356, 363, 367, 372, 387, 428, 436, 579, 585, 594, 613, 640], "diff": [179, 180, 364, 373], "screen": [179, 180, 373], "assert_contains_sub_structur": [179, 180], "check_shap": [179, 180], "static": [179, 180, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 335, 336, 341, 342, 347, 348, 352, 356, 357, 360, 387, 406, 407], "assert_ident": [179, 180], "check_typ": [179, 180], "same_arrai": [179, 180, 373], "arrays_equ": [179, 180, 579], "datatyp": [179, 180, 409, 411, 421, 428, 438, 449, 450, 451], "exact": [179, 180, 351, 370], "assert_identical_structur": [179, 180], "at_key_chain": [179, 180], "ignore_key_error": [179, 180], "ignore_non": [179, 180], "at_kei": [179, 180], "ignor": [179, 180, 357, 387, 409, 420], "substr": [179, 180], "access": [179, 180, 351, 353, 365], "clip_min": [179, 180], "clip_max": [179, 180], "minimum": [179, 180, 370, 375, 461, 511, 512, 579, 604, 605, 627, 628, 633, 634, 761], "config": [179, 180, 373], "right": [179, 180, 349, 350, 351, 354, 357, 373, 511, 525, 527], "duplic": [179, 180, 356, 361, 362, 372, 374], "compar": [179, 180, 359, 373, 579, 580, 583, 584], "configur": [179, 180, 350, 351, 353, 365, 461, 504], "container_rightmost": [179, 180], "common_key_chain": [179, 180, 364], "across": [179, 180, 352, 357, 359, 360, 364, 365, 368, 461, 470, 471, 482, 483, 485, 486, 487, 488, 489, 493, 503, 504, 579, 583, 584], "properti": [179, 180, 357, 359, 360, 364, 372, 373, 374, 461, 473], "contains_sub_contain": [179, 180], "match": [179, 180, 364, 428, 434, 511, 566, 579, 619], "contains_sub_structur": [179, 180], "copi": [179, 180, 353, 356, 361, 365, 370, 372, 373, 386, 387, 409, 411, 415, 428, 434, 461, 506, 579, 590, 638, 639], "create_if_abs": [179, 180], "inplac": [179, 180, 321, 322, 354, 357, 362, 363, 368, 372, 374, 579, 585, 610, 613, 614, 635], "correspond": [179, 180, 181, 182, 351, 356, 357, 358, 360, 363, 364, 365, 368, 428, 435, 511, 521, 565], "alreadi": [179, 180, 350, 351, 361, 364, 368, 372, 387, 461, 511, 531, 541, 561, 567, 578, 761], "noth": [179, 180, 351], "cutoff_at_depth": [179, 180], "depth_cutoff": [179, 180], "summari": [179, 180, 351, 428, 439, 440, 441, 453, 454, 455, 461, 474, 475, 579, 589, 593, 607], "cutoff_at_height": [179, 180], "height_cutoff": [179, 180], "deep_copi": [179, 180, 373], "intern": [179, 180, 356, 363, 364, 366, 367, 461], "dev": [179, 180, 181, 183, 350, 360, 366, 370, 372, 374, 461, 470, 495], "belong": [179, 180, 374], "dev_clon": [179, 180, 461], "clone": [179, 180, 351, 353, 461, 482, 483, 484, 485], "dev_dist": [179, 180, 461], "distribut": [179, 180, 352, 366, 387, 461, 482, 486, 487, 488, 489], "along": [179, 180, 355, 367, 409, 418, 419, 461, 486, 487, 488, 489, 490, 491, 492, 493, 505, 579, 591, 592, 601, 641], "split": [179, 180, 349, 351, 369, 370, 387, 461, 470, 486, 487, 488, 489, 503, 504, 505, 579, 619, 761], "dev_str": [179, 180], "diff_kei": [179, 180], "detect_key_diff": [179, 180], "detect_value_diff": [179, 180], "detect_shape_diff": [179, 180], "thei": [179, 180, 352, 354, 355, 357, 360, 362, 364, 365, 366, 367, 372, 373, 374, 375, 387, 428, 451, 761], "treat": [179, 180, 371, 375, 406, 407], "detect": [179, 180, 368, 373, 374], "without": [179, 180, 351, 355, 360, 363, 364, 366, 368, 370, 372, 373, 374, 386, 387, 579, 624, 629], "flag": [179, 180, 351, 367, 372, 461, 480], "container0": [179, 180], "einops_rearrang": [179, 180, 579], "axes_length": [179, 180, 579, 595, 596, 597], "rearrang": [179, 180, 579, 595, 597], "addit": [179, 180, 350, 351, 355, 356, 359, 364, 365, 372, 373, 375, 461, 506, 511, 515, 579, 595, 596, 597], "einops_reduc": [179, 180, 579], "reduct": [179, 180, 365, 372, 579, 596, 625, 626, 761], "One": [179, 180, 365, 370, 372, 373, 579, 596], "callabl": [179, 180, 364, 370, 388, 389, 390, 391, 392, 393, 394, 395, 396, 406, 407, 428, 445, 446, 461, 505, 579, 581, 586, 594, 596], "einops_repeat": [179, 180, 579], "find_sub_contain": [179, 180], "sub_cont_to_find": [179, 180], "exsit": [179, 180], "find_sub_structur": [179, 180], "sub_struc_to_find": [179, 180], "flatten_key_chain": [179, 180, 373], "__": [179, 180, 357, 373], "above_height": [179, 180, 373], "below_depth": [179, 180, 373], "format_key_chain": [179, 180], "format_fn": [179, 180], "format": [179, 180, 353, 356, 365, 366, 370, 372, 373, 428, 442, 461, 481, 761], "string": [179, 180, 361, 365, 366, 370, 373, 428, 432, 433, 442, 448, 460, 461, 477, 478, 479, 480, 494, 500, 506, 507, 510, 579, 593], "from_disk_as_hdf5": [179, 180, 373], "h5_obj_or_filepath": [179, 180], "slice_obj": [179, 180], "load": [179, 180, 387], "disk": [179, 180, 373], "h5py": [179, 180], "file": [179, 180, 350, 351, 353, 355, 356, 360, 361, 363, 364, 370, 373, 579, 630], "hdf5": [179, 180, 373], "filepath": [179, 180, 351], "h5": [179, 180], "from_disk_as_json": [179, 180, 373], "json_filepath": [179, 180], "json": [179, 180, 373], "were": [179, 180, 351, 355, 359, 364], "abl": [179, 180, 350, 351, 360, 365, 367, 372, 375], "dure": [179, 180, 360, 364, 365, 366, 367, 387, 406, 407, 461, 506, 579, 640], "from_disk_as_pickl": [179, 180, 373], "pickle_filepath": [179, 180], "pickl": [179, 180, 364, 373], "from_flat_list": [179, 180], "flat_list": [179, 180], "hierarchi": [179, 180, 373], "flat": [179, 180, 579, 625], "popul": [179, 180, 365, 366, 370], "from_numpi": [179, 180, 373], "gather": [179, 180, 579, 602], "accord": [179, 180, 350, 353, 360, 365, 428, 437, 444, 511, 515, 527, 561, 579, 601, 625, 626], "index": [179, 180, 353, 360, 364, 372, 408, 409, 414, 420, 461, 502, 579, 581, 601, 602], "h5_file_s": [179, 180], "content": [179, 180, 352, 353, 367, 370, 373], "batch": [179, 180, 360, 364, 373, 461, 503, 504, 579, 600], "handle_inplac": [179, 180], "prime": [179, 180], "overwritten": [179, 180, 361, 363], "has_kei": [179, 180], "query_kei": [179, 180], "somewher": [179, 180], "has_key_chain": [179, 180], "has_nan": [179, 180, 579], "include_inf": [179, 180, 579, 608, 642], "leafwis": [179, 180], "nan": [179, 180, 355, 356, 408, 428, 434, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 531, 532, 533, 539, 540, 541, 545, 547, 550, 551, 553, 554, 561, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578, 579, 608, 642], "well": [179, 180, 359, 367, 374, 375, 386, 579, 608], "inf": [179, 180, 408, 579, 608, 642], "wise": [179, 180, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 511, 512, 513, 515, 516, 518, 520, 521, 523, 524, 525, 526, 527, 528, 530, 534, 535, 536, 538, 542, 543, 544, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 575, 579, 599], "identical_array_shap": [179, 180], "exclus": [179, 180, 360, 364, 375, 409, 410, 579, 591, 615, 616, 618], "identical_config": [179, 180], "identical_structur": [179, 180], "if_exist": [179, 180], "inplace_upd": [179, 180, 367, 579], "key_chains_contain": [179, 180], "sub_str": [179, 180], "join": [179, 180, 761], "list_stack": [179, 180, 373], "dim": [179, 180, 365, 579, 622], "func": [179, 180, 364, 406, 407, 461, 505, 579, 586], "map_cont": [179, 180], "include_self": [179, 180], "possibi": [179, 180], "place": [179, 180, 351, 354, 355, 356, 357, 359, 360, 364, 366, 368, 375, 409, 410, 411, 412, 413, 414, 416, 417, 421, 422, 423, 426, 427, 428, 437, 461, 506, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 579, 601, 611, 612, 613], "matrix": [179, 180, 409, 420, 424, 425, 579, 580, 587], "p": [179, 180, 319, 320, 350, 351, 409, 420, 579, 587, 588], "integ": [179, 180, 364, 365, 372, 409, 410, 416, 428, 447, 450, 452, 511, 512, 523, 524, 525, 526, 527, 528, 530, 531, 541, 542, 558, 565, 566, 567, 578], "flatten": [179, 180, 579, 600], "left": [179, 180, 350, 351, 357, 365, 511, 525, 761], "broadcast": [179, 180, 355, 356, 357, 364, 365, 398, 401, 428, 435, 436, 461, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 588, 599], "correctli": [179, 180, 350, 359, 364, 365, 368, 374, 387], "max_depth": [179, 180, 461, 465, 468, 475, 485, 489, 493, 579, 607], "multi_map": [179, 180, 364], "map_nest": [179, 180, 317, 318, 327, 328, 331, 332], "leftmost": [179, 180], "multi_map_in_static_method": [179, 180, 364], "fn_name": [179, 180], "num_arrai": [179, 180], "overwrite_at_key_chain": [179, 180], "overwrit": [179, 180, 367, 370, 461, 505], "target_dict": [179, 180], "return_dict": [179, 180], "prune_empti": [179, 180], "keep_non": [179, 180], "empti": [179, 180, 363, 365, 366, 409, 410], "prune_key_chain": [179, 180], "key1": [179, 180, 374], "key2": [179, 180], "key3": [179, 180], "prune_key_from_key_chain": [179, 180], "absolut": [179, 180, 349, 511, 512], "certain": [179, 180, 350, 387, 409, 410, 418, 419], "decid": [179, 180, 350], "remov": [179, 180, 351, 352, 353, 356, 359, 360, 365, 367, 375], "prune_kei": [179, 180], "prune_keys_from_key_chain": [179, 180], "remove_key_length_limit": [179, 180], "remove_print_limit": [179, 180], "reshape_lik": [179, 180], "leading_shap": [179, 180], "return_cont": [179, 180], "restructur": [179, 180], "keep_orig": [179, 180], "transpos": [179, 180, 372, 375, 461, 492, 761], "old": [179, 180, 350, 367], "keep": [179, 180, 350, 351, 358, 364, 371, 373, 375, 579, 641], "start": [179, 180, 349, 350, 351, 352, 353, 354, 356, 357, 365, 369, 370, 372, 373, 374, 386, 387, 409, 410, 418, 419, 461, 476], "restructure_key_chain": [179, 180], "keychain_map": [179, 180], "set_at_key_chain": [179, 180], "set_at_kei": [179, 180], "set_framework": [179, 180, 370, 372, 373, 375], "set_ivy_backend": [179, 180], "ivy_backend": [179, 180], "attribut": [179, 180, 356, 364, 365, 371, 372, 373, 374, 428, 444, 445, 446, 447, 461, 501], "show": [179, 180, 350, 351, 357, 367, 386, 387, 761], "show_sub_contain": [179, 180], "sub_cont_or_keychain": [179, 180], "shuffl": [179, 180, 761], "seed_valu": [179, 180], "align": [179, 180, 350, 370, 372, 761, 767], "seed": [179, 180, 761], "shuffle_h5_fil": [179, 180], "dataset": [179, 180, 373, 385, 761], "size_ordered_arrai": [179, 180], "keychain": [179, 180], "smallest": [179, 180, 428, 444, 447, 511, 531], "largest": [179, 180, 386, 428, 444, 447], "slice_kei": [179, 180], "key_slic": [179, 180], "all_depth": [179, 180], "slice_via_kei": [179, 180], "sort_by_kei": [179, 180], "num_or_size_split": [179, 180, 370], "with_remaind": [179, 180], "constitu": [179, 180, 375], "dimension": [179, 180, 409, 410, 414, 420], "evenli": [179, 180, 409, 410, 418, 419], "store": [179, 180, 356, 361, 363, 364, 370, 372, 373, 374, 579, 600], "stop_gradi": [179, 180, 321, 322, 374, 461, 505, 761], "preserve_typ": [179, 180], "stop": [179, 180, 370, 387, 409, 410, 418, 419, 461, 476, 505], "alwai": [179, 180, 351, 352, 355, 356, 360, 361, 363, 364, 367, 368, 370, 372, 387, 428, 434, 511, 515, 561, 579, 613], "structural_diff": [179, 180], "to_devic": [179, 180, 461, 480], "move": [179, 180, 351, 355, 461, 506], "cuda": [179, 180, 370, 373, 387, 409, 418, 419, 461, 470, 477, 502, 579, 601, 602, 622, 625, 626], "cpu": [179, 180, 351, 366, 387, 409, 418, 419, 461, 480, 481, 483, 497, 500, 502, 506, 507, 509, 510, 579, 601, 602, 622, 625, 626], "target": [179, 180, 354, 369, 373, 374, 375, 461, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 761], "to_dict": [179, 180], "to_disk_as_hdf5": [179, 180, 373], "starting_index": [179, 180], "max_batch_s": [179, 180], "read": [179, 180, 353, 761], "r": [179, 180, 350, 579, 584, 641], "w": [179, 180, 321, 322, 370, 373, 374, 579, 584], "later": [179, 180, 579, 586], "append": [179, 180, 353, 359, 370, 373, 511, 525], "to_disk_as_json": [179, 180, 373], "to_disk_as_pickl": [179, 180, 373], "to_flat_list": [179, 180], "to_iter": [179, 180, 364], "leaf_keys_onli": [179, 180], "to_iterator_kei": [179, 180], "to_iterator_valu": [179, 180], "to_json": [179, 180], "to_list": [179, 180, 579, 761], "to_multi_dev": [179, 180], "multidevcontain": [179, 180, 181], "distributedarrai": [179, 180], "to_numpi": [179, 180, 373, 579, 761], "update_backend": [179, 180], "to_raw": [179, 180], "raw": [179, 180, 356], "trim_kei": [179, 180], "max_length": [179, 180], "try_kc": [179, 180], "tri": [179, 180], "self": [179, 180, 363, 364, 370, 372, 373, 374, 375, 461, 761], "arbitrari": [179, 180, 359, 360, 364, 367, 368, 374, 387, 409, 420, 428, 435, 452, 461, 490, 491, 493], "concatten": [179, 180, 461, 490, 491, 492, 493, 505], "unstack": [179, 180, 370, 373, 579, 761], "dim_siz": [179, 180, 461], "update_config": [179, 180], "global_norm": [179, 180, 319, 320], "vector": [179, 180, 386, 409, 420, 579, 588], "with_default_key_color": [179, 180], "with_entries_as_list": [179, 180], "with_ivy_backend": [179, 180], "with_key_length_limit": [179, 180, 373], "with_print_ind": [179, 180, 373], "with_print_limit": [179, 180, 373], "with_print_line_spac": [179, 180], "containerwithcr": [181, 182, 311], "containerwithdatatyp": [181, 182, 313], "containerwithdevic": [181, 182, 315], "containerwithelementwis": [181, 182, 317, 364], "containerwithgener": [181, 182, 319], "containerwithgradi": [181, 182, 321], "containerwithimag": [181, 182, 323], "containerwithlay": [181, 182, 325], "containerwithlinearalgebra": [181, 182, 327], "containerwithloss": [181, 182, 329], "containerwithmanipul": [181, 182, 331, 352], "containerwithnorm": [181, 182, 333], "containerwithrandom": [181, 182, 335], "containerwithsearch": [181, 182, 337], "containerwithset": [181, 182, 339], "containerwithsort": [181, 182, 341], "containerwithstatist": [181, 182, 343], "containerwithutil": [181, 182, 345], "__add__": [181, 182, 356, 357, 363, 364, 368, 372], "special": [181, 182, 352, 355, 356, 357, 363, 368, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 528, 530, 531, 532, 533, 539, 540, 541, 550, 551, 553, 554, 561, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578], "__radd__": [181, 182, 356, 357], "revers": [181, 182, 352, 356, 357, 375, 387, 579, 594], "at_dev": [181, 183, 461, 474, 475], "int32": [313, 314, 365, 428, 437, 445, 579, 638], "int64": [313, 314, 365, 428, 437, 445, 511, 527], "static_can_cast": [313, 314], "from_": [313, 314, 428, 437], "static_add": [317, 318, 356, 357, 364], "static_divid": [317, 318, 364], "static_multipli": [317, 318, 364], "static_subtract": [317, 318, 364], "static_tan": [317, 318, 357, 364], "143": [317, 318, 357, 511, 576], "16": [317, 318, 335, 336, 351, 357, 373, 511, 576], "38": [317, 318, 357, 511, 576], "static_tanh": [317, 318], "76": [317, 318, 511, 533], "96": [317, 318, 511, 576], "995": [317, 318, 511, 577], "9999": [317, 318], "static_all_equ": [319, 320], "clip_vector_norm": [319, 320, 579], "max_norm": [319, 320, 579, 587, 588], "static_gather_nd": [319, 320], "adam_upd": [321, 322, 374], "lr": [321, 322, 373, 374], "mw_tm1": [321, 322], "vw_tm1": [321, 322], "gradient_descent_upd": [321, 322, 761], "lamb_upd": [321, 322], "max_trust_ratio": [321, 322], "decay_lambda": [321, 322], "lars_upd": [321, 322], "optimizer_upd": [321, 322], "effective_grad": [321, 322], "static_adam_step": [321, 322], "87": [321, 322, 335, 336], "976": [321, 322, 511, 577], "static_adam_upd": [321, 322], "static_gradient_descent_upd": [321, 322], "static_lamb_upd": [321, 322], "static_lars_upd": [321, 322], "static_optimizer_upd": [321, 322], "static_binary_cross_entropi": [329, 330], "static_cross_entropi": [329, 330], "static_sparse_cross_entropi": [329, 330], "static_clip": [331, 332], "static_rol": [331, 332, 357, 364], "random_uniform": [335, 336, 366, 374, 761], "static_randint": [335, 336], "randint": [335, 336, 761], "20": [335, 336, 372, 511, 528, 530, 539, 567, 573], "15": [335, 336, 350, 357, 511, 523, 567], "12": [335, 336, 350, 357, 364, 511, 523, 528, 530, 533, 567, 579, 591, 605], "40": [335, 336, 511, 533, 573], "gpu": [335, 336, 351, 366, 372, 387, 461, 480, 483, 496, 498, 502, 504, 509], "62": [335, 336], "52": [335, 336], "95": [335, 336], "37": [335, 336, 511, 576], "42": [335, 336, 375, 398, 404], "14": [335, 336, 353, 357, 364, 511, 528, 530], "13": [335, 336, 357, 364, 511, 523, 528, 530, 533, 573, 579, 591], "static_random_uniform": [335, 336], "static_argsort": [341, 342], "static_sort": [341, 342], "add_ivy_container_instance_method": 347, "containerexampl": [347, 348], "strongli": [349, 350, 761, 767], "welcom": [349, 350, 351, 761, 767], "skill": 349, "vetern": 349, "beginn": 349, "aspect": [349, 373, 761], "guid": [349, 350, 351, 359, 761], "through": [349, 351, 352, 354, 357, 360, 361, 364, 369, 370, 372, 373, 374, 375, 386, 511, 521], "journei": [349, 761, 767], "inclusvi": 349, "big": [349, 387], "team": [349, 350, 351], "board": 349, "contributor": [349, 350, 351, 369, 761], "section": [349, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374], "below": [349, 350, 352, 353, 354, 355, 357, 360, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 386, 409, 420, 424, 425, 511, 523, 528, 530, 533, 567, 577, 761], "best": [349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 579, 619], "go": [349, 350, 351, 352, 354, 355, 357, 364, 369, 373, 387], "finish": [349, 350, 354, 761], "dive": [349, 351, 352, 369, 372, 373, 387, 761], "environ": [349, 351, 353, 386], "basic": [349, 352, 353], "fork": [349, 350, 579, 620], "doc": [349, 352, 356, 368, 370, 373, 374, 761], "document": [349, 351, 371, 373, 375], "local": [349, 350, 353, 360], "task": [349, 351, 386, 761], "help": [349, 350, 357, 361, 363, 364, 372, 373, 374, 385, 579, 581, 761], "video": [349, 351, 356, 357, 368], "realli": [350, 364, 387], "contribut": [350, 351, 352, 370, 767], "toward": [350, 370, 761, 767], "page": [350, 351, 371, 375, 385, 761, 767], "explain": [350, 351, 352, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 761, 767], "main": [350, 353, 362, 364, 409, 414, 424, 425], "prefer": [350, 364], "git": [350, 351], "submodul": [350, 351, 352, 353, 358, 359, 360, 366, 369, 370, 374, 761], "com": 350, "unifyai": [350, 353], "http": [350, 356, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "gh": 350, "your_fold": 350, "id": [350, 363, 364, 461, 480], "cours": [350, 351, 357, 373, 387], "whatev": [350, 387], "integr": [350, 359, 428, 434], "familiar": [350, 352], "sure": [350, 352, 358], "elig": 350, "free": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 386, 761], "student": 350, "licenc": 350, "peopl": [350, 351, 354], "seem": [350, 374, 387], "miss": [350, 357, 359, 363, 364], "explicit": [350, 353, 364, 365, 367, 370, 387], "remind": 350, "channel": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 579, 600], "pace": 350, "suggest": [350, 351, 355], "latest": [350, 352, 353, 356, 387, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "packag": [350, 353, 387], "ensur": [350, 351, 359, 363, 365, 368, 579, 613], "pypi": [350, 352, 387], "person": [350, 351], "experi": [350, 371, 373, 387], "avoid": [350, 351, 359, 361, 362, 364, 372, 461, 511, 540], "pip": [350, 386, 761], "instal": [350, 353, 386, 761], "abil": [350, 371, 387], "perhap": [350, 372, 373, 374, 387], "track": [350, 351, 461], "run": [350, 353, 358, 359, 361, 368, 370, 371, 372, 373, 374, 375, 386, 387, 461, 470], "command": [350, 353, 761], "ivy_dev": [350, 351, 353], "name": [350, 351, 353, 356, 359, 370, 372, 373, 375, 406, 407, 579, 581], "setup": 350, "click": [350, 351, 356, 761], "icon": [350, 351], "side": [350, 351], "choos": [350, 351, 375, 461, 506, 511, 556, 557], "panel": 350, "select": [350, 351, 359, 370, 372, 375, 387], "drop": [350, 387], "down": [350, 372], "path": [350, 353], "manual": [350, 351, 359, 374], "builtin": [350, 353, 372, 374], "requir": [350, 353, 355, 356, 357, 359, 362, 363, 365, 366, 368, 372, 387, 406, 407, 511, 573], "cmd": [350, 353], "directori": [350, 351, 353, 579, 630], "folder": [350, 351, 353, 355, 358, 359, 360], "abov": [350, 351, 353, 356, 357, 360, 361, 363, 364, 367, 368, 372, 373, 374, 375, 409, 420, 424, 425, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 561, 563, 567, 573, 574, 576, 577, 579, 601], "m": [350, 351, 353, 354, 370, 409, 420, 424, 425, 579, 584], "python3": [350, 353], "script": [350, 351, 353, 357, 370, 387], "bat": [350, 351, 353], "OR": [350, 351, 353, 511, 526, 557], "bin": [350, 351, 353], "mac": [350, 351, 353], "linux": [350, 351, 353], "virtualenv": 350, "os": 350, "note": [350, 351, 355, 356, 357, 364, 511, 566], "tick": [350, 351], "To": [350, 357, 360, 364, 373, 374, 375, 761], "ivy_test": [350, 351], "test_array_api": [350, 351, 358, 359], "cd": [350, 351, 353], "txt": 350, "visual": [350, 387], "jetbrain": 350, "remot": 350, "mitig": 350, "potenti": [350, 369, 511, 540], "conflict": [350, 351, 373], "yet": [350, 352, 364], "particular": [350, 351, 355, 367, 511, 512], "system": [350, 387], "instruct": [350, 352], "desktop": 350, "wsl": 350, "powershel": 350, "admin": 350, "visit": 350, "link": 350, "profession": 350, "execut": [350, 353, 364, 367, 370, 372, 375, 387, 579, 640], "deploy": 350, "top": [350, 351, 359, 373, 374, 761], "press": [350, 373, 761], "ok": 350, "caus": [350, 351, 357, 359, 364, 367, 387], "earlier": [350, 351], "might": [350, 351, 355, 359, 362, 370, 372, 373, 579, 594], "necessari": [350, 357, 361, 364, 367], "virtualis": 350, "detail": [350, 351, 352, 355, 358, 359, 360, 361, 362, 364, 368, 373, 374, 409, 415], "sudo": 350, "apt": 350, "ca": 350, "certif": 350, "curl": 350, "gnupg": 350, "lsb": 350, "mkdir": 350, "keyr": 350, "fssl": 350, "download": [350, 359], "gpg": 350, "dearmor": 350, "o": [350, 370, 579, 584], "echo": 350, "deb": 350, "arch": 350, "dpkg": 350, "architectur": [350, 375, 387], "lsb_releas": 350, "cs": 350, "tee": 350, "null": 350, "ce": 350, "cli": 350, "containerd": 350, "io": 350, "compos": [350, 364, 387], "plugin": 350, "systemctl": 350, "permiss": 350, "relat": [350, 351, 386, 461], "post": [350, 375, 761, 767], "It": [350, 351, 353, 354, 355, 356, 357, 361, 363, 364, 367, 370, 372, 373, 374, 398, 401, 461, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 588, 599], "headach": 350, "arm": 350, "m1": 350, "instead": [350, 351, 352, 356, 357, 359, 360, 364, 367, 368, 370, 372, 373, 387], "featur": [350, 355, 368, 373, 761], "vm": 350, "azur": 350, "cloud": [350, 386], "defin": [350, 352, 355, 356, 365, 368, 372, 374, 387, 511, 561, 566, 579, 622], "dockerfil": [350, 353], "longer": [350, 365, 367], "worri": 350, "platform": 350, "agnost": [350, 363, 368, 370, 372, 375, 387, 761], "usual": 350, "studio": 350, "favourit": 350, "extens": [350, 351, 356, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577], "theme": 350, "too": [350, 351, 387, 511, 515, 561], "done": [350, 351, 357, 359, 373], "unsupport": [350, 365, 428, 445, 446], "slow": 350, "ipad": 350, "long": [350, 351, 357], "browser": 350, "cool": [350, 355], "requisit": 350, "head": [350, 364, 761], "pane": [350, 351], "readi": [350, 352], "begin": 350, "outlin": [350, 351, 352, 354, 356, 359, 360, 364, 367, 372], "dropdown": 350, "tab": [350, 373, 761], "master": [350, 351, 364], "vs": 350, "view": [350, 351, 409, 415], "built": [350, 371, 409, 410, 461], "bottom": 350, "box": 350, "patient": 350, "upto": 350, "minut": 350, "launch": 350, "That": [350, 351, 372, 373, 374, 511, 566], "refer": [350, 351, 359, 360, 365, 368, 387, 409, 414, 511, 540, 552], "approach": [350, 351, 359, 360, 364, 372, 373, 387], "colour": 350, "applic": [350, 365, 366, 374], "good": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 374], "chanc": 350, "vscode": 350, "explor": [350, 371, 375, 386], "troubleshoot": 350, "sometim": [350, 351], "ever": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "64": [350, 373, 374, 511, 573, 574, 761], "bit": [350, 357, 360, 364, 372, 428, 443, 444, 447, 511, 524, 525, 527], "usr": 350, "more": [350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 409, 410, 428, 435, 511, 540, 761], "nutshel": [350, 368], "hook": 350, "lint": 350, "fix": [350, 351], "fail": [350, 352, 358, 359, 370, 372], "attempt": [350, 387], "succe": 350, "problemat": 350, "proce": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "modifi": [350, 351, 356, 360, 365, 366, 370], "properli": [350, 354], "enter": [350, 351, 363, 365, 366, 368, 461], "unsur": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "feel": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 761], "server": [351, 761], "context": [351, 357, 364, 365, 366, 461, 579, 620], "suitabl": [351, 355, 364], "quick": [351, 354, 374], "tendenc": 351, "land": 351, "end": [351, 364, 367, 369, 386, 387, 409, 410, 511, 521, 761, 767], "world": 351, "come": [351, 352, 374, 385, 761, 767], "fly": 351, "hard": [351, 372], "receiv": [351, 359, 365, 366, 461, 470, 471, 579, 582, 619], "respons": [351, 353], "internship": 351, "comment": 351, "trigger": 351, "unansw": 351, "label": [351, 370, 371, 375], "respond": 351, "someon": [351, 387], "els": [351, 352, 355, 360, 361, 367, 370, 372, 374, 375, 387, 579, 585, 594, 598], "strive": [351, 387], "repli": 351, "newli": [351, 367, 406, 407, 428, 434, 579, 586], "bug": [351, 359], "serv": [351, 359, 360, 363, 364, 368, 369, 761], "suspect": 351, "behaviour": [351, 356, 359, 363, 364, 367, 368, 372], "observ": 351, "confid": 351, "wrong": 351, "someth": [351, 355, 373, 374, 387], "bet": 351, "act": [351, 357, 387], "placehold": [351, 363, 368], "mark": [351, 359], "ii": 351, "iii": 351, "titl": [351, 761], "issue_numb": 351, "delet": [351, 353], "No": [351, 370], "progress": [351, 364, 371, 375], "pr": 351, "soon": [351, 364, 385, 387, 761, 767], "solut": [351, 359, 364], "review": [351, 355], "merg": 351, "everi": [351, 352, 353, 357, 358, 359, 360, 361, 362, 364, 367, 368, 370, 372, 374, 409, 416, 417, 579, 580], "dai": 351, "close": [351, 356, 511, 540, 567], "likewis": [351, 356, 360, 364, 365, 368, 373], "freed": 351, "purpos": [351, 353, 357, 359, 360, 362, 363, 364, 368, 369, 372, 511, 540, 761], "remain": [351, 357, 387, 511, 515, 561, 566], "short": [351, 374], "basi": [351, 358, 373], "situat": [351, 375], "alloc": [351, 387, 409, 424, 425, 428, 434, 461], "upon": [351, 357, 359, 367, 387], "period": 351, "prevent": [351, 367, 372], "unabl": 351, "obvious": 351, "never": [351, 364], "reflect": [351, 363], "qualiti": 351, "hypothet": 351, "frustrat": 351, "delai": 351, "busi": 351, "fine": [351, 372, 375], "becaus": [351, 356, 359, 360, 361, 363, 365, 366, 367, 368, 370, 374, 375, 387], "inact": 351, "me": 351, "unfairli": 351, "definit": [351, 360, 365, 372], "investig": 351, "Then": [351, 353, 372, 387], "practic": [351, 359], "separ": [351, 359, 363, 370, 372, 373], "branch": [351, 364, 387, 406, 407, 511, 521], "role": [351, 371], "date": 351, "upstream": [351, 358], "complic": [351, 370], "root": [351, 353, 373, 511, 573], "merge_with_upstream": 351, "sh": 351, "name_of_your_branch": 351, "resolv": 351, "push": [351, 358], "both": [351, 356, 357, 360, 364, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 428, 437, 451, 511, 515, 516, 518, 531, 541, 563, 565, 573, 574, 576, 579, 601], "abort": 351, "tediou": 351, "resolut": 351, "stash": 351, "reinstat": 351, "fetch": 351, "uncommit": 351, "unstag": 351, "untrack": 351, "comprehens": 351, "explan": [351, 356, 364, 368, 372], "atlassian": 351, "tutori": 351, "quit": [351, 352, 356, 360, 362, 363], "logic": [351, 362, 363, 365, 366, 372, 461, 497, 511, 555, 556, 557, 761], "blame": 351, "revis": 351, "author": [351, 761], "eg": 351, "past": 351, "l": [351, 354], "grep": 351, "v": [351, 370, 373, 374, 375, 761], "commit_id": 351, "handi": 351, "histori": 351, "toggl": 351, "vertic": 351, "highlight": [351, 357], "previou": [351, 359, 368, 375, 387], "inform": [351, 428, 444, 447, 579, 581], "whenev": [351, 372, 373], "tag": 351, "think": [351, 357], "interact": [351, 761], "gain": [351, 369, 374], "yourself": [351, 352, 386], "simpler": [351, 372], "cannot": [351, 361, 365, 375], "least": [351, 357, 360, 363], "final": [351, 356, 357, 360, 363, 365, 367, 370, 372, 373, 409, 418, 419, 579, 600], "tickbox": 351, "corner": 351, "span": 351, "intent": [351, 367], "larg": [351, 373, 511, 515, 561], "discourag": 351, "philosophi": 351, "increment": [351, 579, 612], "frequent": [351, 352], "valuabl": 351, "infrequ": 351, "earli": [351, 761], "wast": 351, "spot": [351, 360], "mistak": 351, "propos": 351, "mountain": 351, "advoc": [351, 387], "individu": [351, 352, 360], "per": [351, 373, 461], "style": 351, "ve": [351, 369, 372, 761], "actual": [351, 354, 360, 367, 369, 372, 374, 387], "aim": [351, 369], "part": [351, 355, 358, 359, 360, 370, 371, 375, 386, 387, 409, 424, 425], "subsect": 351, "session": [351, 761], "block": [351, 360, 369, 371, 375, 387, 461, 761], "smaller": [351, 370, 375], "edit": 351, "beauti": 351, "particularli": [351, 373, 387], "concern": [351, 354, 357, 364, 367, 369], "effici": [351, 359, 360, 364, 367, 368, 370, 373, 387], "difficult": [351, 359, 387], "undo": 351, "stress": 351, "frequenc": [351, 579, 600], "pycharm": 351, "pytest": [351, 359], "button": 351, "declar": 351, "insid": [351, 353, 355, 365], "exec": 351, "rm": 351, "rf": 351, "cp": 351, "ivy_contain": 351, "bash": [351, 353], "test_ivi": [351, 359], "test_funct": 351, "test_cor": 351, "test_imag": 351, "test_random_crop": 351, "header": 351, "q": [351, 387], "array_api_test": 351, "test_creation_funct": 351, "test_arang": 351, "window": [351, 353], "variou": [351, 356, 362, 368, 386], "wherebi": [352, 364], "broad": 352, "todo": [352, 359], "commit": [352, 359], "NOT": [352, 511, 556], "resourc": 352, "hypothesi": 352, "cover": [352, 356, 357, 360, 362, 369], "lambda": [352, 370, 373], "direct": [352, 374, 375, 386], "bind": [352, 364], "aforement": 352, "categori": [352, 355, 363, 364, 365, 369, 761], "parent": [352, 372], "hint": [352, 355, 356, 360, 363, 367, 368, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 579, 601], "its": [352, 353, 356, 428, 435, 461, 505], "thorough": [352, 356, 359, 368], "transpil": [352, 369, 371, 761, 767], "builder": [353, 385, 387, 761], "maco": 353, "ubuntu": 353, "uid": 353, "make_docs_without_dock": 353, "rel": [353, 761], "synchron": 353, "rest": [353, 371, 375], "remove_doc": 353, "_": [353, 356, 364, 367, 372, 373, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "privat": 353, "fulfil": [353, 369, 761], "autogenerated_sourc": 353, "png": [353, 373], "_imag": 353, "lastli": 353, "rst": 353, "partial_sourc": 353, "conf": 353, "create_rst_fil": 353, "filter": 353, "repres": [353, 372, 409, 420, 428, 443, 511, 514, 515, 519, 522, 533, 561, 572, 577], "overal": [353, 356, 364, 365, 366, 375], "markup": 353, "extract": [353, 355], "get_functions_and_class": 353, "doctr": 353, "readm": [353, 387], "module_nam": 353, "copy_readme_to_rst": 353, "tabl": 353, "toc": 353, "tree": 353, "append_toctree_to_rst": 353, "create_index_rst": 353, "\u03c0": [353, 511, 513, 516, 518, 520, 521], "namespac": [353, 355, 365, 370, 375], "who": [354, 369, 387], "mainli": [354, 371, 373], "under": [354, 356, 357, 358, 359, 360, 364, 369, 370, 373, 375], "hood": [354, 357, 359, 360, 364, 369, 370, 373, 375], "weed": [354, 369], "behind": [354, 369, 371], "navig": 354, "tour": 354, "primari": [354, 359, 361, 367, 387], "composit": [354, 359, 361, 363, 364, 367, 370, 374, 375, 387], "nestabl": [354, 356, 357, 359, 367, 428, 437, 511, 515, 516, 518, 531, 541, 563, 573, 574, 576, 579, 601], "dynam": [354, 365, 366, 367, 370, 406, 407], "runtim": [354, 359, 461], "h": [354, 364], "j": [354, 579, 583, 584], "k": [354, 370, 409, 414, 424, 425, 579, 583], "borrow": 354, "n": [354, 409, 420, 424, 425, 579, 584], "taken": [355, 375], "constant": [355, 360, 374, 375, 387, 461, 470, 471, 774], "compil": [355, 364, 369, 371, 387, 761], "meta": [355, 363], "overlap": 355, "sever": [355, 387], "judgement": 355, "locat": [355, 359, 361, 366], "some_namespac": 355, "some_backend": 355, "another_backend": 355, "break": [355, 368, 372, 387, 761], "anyth": [355, 761], "refactor": 355, "ongo": 355, "subfold": [355, 359], "via": [355, 364, 365, 366, 367, 370, 372, 373, 386], "file_nam": 355, "my_func": [355, 357], "int": [355, 357, 360, 364, 365, 366, 367, 368, 375, 398, 403, 406, 407, 409, 412, 414, 416, 417, 418, 419, 422, 424, 425, 426, 428, 436, 441, 443, 444, 447, 450, 461, 483, 486, 487, 488, 489, 497, 498, 499, 505, 506, 511, 523, 524, 525, 526, 527, 528, 530, 579, 581, 591, 592, 595, 596, 597, 600, 601, 606, 622, 625, 626, 631, 632, 641], "nativedtyp": [355, 365, 366, 368, 409, 410, 411, 412, 413, 414, 416, 417, 421, 422, 423, 426, 427, 428, 433, 434, 440, 441, 442, 451], "nativedevic": [355, 365, 366, 368, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 426, 427, 461, 478, 479, 480, 494, 500, 502, 504, 506, 507, 510, 579, 622], "my": 355, "numer": [355, 374, 409, 420, 428, 434, 511, 512, 515, 531, 534, 540, 541, 542, 545, 546, 547, 548, 556, 557, 561, 562, 563, 565, 566, 568, 574, 575, 578, 579, 604, 605, 627, 628, 633, 634], "cooler": 355, "produc": [355, 461, 470, 471], "something_cool": 355, "category_nam": [356, 360, 365, 366, 368], "contrast": [356, 368], "backend_nam": [356, 360, 361, 362, 365, 366, 368], "account": 356, "instanti": 356, "firstli": [356, 357, 360, 363, 365, 367, 373], "templat": [356, 761], "spec": [356, 357], "api_specif": [356, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "array_api": 356, "preview": 356, "render": 356, "incorrectli": 356, "onlin": [356, 761], "approxim": [356, 398, 399, 511, 513, 514, 516, 518, 519, 520, 521, 532, 533, 539, 540, 550, 551, 552, 553, 565, 569, 571, 572, 576, 577], "tangent": [356, 398, 405, 511, 520, 521, 522, 576, 577], "domain": [356, 511, 513, 514, 516, 518, 519, 520, 521, 532, 533, 539, 540, 550, 551, 553, 569, 571, 572, 573, 576, 577], "infin": [356, 408, 428, 434, 511, 512, 514, 515, 519, 520, 521, 531, 532, 533, 539, 540, 541, 542, 545, 546, 550, 551, 553, 554, 561, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578], "codomain": [356, 511, 513, 514, 516, 518, 519, 520, 521, 532, 533, 539, 540, 550, 551, 553, 569, 571, 572, 573, 576, 577], "x_i": [356, 511, 512, 513, 514, 516, 518, 519, 520, 524, 531, 532, 533, 539, 540, 541, 545, 546, 547, 550, 551, 553, 556, 562, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578], "assum": [356, 361, 365, 372, 373, 387, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 532, 533, 541, 563, 567, 569, 571, 573, 574, 576, 577, 579, 601], "express": [356, 370, 375, 511, 513, 516, 518, 520, 521, 532, 569, 571, 576], "radian": [356, 511, 513, 516, 518, 520, 521, 532, 569, 571, 576], "float": [356, 360, 364, 365, 367, 368, 372, 374, 398, 400, 408, 409, 410, 412, 414, 416, 417, 418, 419, 422, 426, 428, 434, 440, 444, 449, 452, 461, 494, 500, 504, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 548, 549, 550, 551, 553, 554, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 575, 576, 577, 578, 579, 587, 588, 600, 604, 605, 627, 628, 633, 634], "operand": [356, 511, 513, 514, 515, 516, 518, 519, 520, 521, 528, 530, 531, 532, 533, 539, 540, 541, 550, 551, 553, 554, 561, 565, 566, 567, 569, 571, 572, 573, 576, 577, 578], "whose": [356, 409, 424, 425, 511, 514, 519, 522, 532, 533, 565, 569, 571, 572, 576, 577, 579, 586], "ref": [356, 511, 527, 548, 561, 563, 566, 575], "promot": [356, 360, 365, 428, 434, 437, 451, 452, 456, 511, 513, 514, 515, 516, 518, 519, 520, 522, 523, 525, 526, 527, 528, 530, 532, 533, 534, 539, 540, 550, 551, 553, 554, 558, 561, 565, 566, 569, 571, 572, 573, 576, 577], "But": [356, 364, 375], "needless": 356, "info": [356, 761], "subset": [356, 359, 368, 370], "extend": [356, 359, 361, 368], "renam": 356, "conform": [356, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 540, 541, 563, 567, 573, 574, 576, 577], "org": [356, 428, 437, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "elementwise_funct": [356, 511, 516, 518, 528, 530, 531, 533, 541, 563, 573, 574], "descript": [356, 364, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 579, 601], "simplic": [356, 374, 386, 409, 420, 428, 437, 511, 515, 516, 518, 523, 528, 530, 531, 533, 541, 563, 567, 573, 574, 576, 577, 579, 601], "judgment": 356, "beyond": 356, "text": 356, "func_nam": [356, 357, 360], "pure": [356, 372, 375, 387], "themselv": [356, 360, 364, 365, 366, 374], "operator_nam": 356, "succinct": 356, "contstructor": 356, "linear": [356, 370, 373, 374, 375, 398, 399, 400, 401, 579, 600, 761], "though": [356, 360, 365, 373, 387], "forward": [356, 375, 386, 387], "_forward": [356, 370, 373, 374, 761], "former": 356, "trainabl": [356, 371, 373, 374], "explicitli": [356, 360, 361, 363, 364, 367, 370, 387], "latter": [356, 361], "implicit": [356, 364, 370], "docst": 356, "eight": 357, "static_": 357, "op_nam": 357, "__r": 357, "four": [357, 360, 365, 368, 373], "__sub__": [357, 363, 364, 368, 372], "__mul__": [357, 363, 364, 368, 372], "__truediv__": [357, 363, 364], "respect": [357, 363, 364, 365, 368, 409, 420, 511, 512, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 543, 544, 548, 549, 554, 555, 557, 558, 561, 563, 566, 575], "recap": [357, 364, 374], "independ": [357, 358, 362, 364, 370, 375], "combinatorili": 357, "variat": [357, 359], "grid": [357, 359, 386, 409, 420], "vari": [357, 359, 364, 372], "simplest": 357, "small": [357, 360, 370, 374, 387, 511, 561], "unus": [357, 367, 406, 407], "18": [357, 364, 511, 528, 530], "excess": [357, 361, 372], "showcas": [357, 386], "demonstr": [357, 372], "replic": [357, 365], "meant": 357, "imaginari": 357, "some_flag": 357, "another_flag": 357, "54": [357, 511, 532, 533, 573], "jointli": 357, "three": [357, 364, 369, 409, 420, 761], "x0": [357, 579, 583], "procedur": 357, "sens": [357, 364, 372], "5574077": 357, "1850398": 357, "5463025": 357, "8422884": 357, "91601413": 357, "9647598": 357, "3738229": 357, "1597457": 357, "0963247": 357, "9955841": 357, "3278579": 357, "multi": [357, 364, 369, 387, 761, 767], "seper": [357, 579, 600], "pars": [357, 387], "satisfi": 357, "far": [357, 366, 371, 372], "asid": [357, 386], "irrelev": [357, 365], "increasingli": 357, "complex": [357, 373, 374, 375, 387], "rule": [357, 359, 360, 363, 364, 365, 428, 434, 437, 452, 511, 522, 527, 534, 561, 566], "count": [357, 373, 461, 499], "14254655": 357, "1578213": 357, "380515": 357, "17": [357, 364, 398, 400], "trivial": 357, "By": [357, 360, 364, 367, 374, 375, 579, 591, 592], "non": [357, 364, 365, 370, 406, 407, 428, 434, 448, 511, 556, 557], "dictat": [357, 363, 367, 368], "exlud": 357, "unit": [358, 359, 387, 398, 399, 400, 401, 461], "thoroughli": [358, 359], "ci": [358, 359, 387], "failur": 358, "On": [359, 371, 375], "fixtur": 359, "consum": [359, 364, 368, 461], "300": [359, 511, 567], "hit": [359, 370], "permit": [359, 363, 368], "action": 359, "eleg": 359, "intellig": 359, "sampl": 359, "rang": [359, 373, 374, 375, 409, 410, 418, 419, 761], "cach": [359, 360, 461, 479, 579, 586], "unexplor": 359, "known": 359, "repeatedli": [359, 364], "upload": 359, "artifact": 359, "parametr": 359, "strategi": 359, "statement": [359, 387], "plai": [359, 375], "helper": [359, 373], "verifi": [359, 365, 366, 372, 761, 767], "truth": [359, 511, 535, 543, 544, 548, 549, 563], "opt": [359, 361, 367, 372], "defer": [359, 360, 363, 364, 365, 366, 367], "suffic": [359, 362], "catch": [359, 579, 594], "systemat": 359, "safeguard": 359, "inabl": 359, "fact": [359, 373], "num_gpu": [359, 366, 461], "categor": [360, 366], "mutual": [360, 364], "constitut": [360, 370], "venn": 360, "diagram": 360, "light": [360, 387], "wherea": [360, 363, 365, 366, 368, 375], "hand": [360, 387], "log_pr": [360, 364, 367], "array_arg": 360, "typic": 360, "whatsoev": [360, 364], "commonli": 360, "outsid": [360, 366, 370, 372, 375], "cache_fn": [360, 579], "stable_divid": [360, 579], "denomin": [360, 387, 579, 599, 605, 628, 633, 634], "divis": [360, 511, 527, 534, 542, 566, 579, 599, 605, 628, 633, 634], "piec": [360, 362, 363, 370], "deal": [360, 387], "concurr": [360, 364], "weight": [360, 364, 374, 375], "modif": 360, "handle_nest": [360, 364, 388], "decor": [360, 362, 364, 365, 366, 367], "group": [360, 364], "briefli": [360, 373], "cast": [360, 365, 428, 434, 437, 761], "set_default_dtyp": [360, 365, 428], "default_dtyp": [360, 365, 428], "get_all_arrays_on_dev": 360, "nested_map": 360, "index_nest": 360, "implicit_backend": 361, "unless": [361, 366, 367, 387, 511, 561, 579, 622], "__dict__": [361, 370, 372], "ivy_original_dict": [361, 370], "unmodifi": [361, 365], "moment": [361, 387], "fallback": 361, "freedom": 361, "recommend": [361, 511, 556, 557, 566], "achiev": [362, 373, 375], "to_native_arrays_and_back": [362, 368, 388], "handle_out_argu": [362, 365, 366, 367, 368, 388], "wrapper": [362, 363, 364, 365, 367, 368, 372], "topic": [362, 372], "tf": [363, 365, 366, 367, 368, 370, 375, 387, 761], "_data": [363, 372], "organiz": [363, 364], "inherit": [363, 364, 372], "bear": [363, 364, 365], "mind": [363, 364], "necessarili": [363, 364], "although": [363, 364], "underpin": [363, 364, 370], "programmat": [363, 364], "backup": [363, 364], "accident": [363, 364], "readabl": [363, 364, 368, 372, 373], "absent": [363, 364], "perk": [363, 364], "auto": [363, 364, 373], "throw": [363, 372], "imposs": 363, "inputs_to_native_arrai": [363, 388], "outputs_to_ivy_arrai": [363, 365, 366, 368, 388], "coupl": [363, 364, 372, 374], "anywai": 363, "secondli": [363, 365], "easier": 363, "five": [364, 373], "decis": [364, 370, 372], "displai": [364, 373], "arbitrarili": [364, 373], "__repr__": 364, "control": [364, 365, 367, 372, 373, 386], "__getattr__": 364, "underli": [364, 511, 523, 526, 528, 530, 558], "__setattr__": 364, "__contains__": 364, "__getstate__": 364, "__setstate__": 364, "unpickl": 364, "expand": [364, 579, 600], "children": 364, "shallowest": 364, "deepest": 364, "67": [364, 511, 528, 530, 533], "22": [364, 511, 528, 530], "25": [364, 511, 573, 574], "execute_with_gradi": [364, 373, 374, 375, 387, 761], "multi_head_attent": [364, 367], "retain_grad": 364, "dy": 364, "dx": 364, "technic": [364, 367, 368, 387], "autograd": [364, 387], "grad": [364, 373, 374, 375, 761], "redund": 364, "num_head": 364, "mask": 364, "to_q_fn": 364, "to_kv_fn": 364, "to_out_fn": [364, 367], "to_q_v": 364, "to_kv_v": 364, "to_out_v": 364, "measur": 364, "dot": 364, "product": [364, 511, 561, 579, 591], "implicitli": 364, "intuit": [364, 373, 374], "debug": [364, 373], "chronolog": 364, "had": [364, 367], "sequenti": [364, 374], "flow": [364, 386], "implic": 364, "slightli": [364, 370, 374], "eager": [364, 387], "int8": [365, 428, 445], "int16": [365, 428, 437, 445], "uint8": [365, 428, 437, 445], "uint16": [365, 428, 446], "uint32": [365, 428, 446], "uint64": [365, 428, 446], "bfloat16": [365, 428, 445], "float16": [365, 428, 446], "all_dtyp": 365, "all_numeric_dtyp": 365, "all_int_dtyp": 365, "all_float_dtyp": 365, "fall": [365, 369, 761], "valid": [365, 370, 428, 438], "invalid": 365, "thirdli": 365, "native_float32": 365, "importantli": [365, 372, 375, 386], "varieti": [365, 366], "astyp": [365, 367, 428], "broadcast_to": [365, 428], "result_typ": [365, 428], "conveni": [365, 366, 368, 371, 373, 374], "arguabl": [365, 366], "compound": 365, "overflow": [365, 511, 515], "infer_dtyp": [365, 366, 368, 388], "arr": [365, 366], "scalar": [365, 370, 375, 387, 409, 417, 579, 622, 639, 642], "default_int_dtyp": [365, 428], "default_float_dtyp": [365, 428], "settabl": [365, 366], "set_default_int_dtyp": [365, 428], "set_default_float_dtyp": [365, 428], "arang": [365, 409, 418, 419, 761], "infer_devic": [365, 366, 368, 388], "jnp": [365, 366, 367, 368, 375, 761], "jaxarrai": [365, 366, 367, 368], "mx": [365, 366, 367, 761], "nd": [365, 366, 367, 370, 375, 761], "deleg": 365, "fill_valu": [365, 409, 416, 417, 511, 544], "shape_to_tupl": [365, 579], "as_n": [365, 428, 439, 440, 441, 442, 461, 480, 481, 502], "idx": [366, 372, 579, 581], "tpu": [366, 461, 483, 508], "get_all_ivy_arrays_on_dev": [366, 461], "aliv": [366, 461, 495, 499, 501, 579, 603, 621, 623], "total_mem_on_dev": [366, 461], "amount": [366, 461, 507], "memori": [366, 367, 385, 387, 461, 479, 500, 505, 507, 510, 761], "dev_util": [366, 461], "num_cpu_cor": [366, 461], "default_devic": [366, 370, 461, 499, 502, 509], "dual": 366, "thrown": [366, 387, 579, 613], "rare": [366, 387], "set_default_devic": [366, 461, 509], "program": 367, "strictli": 367, "ration": 367, "speak": 367, "subtli": 367, "ensure_in_backend": [367, 579, 613], "x_nativ": 367, "val_n": 367, "is_ivy_arrai": [367, 372, 579], "is_vari": 367, "assign": [367, 372], "elif": 367, "irrespect": [367, 372, 428, 434], "inclus": [367, 409, 410], "omit": [367, 368], "unspecifi": [367, 511, 565, 566], "predominantli": [367, 386], "math": [367, 375, 761], "presenc": 367, "altern": [367, 373], "_wrap_fn": 367, "maxim": [367, 370], "inner": [367, 372], "third": [367, 387], "addition": [367, 368], "leverag": 367, "asarrai": [367, 409], "equival": [367, 373, 375, 409, 410, 511, 527, 556, 557, 566], "input_arrai": 367, "adress": 368, "revisit": [368, 375], "dedic": [368, 372, 374], "__div__": 368, "dicat": 368, "futher": 368, "absenc": 368, "pep": 368, "484": 368, "annot": 368, "brittl": 368, "intend": 368, "freeli": 368, "inde": [368, 387], "flexibl": 368, "original_typ": 368, "cumbersom": 368, "sound": 369, "higher": [369, 370, 375, 387], "overview": [369, 386], "handler": [369, 371, 375, 761], "fledg": [370, 371], "syntact": [370, 375], "clip_by_valu": [370, 375], "clamp": [370, 375], "behavior": [370, 387, 511, 565, 566], "fit": 370, "logspac": [370, 409], "construct": [370, 371, 374, 375], "num": [370, 409, 418, 419], "power_seq": 370, "linspac": [370, 409, 410, 761], "okai": 370, "bound": 370, "resid": [370, 374], "edg": [370, 375, 761], "larger": [370, 375, 428, 444], "ml_framework": [370, 375, 409, 410], "current_framework": [370, 375], "furthermor": 370, "concaten": [370, 373, 461, 490, 579, 600, 761], "framework_handl": 370, "face": 370, "verbos": [370, 761, 808], "cprint": [370, 807], "framework_stack": 370, "_determine_framework_from_arg": 370, "valueerror": 370, "get_framework": 370, "neither": [370, 511, 515, 561], "illustr": [370, 386], "un": [370, 428, 448], "lstm_updat": 370, "nn": [370, 375, 409, 420, 761], "init_h": 370, "init_c": 370, "kernel": [370, 387], "recurrent_kernel": 370, "bia": [370, 374], "recurrent_bia": 370, "x_shape": 370, "batch_shap": [370, 372, 375, 579, 622], "timestep": 370, "input_channel": [370, 374], "x_flat": 370, "wi": 370, "wi_x": 370, "wii_x": 370, "wif_x": 370, "wig_x": 370, "wio_x": 370, "recurr": 370, "wh": 370, "lstm": 370, "ht": 370, "ct": 370, "hts_list": 370, "unrol": [370, 373], "wii_xt": 370, "wif_xt": 370, "wig_xt": 370, "wio_xt": 370, "zip": 370, "htm1": 370, "ctm1": 370, "wh_htm1": 370, "whi_htm1": 370, "whf_htm1": 370, "whg_htm1": 370, "who_htm1": 370, "sigmoid": [370, 373, 374, 398, 761], "ft": 370, "gt": 370, "ot": 370, "offici": 370, "reliabl": 370, "sacrific": 370, "hear": 370, "virtu": 370, "pure_ivi": 370, "reduce_mean": [370, 373, 374, 375, 761], "reduce_sum": [370, 761], "reduce_var": 370, "compile_graph": [370, 375], "pure_torch": 370, "cat": [370, 375], "backbon": [370, 373], "_layer": 370, "super": [370, 373, 374, 375], "clean": [370, 371, 373], "random_unifrom": 370, "unclean": 370, "wx": 370, "temp": 370, "torchscript": 370, "fn": [370, 372, 388, 389, 390, 391, 392, 393, 394, 395, 396, 428, 445, 446, 461, 470, 471, 579, 581, 640], "example_input": [370, 406, 407], "static_argnum": [370, 406, 407], "static_argnam": [370, 406, 407], "jit": [370, 387], "frontend": 371, "primit": [371, 387], "describ": [371, 375], "hierarch": [371, 373, 374], "straight": [372, 761], "arraywithlinalg": 372, "arraywithlog": 372, "arraywithmath": 372, "arraywithmeta": 372, "arraywithreduct": 372, "is_native_arrai": [372, 579], "_shape": 372, "_size": 372, "functool": 372, "mul": 372, "len": [372, 375, 409, 420], "_dtype": 372, "_devic": 372, "_dev_str": 372, "as_ivy_dev": [372, 461], "_pre_repr": 372, "_post_repr": 372, "ndim": 372, "mt": 372, "answer": [372, 387], "consol": 372, "typeerror": 372, "immut": 372, "behav": 372, "claim": 372, "truli": 372, "_native_wrapp": 372, "attributeerror": 372, "scatter_nd": [372, 579, 761], "genuin": 372, "some_method": 372, "similarli": [372, 409, 420], "rewritten": 372, "__pow__": 372, "strang": 372, "power": [372, 373, 374, 511, 527, 539, 565, 579, 604, 627, 634], "enforc": 372, "notic": 372, "appear": 372, "invers": [372, 386, 511, 513, 514, 516, 518, 519, 520, 521, 522], "_wrap_method": 372, "func_wrapp": [372, 388, 389, 390, 391, 392, 393, 394, 395, 396], "__name__": 372, "non_wrapped_method": 372, "_method_wrap": 372, "native_arg": 372, "native_kwarg": 372, "inner_fn": 372, "whist": 372, "unwrap": 372, "transit": 372, "needlessli": 372, "randn": 372, "_unwrap_method": 372, "method_wrap": 372, "compartment": 372, "public": [372, 579, 589], "newshap": 372, "new_shap": 372, "tidi": 372, "shorter": 372, "crystal": 372, "41": [372, 511, 528, 530, 573], "enough": [372, 373, 374], "ton": 373, "ado": [373, 374], "incred": [373, 387], "hash": 373, "soup": 373, "walk": [373, 374], "dct": 373, "cnt": 373, "combo": [373, 761, 767], "hold": [373, 579, 625, 626], "1000": [373, 511, 573], "uda": 373, "3333": 373, "6667": 373, "178": 373, "new_weight": 373, "0600": 373, "3100": 373, "2400": 373, "6900": 373, "delimit": 373, "autocomplet": 373, "midwai": 373, "agent": 373, "total_spe": 373, "total_height": 373, "total_width": 373, "ag": 373, "tot": 373, "total_": 373, "total_h": 373, "batch_siz": 373, "dir": 373, "dropout": 373, "adam": [373, 374, 375, 761], "cnt0": 373, "cnt1": 373, "diff_0": 373, "diff_1": 373, "config0": 373, "config1": 373, "Not": [373, 374, 387, 408], "decod": 373, "l0": 373, "l1": 373, "depth": [373, 374, 375, 386, 461, 485, 489, 493, 579, 607, 622], "clearer": 373, "truncat": 373, "decoder__l0": 373, "decoder__l1": 373, "encoder__l0": 373, "encoder__l1": 373, "height": 373, "l0__b": 373, "l0__w": 373, "l1__b": 373, "l1__w": 373, "printabl": 373, "obviou": 373, "foresight": 373, "untidili": 373, "update_ag": 373, "normalize_img": 373, "img": 373, "img_max": 373, "reduce_max": [373, 761], "img_min": 373, "reduce_min": [373, 761], "img_rang": 373, "agent_posit": 373, "agent_veloc": 373, "agent_cam_front_rgb": 373, "agent_cam_front_depth": 373, "agent_cam_rear_rgb": 373, "agent_cam_rear_depth": 373, "agent_cam_lidar": 373, "normal": 373, "cleaner": 373, "camera": 373, "front_rgb": 373, "front_depth": 373, "rear_rgb": 373, "rear_depth": 373, "lidar": 373, "rgb": 373, "rear": 373, "veloc": 373, "cam": 373, "cam_max": 373, "cam_min": 373, "cam_rang": 373, "Of": 373, "ideal": 373, "perman": 373, "afterward": 373, "thread": 373, "incorpor": 373, "pretti": 373, "straightforward": 373, "dataload": [373, 385, 761], "_cnt": 373, "img_": 373, "_dataset_s": 373, "_batch_siz": 373, "_count": [373, 374], "__next__": 373, "filenam": 373, "img_fnam": 373, "fname": 373, "loaded_img": 373, "cv2": 373, "imread": 373, "loader": [373, 387], "batch_slic": 373, "model": [373, 374, 761], "mymodel": [373, 761], "linear0": [373, 374, 761], "linear1": [373, 374, 761], "x_in": [373, 374, 375, 761], "001": [373, 374], "loss_fn": [373, 374, 375, 761], "0145": 373, "grad_fn": 373, "addbackward0": 373, "_create_vari": 374, "output_channel": 374, "with_bia": 374, "_input_channel": 374, "_output_channel": 374, "_w_shape": 374, "_b_shape": 374, "_with_bia": 374, "8979": 374, "3198": 374, "0196": 374, "3126": 374, "3717": 374, "9687": 374, "6958": 374, "5122": 374, "3902": 374, "8800": 374, "5613": 374, "1982": 374, "nightmar": 374, "overcom": 374, "fc": 374, "9563": 374, "impact": 374, "v0": 374, "v1": 374, "6440": 374, "key0": 374, "1823": 374, "8075": 374, "linear3": 374, "v2": 374, "2346": 374, "counter": 374, "hidden": 374, "fed": [374, 461, 505], "1300": 374, "decoupl": 374, "scheme": 374, "weight_initi": 374, "glorotuniform": 374, "bias_initi": 374, "_w_init": 374, "_b_init": 374, "create_vari": 374, "var_shap": 374, "fan_out": 374, "fan_in": 374, "fan_mod": 374, "fan_sum": 374, "slight": 374, "misnom": 374, "saw": 374, "vanilla": 374, "descent": 374, "lar": 374, "lamb": 374, "compile_on_next_step": 374, "_beta1": 374, "_beta2": 374, "_epsilon": 374, "_mw": 374, "_vw": 374, "_first_pass": 374, "_should_compil": 374, "_step": 374, "new_v": 374, "_lr": 374, "isinst": [374, 375, 579, 637], "_inplac": 374, "_stop_gradi": 374, "set_stat": 374, "pre": [375, 387, 461], "captur": 375, "one_hot": [375, 579, 761], "sparse_funct": 375, "num_class": 375, "ey": [375, 409], "cumprod": [375, 579], "ones_lik": [375, 409, 761], "num_dim": 375, "new_axi": 375, "_linear": 375, "to_backend": 375, "jax_graph": 375, "learnabl": 375, "to_ivy_modul": 375, "thinli": 375, "whilst": 375, "to_haiku_modul": 375, "hk": 375, "loss_fn_t": 375, "transform": [375, 386], "without_apply_rng": 375, "rng": 375, "prngkei": 375, "init": 375, "update_rul": 375, "01": [375, 511, 567], "tree_multimap": 375, "mechan": [385, 387, 761], "vision": [385, 761], "robot": [385, 761], "focus": 386, "field": 386, "perfect": 386, "3d": 386, "differenti": 386, "demo": [386, 761], "orient": 386, "pose": 386, "euler": [386, 408], "quaternion": 386, "rotat": 386, "matric": [386, 409, 420, 424, 425], "angl": [386, 511, 521, 533, 572, 577], "ivy_mech": 386, "target_facing_rotation_matrix": 386, "polar_to_cartesian_coord": 386, "ordin": 386, "warp": 386, "optic": 386, "voxel": 386, "ivy_vis": 386, "coords_to_voxel_grid": 386, "render_pixel_coord": 386, "neural": [386, 761], "radianc": 386, "nerf": 386, "trajectori": 386, "motion": 386, "plan": [386, 761], "mobil": 386, "ivy_robot": 386, "sample_spline_path": 386, "rigidmobil": 386, "sample_bodi": 386, "drone": 386, "sample_link": 386, "openai": 386, "swimmer": 386, "cumul": [386, 579, 591, 592], "reward": 386, "supervis": 386, "reinforc": 386, "door": [386, 387], "intersect": 386, "cartpol": 386, "mountain_car": 386, "pendulum": 386, "reacher": 386, "polici": 386, "condit": [386, 406, 407], "learnt": 386, "ture": 386, "ntm": 386, "egospher": 386, "spatial": 386, "esm": 386, "ivy_memori": 386, "egocentr": 386, "room": 386, "inspir": 386, "doubt": 387, "grate": 387, "put": 387, "probe": 387, "undergo": 387, "remark": 387, "surpris": 387, "backward": [387, 511, 566], "lock": 387, "contunu": 387, "minor": 387, "xla": 387, "buffer": 387, "kind": [387, 428, 444, 447, 511, 565], "gold": 387, "dex": 387, "phase": 387, "lax": 387, "scan": 387, "tricki": 387, "predictor": 387, "tight": 387, "driver": 387, "schedul": 387, "algorithm": 387, "dispatch": 387, "Will": 387, "ast": 387, "dynamic": 387, "cond": 387, "jacobian": 387, "checkpoint": 387, "autodiff": 387, "shine": 387, "merci": 387, "superset": 387, "cluster": 387, "compet": 387, "paradigm": 387, "parallelis": [387, 461, 470, 471], "spmd": 387, "mixtur": 387, "expert": 387, "sophist": 387, "depart": 387, "routin": 387, "hundr": 387, "thousand": 387, "deepli": 387, "broadli": 387, "heavili": 387, "supplementari": 387, "Is": 387, "reusabl": 387, "fanci": 387, "fusion": 387, "lose": 387, "vmap": 387, "pmap": 387, "overhead": 387, "ineffici": 387, "eventu": 387, "supplement": 387, "backdoor": 387, "callback": 387, "record": 387, "metric": 387, "somewhat": 387, "outsourc": 387, "inputs_to_ivy_arrai": 388, "gelu": 398, "gaussian": [398, 399], "leaki": [398, 399, 400], "leaky_relu": [398, 761], "alpha": [398, 400], "rectifi": [398, 400, 401], "slope": [398, 400], "39": [398, 400, 511, 539], "85": [398, 400, 511, 528, 530], "48": [398, 400, 511, 573], "88": [398, 400, 511, 528, 530], "269": [398, 402], "731": [398, 402], "881": [398, 402], "214": [398, 402], "978": [398, 402], "891": [398, 402], "422": [398, 403], "155": [398, 403], "0768": [398, 403], "231": [398, 403], "693": [398, 403], "49": [398, 403, 511, 573], "147": [398, 403], "363": [398, 403], "softplu": [398, 761], "3461": [398, 404], "6491": [398, 404], "535": [398, 404], "hyperbol": [398, 405, 511, 514, 519, 522, 533, 572, 577], "55": [398, 405], "501": [398, 405], "faster": [406, 407], "invoc": [406, 407], "718281828459045": 408, "newaxi": 408, "alia": 408, "pi": 408, "141592653589793": 408, "mathemat": [408, 511, 515, 521, 540, 561], "half": [409, 410], "chosen": [409, 410, 511, 521], "distanc": [409, 410], "adjac": [409, 410], "interpret": [409, 411, 421], "uniniti": [409, 412, 413], "empty_lik": 409, "n_row": [409, 414], "n_col": [409, 414], "elsewher": [409, 414], "row": [409, 414], "column": [409, 414], "from_dlpack": 409, "__dlpack__": [409, 415, 461, 506], "interchang": [409, 415], "full_lik": 409, "endpoint": [409, 418], "meshgrid": 409, "xy": [409, 420], "coordin": [409, 420, 511, 521], "cartesian": [409, 420], "ij": [409, 420], "rank": [409, 420, 579, 641], "ni": [409, 420], "xi": [409, 420], "n1": [409, 420], "n2": [409, 420], "n3": [409, 420], "accordingli": [409, 420, 511, 540], "xv": [409, 420], "yv": [409, 420], "tril": 409, "triangular": [409, 424, 425], "innermost": [409, 424, 425], "mxn": [409, 424, 425], "triu": 409, "zeros_lik": [409, 761], "defaultdtyp": [428, 429], "defaultfloatdtyp": [428, 430], "float_dtyp": [428, 440, 454], "defaultintdtyp": [428, 431], "as_ivy_dtyp": 428, "dtype_in": [428, 432, 433, 443, 448, 449, 450, 460], "as_native_dtyp": 428, "broadcast_arrai": 428, "incompat": [428, 436], "occur": [428, 437], "data_type_funct": [428, 437], "closest_valid_dtyp": 428, "closest": [428, 438, 511, 531, 541, 542, 567, 578], "floatdtyp": [428, 440], "int_dtyp": [428, 441, 455], "intdtyp": [428, 441], "dtype_bit": 428, "finfo": 428, "followng": [428, 444], "occupi": [428, 444, 447, 579, 625, 626], "ep": [428, 444], "smallest_norm": [428, 444], "precis": [428, 444, 511, 561, 573], "function_supported_dtyp": 428, "function_unsupported_dtyp": 428, "iinfo": 428, "encapsul": [428, 447], "invalid_dtyp": 428, "is_float_dtyp": 428, "is_int_dtyp": [428, 579, 639], "promote_typ": 428, "type1": [428, 451], "type2": [428, 451], "arrays_and_dtyp": [428, 452], "type_promote_arrai": 428, "ret1": [428, 456], "ret2": [428, 456], "unset_default_dtyp": 428, "unset_default_float_dtyp": 428, "unset_default_int_dtyp": 428, "valid_dtyp": 428, "noinspect": [429, 430, 431, 462], "pyshadowingnam": [429, 430, 431, 462], "defaultdevic": [461, 462], "__enter__": 461, "_dev": 461, "initialis": 461, "devcloneditem": [461, 483], "multidevitem": [461, 463, 466], "devclonedit": 461, "multidevit": [461, 464, 467, 470, 471, 475], "devclonednest": 461, "multidevnest": [461, 465, 468], "devdistitem": 461, "devdistit": 461, "devdistnest": 461, "devmanag": [461, 469], "dev_mapp": 461, "da_dim_s": 461, "safety_factor": 461, "min_dev_dim_s": 461, "max_dev_dim_step_ratio": 461, "min_unit_dev_tune_step": 461, "min_sf_tune_step": 461, "starting_split_factor": 461, "max_split_factor_step_s": 461, "tune_dev_alloc": 461, "tune_dev_split": 461, "mapper": [461, 470, 471], "receivess": 461, "ratio": 461, "safe": [461, 470], "oom": 461, "tune": 461, "da_tune_step": 461, "ds_tune_step": 461, "to_clon": 461, "to_distribut": 461, "multidevic": [461, 470], "parallel": [461, 470, 471], "mutlidevic": [461, 470], "repeated_config_check": 461, "tune_step": 461, "devmapp": [461, 471], "ret_fn": [461, 470, 471], "queue_class": [461, 470, 471], "worker_class": [461, 470, 471], "worker": [461, 470, 471], "used_dev": [461, 470], "split_factor": [461, 470], "sf": [461, 470], "devmappermultiproc": 461, "multidev": [461, 472, 473, 474, 493], "profil": 461, "save_dir": [461, 476], "as_native_dev": 461, "clear_mem_on_dev": 461, "deviceic": [461, 482], "dev_clone_arrai": 461, "dev_clone_it": 461, "dev_clone_nest": 461, "dev_dist_arrai": 461, "dev_dist_it": 461, "dev_dist_nest": 461, "dev_unifi": 461, "dev_unify_arrai": 461, "dev_unify_it": 461, "dev_unify_nest": 461, "spread": [461, 493], "139740789224448": [461, 495], "gpu_is_avail": 461, "physic": [461, 497], "num_ivy_arrays_on_dev": 461, "x3": [461, 499], "x4": [461, 499], "percent_used_mem_on_dev": 461, "process_specif": [461, 500, 510], "percentag": [461, 500], "ram": [461, 500, 507, 510], "alon": [461, 500, 510], "print_all_ivy_arrays_on_dev": 461, "attr_onli": [461, 501], "set_split_factor": 461, "chunk": [461, 503, 504, 505], "split_func_cal": 461, "max_chunk_s": [461, 505], "chunk_siz": [461, 505], "input_ax": [461, 505], "output_ax": [461, 505], "feed": [461, 505], "fist": [461, 505], "stream": [461, 506], "caveat": [461, 506], "portabl": [461, 506, 761], "gb": [461, 507, 510], "tpu_is_avail": 461, "unset_default_devic": 461, "reset": [461, 509], "used_mem_on_dev": 461, "magnitud": [511, 512, 515, 561], "princip": [511, 513, 516, 518, 520], "cosin": [511, 513, 514, 532, 533], "x1_i": [511, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 543, 544, 548, 549, 554, 555, 557, 558, 561, 563, 565, 566, 575], "x2_i": [511, 515, 521, 523, 525, 526, 527, 528, 530, 534, 535, 542, 543, 544, 548, 549, 554, 555, 557, 558, 561, 563, 565, 566, 575], "finit": [511, 515, 521, 545, 561, 565, 566], "nonzero": [511, 515, 561], "nor": [511, 515, 561], "nearest": [511, 515, 561, 567], "2019": [511, 515, 540, 561], "commut": [511, 515], "sine": [511, 516, 518, 519, 569, 571, 572], "57": [511, 516, 518, 528, 530, 533], "524": [511, 516, 518], "644": [511, 516, 518], "201": [511, 516, 518, 567], "305": [511, 516, 518], "412": [511, 516, 518], "quotient": [511, 521], "notat": [511, 521], "denot": [511, 521], "pair": [511, 521], "quadrant": [511, 521], "3\u03c0": [511, 521], "549": [511, 522], "bitwis": [511, 523, 526, 528, 530, 558], "AND": [511, 523, 555], "binari": [511, 523, 526, 528, 530, 558], "invert": [511, 524], "arithmet": [511, 527], "propag": [511, 527], "thu": [511, 527, 565, 566], "lh": [511, 527], "rh": [511, 527], "xor": [511, 528, 530, 558], "78": [511, 528, 530], "91": [511, 528, 530], "23": [511, 528, 530], "66": [511, 528, 530], "77": [511, 528, 530], "79": [511, 528, 530], "89": [511, 528, 530], "98": [511, 528, 530], "26": [511, 528, 530], "21": [511, 528, 530, 579, 591], "34": [511, 528, 530, 573], "24": [511, 528, 530, 573, 579, 591], "51": [511, 528, 530], "27": [511, 528, 530, 533, 573], "74": [511, 528, 530], "59": [511, 528, 530], "416": [511, 532], "122": [511, 533], "368": [511, 533], "670": [511, 533], "202": [511, 533, 567], "548": [511, 533], "1490": [511, 533], "dividend": [511, 534, 566], "divisor": [511, 534, 566], "gauss": [511, 536, 538], "exponenti": [511, 536, 538, 539, 554, 565], "logarithm": [511, 539, 550, 551, 552, 553, 554], "72": [511, 539], "accur": [511, 540], "fdlibm": [511, 540], "compliant": [511, 540, 556, 557], "greatest": [511, 541, 542], "out_i": [511, 545, 546, 547], "threshold": [511, 559, 560], "exce": [511, 560], "y_i": [511, 562], "expon": [511, 565, 579, 634], "versu": [511, 565], "odd": [511, 565], "modulu": [511, 566], "primarili": [511, 566], "5654": [511, 567], "034": [511, 567], "433": [511, 567], "343": [511, 567], "44": [511, 567, 573, 574], "30": [511, 567], "81": [511, 567, 574], "527": [511, 567], "301": [511, 567], "indistinguish": [511, 573], "infinit": [511, 573], "83": [511, 573], "32455532": [511, 573], "89897949": [511, 573], "50": [511, 573], "31": [511, 573], "169": [511, 573], "47": [511, 573], "73": [511, 573], "93": [511, 573], "35": [511, 573], "09": [511, 574], "61": [511, 574], "546": [511, 576], "842": [511, 576], "916": [511, 576], "996": [511, 576], "328": [511, 576], "real": [511, 577], "462": [511, 577], "604": [511, 577], "984": [511, 577], "997": [511, 577], "decim": [511, 578], "arg_info": 579, "inspect": [579, 581], "arg_nam": 579, "array_equ": 579, "assert_supports_inplac": 579, "clip_matrix_norm": 579, "downscal": [579, 587, 588], "container_typ": 579, "copy_arrai": 579, "60": [579, 591], "cumsum": [579, 761], "current_backend_str": 579, "default_v": [579, 594], "catch_except": [579, 594], "rev": [579, 594], "with_cal": [579, 594], "arrang": [579, 595], "123": [579, 598], "floormod": [579, 761], "mod": [579, 599], "fourier_encod": 579, "max_freq": [579, 600], "num_band": [579, 600], "pad": [579, 600], "fourier": [579, 600], "band": [579, 600], "linearli": [579, 600], "oppos": [579, 600], "geometr": [579, 600], "get_all_arrays_in_memori": 579, "get_min_bas": 579, "get_min_denomin": 579, "get_num_dim": [579, 761], "get_referrers_recurs": 579, "seen_set": [579, 607], "local_set": [579, 607], "indices_wher": [579, 761], "inplace_arrays_support": 579, "inplace_decr": 579, "decrement": [579, 611], "inplace_incr": 579, "inplace_variables_support": 579, "is_arrai": 579, "is_ivy_contain": 579, "match_kwarg": 579, "allow_dupl": [579, 619], "forkserv": [579, 620], "spawn": [579, 620], "num_arrays_in_memori": 579, "hot": [579, 622], "scatter": [579, 622, 625, 626], "overrid": [579, 622], "print_all_arrays_in_memori": 579, "scatter_flat": 579, "set_min_bas": 579, "set_min_denomin": 579, "set_queue_timeout": 579, "set_tmp_dir": 579, "tmp_dr": [579, 630], "temporari": [579, 630], "min_denomin": [579, 633], "stabil": [579, 633, 634], "_min_denomin": [579, 633], "stable_pow": 579, "min_bas": [579, 634], "_min_bas": [579, 634], "supports_inplac": 579, "tmp_dir": 579, "100000023841858": [579, 637], "200000047683716": [579, 637], "299999952316284": [579, 637], "400000095367432": [579, 637], "599999904632568": [579, 637], "101": [579, 638], "to_scalar": 579, "try_else_non": 579, "unpack": [579, 641], "value_is_nan": 579, "autom": 761, "grow": 761, "ai": 761, "got": 761, "colab": 761, "sharp": 761, "weekli": 761, "event": 761, "immedi": 761, "favorit": 761, "jax_concat": 761, "tf_concat": 761, "np_concat": 761, "mx_concat": 761, "torch_concat": 761, "prompt": 761, "get_devic": 761, "reduce_prod": 761, "gradient_imag": 761, "argmax": 761, "argmin": 761, "linalg": 761, "bilinear_resampl": 761, "stack_imag": 761, "conv2d": 761, "neural_net": 761, "depthwise_conv2d": 761, "ecosystem": [761, 767], "popular": [761, 767], "acceler": 761, "articl": 761, "lenton2021ivi": 761, "inter": 761, "lenton": 761, "daniel": 761, "pardo": 761, "fabio": 761, "falck": 761, "fabian": 761, "jame": 761, "stephen": 761, "clark": 761, "ronald": 761, "journal": 761, "arxiv": 761, "preprint": 761, "2102": 761, "02886": 761, "2021": 761, "kaimingnorm": 777}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [117, 0, 0, "-", "conversions"], [122, 0, 0, "-", "creation"], [124, 0, 0, "-", "data_type"], [126, 0, 0, "-", "device"], [128, 0, 0, "-", "elementwise"], [130, 0, 0, "-", "general"], [132, 0, 0, "-", "gradients"], [134, 0, 0, "-", "image"], [136, 0, 0, "-", "layers"], [138, 0, 0, "-", "linear_algebra"], [140, 0, 0, "-", "losses"], [142, 0, 0, "-", "manipulation"], [144, 0, 0, "-", "norms"], [146, 0, 0, "-", "random"], [148, 0, 0, "-", "searching"], [150, 0, 0, "-", "set"], [152, 0, 0, "-", "sorting"], [154, 0, 0, "-", "statistical"], [156, 0, 0, "-", "utility"], [158, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.conversions": [[118, 2, 1, "", "args_to_ivy"], [119, 2, 1, "", "args_to_native"], [120, 2, 1, "", "to_ivy"], [121, 2, 1, "", "to_native"]], "ivy.array.creation": [[123, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[125, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[125, 3, 1, "", "can_cast"]], "ivy.array.device": [[127, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[129, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[129, 3, 1, "", "abs"], [129, 3, 1, "", "acos"], [129, 3, 1, "", "acosh"], [129, 3, 1, "", "add"], [129, 3, 1, "", "asin"], [129, 3, 1, "", "asinh"], [129, 3, 1, "", "atan"], [129, 3, 1, "", "atan2"], [129, 3, 1, "", "atanh"], [129, 3, 1, "", "bitwise_and"], [129, 3, 1, "", "bitwise_invert"], [129, 3, 1, "", "bitwise_left_shift"], [129, 3, 1, "", "bitwise_or"], [129, 3, 1, "", "bitwise_right_shift"], [129, 3, 1, "", "bitwise_xor"], [129, 3, 1, "", "ceil"], [129, 3, 1, "", "cos"], [129, 3, 1, "", "cosh"], [129, 3, 1, "", "divide"], [129, 3, 1, "", "equal"], [129, 3, 1, "", "erf"], [129, 3, 1, "", "exp"], [129, 3, 1, "", "expm1"], [129, 3, 1, "", "floor"], [129, 3, 1, "", "floor_divide"], [129, 3, 1, "", "greater"], [129, 3, 1, "", "greater_equal"], [129, 3, 1, "", "isfinite"], [129, 3, 1, "", "isinf"], [129, 3, 1, "", "isnan"], [129, 3, 1, "", "less"], [129, 3, 1, "", "less_equal"], [129, 3, 1, "", "log"], [129, 3, 1, "", "log10"], [129, 3, 1, "", "log1p"], [129, 3, 1, "", "log2"], [129, 3, 1, "", "logaddexp"], [129, 3, 1, "", "logical_and"], [129, 3, 1, "", "logical_not"], [129, 3, 1, "", "logical_or"], [129, 3, 1, "", "logical_xor"], [129, 3, 1, "", "multiply"], [129, 3, 1, "", "negative"], [129, 3, 1, "", "not_equal"], [129, 3, 1, "", "positive"], [129, 3, 1, "", "pow"], [129, 3, 1, "", "remainder"], [129, 3, 1, "", "round"], [129, 3, 1, "", "sign"], [129, 3, 1, "", "sin"], [129, 3, 1, "", "sinh"], [129, 3, 1, "", "sqrt"], [129, 3, 1, "", "square"], [129, 3, 1, "", "subtract"], [129, 3, 1, "", "tan"], [129, 3, 1, "", "tanh"], [129, 3, 1, "", "trunc"]], "ivy.array.general": [[131, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[131, 3, 1, "", "all_equal"], [131, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[133, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[133, 3, 1, "", "adam_step"]], "ivy.array.image": [[135, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[137, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[139, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[139, 3, 1, "", "cholesky"], [139, 3, 1, "", "cross"], [139, 3, 1, "", "det"], [139, 3, 1, "", "diagonal"], [139, 3, 1, "", "eigh"], [139, 3, 1, "", "eigvalsh"], [139, 3, 1, "", "inv"], [139, 3, 1, "", "matmul"], [139, 3, 1, "", "matrix_norm"], [139, 3, 1, "", "matrix_rank"], [139, 3, 1, "", "matrix_transpose"], [139, 3, 1, "", "outer"], [139, 3, 1, "", "pinv"], [139, 3, 1, "", "qr"], [139, 3, 1, "", "solve"], [139, 3, 1, "", "svd"], [139, 3, 1, "", "svdvals"], [139, 3, 1, "", "tensordot"], [139, 3, 1, "", "trace"], [139, 3, 1, "", "vecdot"], [139, 3, 1, "", "vector_norm"], [139, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[141, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[141, 3, 1, "", "binary_cross_entropy"], [141, 3, 1, "", "cross_entropy"], [141, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[143, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[143, 3, 1, "", "clip"], [143, 3, 1, "", "concat"], [143, 3, 1, "", "constant_pad"], [143, 3, 1, "", "expand_dims"], [143, 3, 1, "", "flip"], [143, 3, 1, "", "permute_dims"], [143, 3, 1, "", "repeat"], [143, 3, 1, "", "reshape"], [143, 3, 1, "", "roll"], [143, 3, 1, "", "squeeze"], [143, 3, 1, "", "stack"], [143, 3, 1, "", "swapaxes"], [143, 3, 1, "", "tile"], [143, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[145, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[145, 3, 1, "", "layer_norm"]], "ivy.array.random": [[147, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[149, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[151, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[153, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[153, 3, 1, "", "argsort"], [153, 3, 1, "", "sort"]], "ivy.array.statistical": [[155, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[155, 3, 1, "", "einsum"], [155, 3, 1, "", "max"], [155, 3, 1, "", "mean"], [155, 3, 1, "", "min"], [155, 3, 1, "", "prod"], [155, 3, 1, "", "std"], [155, 3, 1, "", "sum"], [155, 3, 1, "", "var"]], "ivy.array.utility": [[157, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[157, 3, 1, "", "all"], [157, 3, 1, "", "any"]], "ivy.array.wrapping": [[159, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[160, 0, 0, "-", "backend_handler"], [388, 0, 0, "-", "func_wrapper"], [807, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[160, 1, 1, "", "ContextManager"], [162, 2, 1, "", "choose_random_backend"], [163, 2, 1, "", "clear_backend_stack"], [164, 2, 1, "", "current_backend"], [165, 2, 1, "", "get_backend"], [166, 2, 1, "", "set_backend"], [167, 2, 1, "", "try_import_ivy_jax"], [168, 2, 1, "", "try_import_ivy_mxnet"], [169, 2, 1, "", "try_import_ivy_numpy"], [170, 2, 1, "", "try_import_ivy_tf"], [171, 2, 1, "", "try_import_ivy_torch"], [172, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[160, 3, 1, "", "__init__"]], "ivy.container": [[177, 0, 0, "-", "activations"], [179, 0, 0, "-", "base"], [181, 0, 0, "-", "container"], [311, 0, 0, "-", "creation"], [313, 0, 0, "-", "data_type"], [315, 0, 0, "-", "device"], [317, 0, 0, "-", "elementwise"], [319, 0, 0, "-", "general"], [321, 0, 0, "-", "gradients"], [323, 0, 0, "-", "image"], [325, 0, 0, "-", "layers"], [327, 0, 0, "-", "linear_algebra"], [329, 0, 0, "-", "losses"], [331, 0, 0, "-", "manipulation"], [333, 0, 0, "-", "norms"], [335, 0, 0, "-", "random"], [337, 0, 0, "-", "searching"], [339, 0, 0, "-", "set"], [341, 0, 0, "-", "sorting"], [343, 0, 0, "-", "statistical"], [345, 0, 0, "-", "utility"], [347, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[178, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[180, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[180, 3, 1, "", "__getitem__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__setitem__"], [180, 3, 1, "", "all_false"], [180, 3, 1, "", "all_key_chains"], [180, 3, 1, "", "all_true"], [180, 3, 1, "", "arrays_as_lists"], [180, 3, 1, "", "as_arrays"], [180, 3, 1, "", "as_bools"], [180, 3, 1, "", "as_ones"], [180, 3, 1, "", "as_random_uniform"], [180, 3, 1, "", "as_variables"], [180, 3, 1, "", "as_zeros"], [180, 3, 1, "", "assert_contains_sub_container"], [180, 3, 1, "", "assert_contains_sub_structure"], [180, 3, 1, "", "assert_identical"], [180, 3, 1, "", "assert_identical_structure"], [180, 3, 1, "", "at_key_chain"], [180, 3, 1, "", "at_key_chains"], [180, 3, 1, "", "at_keys"], [180, 3, 1, "", "clip"], [180, 3, 1, "", "combine"], [180, 3, 1, "", "common_key_chains"], [180, 4, 1, "", "config"], [180, 3, 1, "", "contains_sub_container"], [180, 3, 1, "", "contains_sub_structure"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "create_if_absent"], [180, 3, 1, "", "cutoff_at_depth"], [180, 3, 1, "", "cutoff_at_height"], [180, 3, 1, "", "deep_copy"], [180, 4, 1, "", "dev"], [180, 3, 1, "", "dev_clone"], [180, 3, 1, "", "dev_dist"], [180, 4, 1, "", "dev_str"], [180, 3, 1, "", "diff"], [180, 3, 1, "", "dtype"], [180, 3, 1, "", "einops_rearrange"], [180, 3, 1, "", "einops_reduce"], [180, 3, 1, "", "einops_repeat"], [180, 3, 1, "", "find_sub_container"], [180, 3, 1, "", "find_sub_structure"], [180, 3, 1, "", "flatten_key_chain"], [180, 3, 1, "", "flatten_key_chains"], [180, 3, 1, "", "format_key_chains"], [180, 3, 1, "", "from_disk_as_hdf5"], [180, 3, 1, "", "from_disk_as_json"], [180, 3, 1, "", "from_disk_as_pickled"], [180, 3, 1, "", "from_flat_list"], [180, 3, 1, "", "from_numpy"], [180, 3, 1, "", "gather"], [180, 3, 1, "", "gather_nd"], [180, 3, 1, "", "h5_file_size"], [180, 3, 1, "", "handle_inplace"], [180, 3, 1, "", "has_key"], [180, 3, 1, "", "has_key_chain"], [180, 3, 1, "", "has_nans"], [180, 3, 1, "", "identical"], [180, 3, 1, "", "identical_array_shapes"], [180, 3, 1, "", "identical_configs"], [180, 3, 1, "", "identical_structure"], [180, 3, 1, "", "if_exists"], [180, 3, 1, "", "inplace_update"], [180, 4, 1, "", "ivy"], [180, 3, 1, "", "key_chains_containing"], [180, 3, 1, "", "list_join"], [180, 3, 1, "", "list_stack"], [180, 3, 1, "", "map"], [180, 3, 1, "", "map_conts"], [180, 3, 1, "", "matrix_norm"], [180, 4, 1, "", "max_depth"], [180, 3, 1, "", "maximum"], [180, 3, 1, "", "minimum"], [180, 3, 1, "", "multi_map"], [180, 3, 1, "", "multi_map_in_static_method"], [180, 3, 1, "", "num_arrays"], [180, 3, 1, "", "overwrite_at_key_chain"], [180, 3, 1, "", "overwrite_at_key_chains"], [180, 3, 1, "", "prune_empty"], [180, 3, 1, "", "prune_key_chain"], [180, 3, 1, "", "prune_key_chains"], [180, 3, 1, "", "prune_key_from_key_chains"], [180, 3, 1, "", "prune_keys"], [180, 3, 1, "", "prune_keys_from_key_chains"], [180, 3, 1, "", "reduce"], [180, 3, 1, "", "remove_key_length_limit"], [180, 3, 1, "", "remove_print_limit"], [180, 3, 1, "", "reshape_like"], [180, 3, 1, "", "restructure"], [180, 3, 1, "", "restructure_key_chains"], [180, 3, 1, "", "set_at_key_chain"], [180, 3, 1, "", "set_at_key_chains"], [180, 3, 1, "", "set_at_keys"], [180, 3, 1, "", "set_framework"], [180, 3, 1, "", "set_ivy_backend"], [180, 4, 1, "", "shape"], [180, 4, 1, "", "shapes"], [180, 3, 1, "", "show"], [180, 3, 1, "", "show_sub_container"], [180, 3, 1, "", "shuffle"], [180, 3, 1, "", "shuffle_h5_file"], [180, 3, 1, "", "size_ordered_arrays"], [180, 3, 1, "", "slice_keys"], [180, 3, 1, "", "slice_via_key"], [180, 3, 1, "", "sort_by_key"], [180, 3, 1, "", "split"], [180, 3, 1, "", "stop_gradients"], [180, 3, 1, "", "structural_diff"], [180, 3, 1, "", "to_device"], [180, 3, 1, "", "to_dict"], [180, 3, 1, "", "to_disk_as_hdf5"], [180, 3, 1, "", "to_disk_as_json"], [180, 3, 1, "", "to_disk_as_pickled"], [180, 3, 1, "", "to_flat_list"], [180, 3, 1, "", "to_iterator"], [180, 3, 1, "", "to_iterator_keys"], [180, 3, 1, "", "to_iterator_values"], [180, 3, 1, "", "to_ivy"], [180, 3, 1, "", "to_jsonable"], [180, 3, 1, "", "to_list"], [180, 3, 1, "", "to_multi_dev"], [180, 3, 1, "", "to_native"], [180, 3, 1, "", "to_numpy"], [180, 3, 1, "", "to_raw"], [180, 3, 1, "", "trim_key"], [180, 3, 1, "", "try_kc"], [180, 3, 1, "", "unify"], [180, 3, 1, "", "unstack"], [180, 3, 1, "", "update_config"], [180, 3, 1, "", "vector_norm"], [180, 3, 1, "", "with_default_key_color"], [180, 3, 1, "", "with_entries_as_lists"], [180, 3, 1, "", "with_ivy_backend"], [180, 3, 1, "", "with_key_length_limit"], [180, 3, 1, "", "with_print_indent"], [180, 3, 1, "", "with_print_limit"], [180, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[182, 1, 1, "", "Container"], [183, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[182, 3, 1, "", "__add__"], [182, 3, 1, "", "__init__"], [182, 3, 1, "", "__radd__"]], "ivy.container.container.MultiDevContainer": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "at_dev"], [183, 3, 1, "", "at_devs"]], "ivy.container.creation": [[312, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[314, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[314, 3, 1, "", "can_cast"], [314, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[316, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[318, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[318, 3, 1, "", "abs"], [318, 3, 1, "", "acos"], [318, 3, 1, "", "acosh"], [318, 3, 1, "", "add"], [318, 3, 1, "", "asin"], [318, 3, 1, "", "asinh"], [318, 3, 1, "", "atan"], [318, 3, 1, "", "atan2"], [318, 3, 1, "", "atanh"], [318, 3, 1, "", "bitwise_and"], [318, 3, 1, "", "bitwise_invert"], [318, 3, 1, "", "bitwise_left_shift"], [318, 3, 1, "", "bitwise_or"], [318, 3, 1, "", "bitwise_right_shift"], [318, 3, 1, "", "bitwise_xor"], [318, 3, 1, "", "ceil"], [318, 3, 1, "", "cos"], [318, 3, 1, "", "cosh"], [318, 3, 1, "", "divide"], [318, 3, 1, "", "equal"], [318, 3, 1, "", "erf"], [318, 3, 1, "", "exp"], [318, 3, 1, "", "expm1"], [318, 3, 1, "", "floor"], [318, 3, 1, "", "floor_divide"], [318, 3, 1, "", "greater"], [318, 3, 1, "", "greater_equal"], [318, 3, 1, "", "isfinite"], [318, 3, 1, "", "isinf"], [318, 3, 1, "", "isnan"], [318, 3, 1, "", "less"], [318, 3, 1, "", "less_equal"], [318, 3, 1, "", "log"], [318, 3, 1, "", "log10"], [318, 3, 1, "", "log1p"], [318, 3, 1, "", "log2"], [318, 3, 1, "", "logaddexp"], [318, 3, 1, "", "logical_and"], [318, 3, 1, "", "logical_not"], [318, 3, 1, "", "logical_or"], [318, 3, 1, "", "logical_xor"], [318, 3, 1, "", "multiply"], [318, 3, 1, "", "negative"], [318, 3, 1, "", "not_equal"], [318, 3, 1, "", "positive"], [318, 3, 1, "", "pow"], [318, 3, 1, "", "remainder"], [318, 3, 1, "", "round"], [318, 3, 1, "", "sign"], [318, 3, 1, "", "sin"], [318, 3, 1, "", "sinh"], [318, 3, 1, "", "sqrt"], [318, 3, 1, "", "square"], [318, 3, 1, "", "static_add"], [318, 3, 1, "", "static_divide"], [318, 3, 1, "", "static_multiply"], [318, 3, 1, "", "static_subtract"], [318, 3, 1, "", "static_tan"], [318, 3, 1, "", "static_tanh"], [318, 3, 1, "", "subtract"], [318, 3, 1, "", "tan"], [318, 3, 1, "", "tanh"], [318, 3, 1, "", "trunc"]], "ivy.container.general": [[320, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[320, 3, 1, "", "all_equal"], [320, 3, 1, "", "clip_vector_norm"], [320, 3, 1, "", "gather_nd"], [320, 3, 1, "", "static_all_equal"], [320, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[322, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[322, 3, 1, "", "adam_step"], [322, 3, 1, "", "adam_update"], [322, 3, 1, "", "gradient_descent_update"], [322, 3, 1, "", "lamb_update"], [322, 3, 1, "", "lars_update"], [322, 3, 1, "", "optimizer_update"], [322, 3, 1, "", "static_adam_step"], [322, 3, 1, "", "static_adam_update"], [322, 3, 1, "", "static_gradient_descent_update"], [322, 3, 1, "", "static_lamb_update"], [322, 3, 1, "", "static_lars_update"], [322, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[324, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[326, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[328, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[328, 3, 1, "", "matmul"]], "ivy.container.losses": [[330, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[330, 3, 1, "", "binary_cross_entropy"], [330, 3, 1, "", "cross_entropy"], [330, 3, 1, "", "sparse_cross_entropy"], [330, 3, 1, "", "static_binary_cross_entropy"], [330, 3, 1, "", "static_cross_entropy"], [330, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[332, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[332, 3, 1, "", "clip"], [332, 3, 1, "", "concat"], [332, 3, 1, "", "constant_pad"], [332, 3, 1, "", "expand_dims"], [332, 3, 1, "", "flip"], [332, 3, 1, "", "permute_dims"], [332, 3, 1, "", "repeat"], [332, 3, 1, "", "reshape"], [332, 3, 1, "", "roll"], [332, 3, 1, "", "squeeze"], [332, 3, 1, "", "stack"], [332, 3, 1, "", "static_clip"], [332, 3, 1, "", "static_roll"], [332, 3, 1, "", "swapaxes"], [332, 3, 1, "", "tile"], [332, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[334, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[334, 3, 1, "", "layer_norm"]], "ivy.container.random": [[336, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[336, 3, 1, "", "random_uniform"], [336, 3, 1, "", "static_randint"], [336, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[338, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[340, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[342, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[342, 3, 1, "", "argsort"], [342, 3, 1, "", "sort"], [342, 3, 1, "", "static_argsort"], [342, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[344, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[344, 3, 1, "", "einsum"], [344, 3, 1, "", "max"], [344, 3, 1, "", "mean"], [344, 3, 1, "", "min"], [344, 3, 1, "", "prod"], [344, 3, 1, "", "std"], [344, 3, 1, "", "sum"], [344, 3, 1, "", "var"]], "ivy.container.utility": [[346, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[346, 3, 1, "", "all"], [346, 3, 1, "", "any"]], "ivy.container.wrapping": [[348, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[389, 2, 1, "", "handle_nestable"], [390, 2, 1, "", "handle_out_argument"], [391, 2, 1, "", "infer_device"], [392, 2, 1, "", "infer_dtype"], [393, 2, 1, "", "inputs_to_ivy_arrays"], [394, 2, 1, "", "inputs_to_native_arrays"], [395, 2, 1, "", "outputs_to_ivy_arrays"], [396, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[398, 0, 0, "-", "activations"], [406, 0, 0, "-", "compilation"], [408, 0, 0, "-", "constants"], [409, 0, 0, "-", "creation"], [428, 0, 0, "-", "data_type"], [461, 0, 0, "-", "device"], [511, 0, 0, "-", "elementwise"], [579, 0, 0, "-", "general"]], "ivy.functional.ivy.activations": [[399, 2, 1, "", "gelu"], [400, 2, 1, "", "leaky_relu"], [401, 2, 1, "", "relu"], [402, 2, 1, "", "sigmoid"], [403, 2, 1, "", "softmax"], [404, 2, 1, "", "softplus"], [405, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[407, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[408, 5, 1, "", "e"], [408, 5, 1, "", "inf"], [408, 5, 1, "", "nan"], [408, 5, 1, "", "newaxis"], [408, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[410, 2, 1, "", "arange"], [409, 2, 1, "", "array"], [411, 2, 1, "", "asarray"], [412, 2, 1, "", "empty"], [413, 2, 1, "", "empty_like"], [414, 2, 1, "", "eye"], [415, 2, 1, "", "from_dlpack"], [416, 2, 1, "", "full"], [417, 2, 1, "", "full_like"], [418, 2, 1, "", "linspace"], [419, 2, 1, "", "logspace"], [420, 2, 1, "", "meshgrid"], [421, 2, 1, "", "native_array"], [422, 2, 1, "", "ones"], [423, 2, 1, "", "ones_like"], [424, 2, 1, "", "tril"], [425, 2, 1, "", "triu"], [426, 2, 1, "", "zeros"], [427, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[428, 1, 1, "", "DefaultDtype"], [428, 1, 1, "", "DefaultFloatDtype"], [428, 1, 1, "", "DefaultIntDtype"], [432, 2, 1, "", "as_ivy_dtype"], [433, 2, 1, "", "as_native_dtype"], [434, 2, 1, "", "astype"], [435, 2, 1, "", "broadcast_arrays"], [436, 2, 1, "", "broadcast_to"], [437, 2, 1, "", "can_cast"], [438, 2, 1, "", "closest_valid_dtype"], [439, 2, 1, "", "default_dtype"], [440, 2, 1, "", "default_float_dtype"], [441, 2, 1, "", "default_int_dtype"], [442, 2, 1, "", "dtype"], [443, 2, 1, "", "dtype_bits"], [444, 2, 1, "", "finfo"], [445, 2, 1, "", "function_supported_dtypes"], [446, 2, 1, "", "function_unsupported_dtypes"], [447, 2, 1, "", "iinfo"], [448, 2, 1, "", "invalid_dtype"], [449, 2, 1, "", "is_float_dtype"], [450, 2, 1, "", "is_int_dtype"], [451, 2, 1, "", "promote_types"], [452, 2, 1, "", "result_type"], [453, 2, 1, "", "set_default_dtype"], [454, 2, 1, "", "set_default_float_dtype"], [455, 2, 1, "", "set_default_int_dtype"], [456, 2, 1, "", "type_promote_arrays"], [457, 2, 1, "", "unset_default_dtype"], [458, 2, 1, "", "unset_default_float_dtype"], [459, 2, 1, "", "unset_default_int_dtype"], [460, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[461, 1, 1, "", "DefaultDevice"], [463, 1, 1, "", "DevClonedItem"], [464, 1, 1, "", "DevClonedIter"], [465, 1, 1, "", "DevClonedNest"], [466, 1, 1, "", "DevDistItem"], [467, 1, 1, "", "DevDistIter"], [468, 1, 1, "", "DevDistNest"], [461, 1, 1, "", "DevManager"], [470, 1, 1, "", "DevMapper"], [471, 1, 1, "", "DevMapperMultiProc"], [461, 1, 1, "", "MultiDev"], [473, 1, 1, "", "MultiDevItem"], [474, 1, 1, "", "MultiDevIter"], [475, 1, 1, "", "MultiDevNest"], [476, 1, 1, "", "Profiler"], [477, 2, 1, "", "as_ivy_dev"], [478, 2, 1, "", "as_native_dev"], [479, 2, 1, "", "clear_mem_on_dev"], [480, 2, 1, "", "default_device"], [481, 2, 1, "", "dev"], [482, 2, 1, "", "dev_clone"], [483, 2, 1, "", "dev_clone_array"], [484, 2, 1, "", "dev_clone_iter"], [485, 2, 1, "", "dev_clone_nest"], [486, 2, 1, "", "dev_dist"], [487, 2, 1, "", "dev_dist_array"], [488, 2, 1, "", "dev_dist_iter"], [489, 2, 1, "", "dev_dist_nest"], [490, 2, 1, "", "dev_unify"], [491, 2, 1, "", "dev_unify_array"], [492, 2, 1, "", "dev_unify_iter"], [493, 2, 1, "", "dev_unify_nest"], [494, 2, 1, "", "dev_util"], [495, 2, 1, "", "get_all_ivy_arrays_on_dev"], [496, 2, 1, "", "gpu_is_available"], [497, 2, 1, "", "num_cpu_cores"], [498, 2, 1, "", "num_gpus"], [499, 2, 1, "", "num_ivy_arrays_on_dev"], [500, 2, 1, "", "percent_used_mem_on_dev"], [501, 2, 1, "", "print_all_ivy_arrays_on_dev"], [502, 2, 1, "", "set_default_device"], [503, 2, 1, "", "set_split_factor"], [504, 2, 1, "", "split_factor"], [505, 2, 1, "", "split_func_call"], [506, 2, 1, "", "to_device"], [507, 2, 1, "", "total_mem_on_dev"], [508, 2, 1, "", "tpu_is_available"], [509, 2, 1, "", "unset_default_device"], [510, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[461, 3, 1, "", "__enter__"], [461, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[461, 3, 1, "", "__init__"], [461, 3, 1, "", "da_tune_step"], [461, 4, 1, "", "dim_size"], [461, 3, 1, "", "ds_tune_step"], [461, 3, 1, "", "map"], [461, 3, 1, "", "repeated_config_check"], [461, 4, 1, "", "tune_step"], [461, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[470, 3, 1, "", "__init__"], [470, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[471, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[461, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[473, 3, 1, "", "__init__"], [473, 3, 1, "", "items"], [473, 3, 1, "", "keys"], [473, 4, 1, "", "shape"], [473, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "at_dev"], [474, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[475, 3, 1, "", "__init__"], [475, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[476, 3, 1, "", "__init__"], [476, 3, 1, "", "start"], [476, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[512, 2, 1, "", "abs"], [513, 2, 1, "", "acos"], [514, 2, 1, "", "acosh"], [515, 2, 1, "", "add"], [518, 2, 1, "", "asin"], [519, 2, 1, "", "asinh"], [520, 2, 1, "", "atan"], [521, 2, 1, "", "atan2"], [522, 2, 1, "", "atanh"], [523, 2, 1, "", "bitwise_and"], [524, 2, 1, "", "bitwise_invert"], [525, 2, 1, "", "bitwise_left_shift"], [526, 2, 1, "", "bitwise_or"], [527, 2, 1, "", "bitwise_right_shift"], [530, 2, 1, "", "bitwise_xor"], [531, 2, 1, "", "ceil"], [532, 2, 1, "", "cos"], [533, 2, 1, "", "cosh"], [534, 2, 1, "", "divide"], [535, 2, 1, "", "equal"], [538, 2, 1, "", "erf"], [539, 2, 1, "", "exp"], [540, 2, 1, "", "expm1"], [541, 2, 1, "", "floor"], [542, 2, 1, "", "floor_divide"], [543, 2, 1, "", "greater"], [544, 2, 1, "", "greater_equal"], [545, 2, 1, "", "isfinite"], [546, 2, 1, "", "isinf"], [547, 2, 1, "", "isnan"], [548, 2, 1, "", "less"], [549, 2, 1, "", "less_equal"], [550, 2, 1, "", "log"], [551, 2, 1, "", "log10"], [552, 2, 1, "", "log1p"], [553, 2, 1, "", "log2"], [554, 2, 1, "", "logaddexp"], [555, 2, 1, "", "logical_and"], [556, 2, 1, "", "logical_not"], [557, 2, 1, "", "logical_or"], [558, 2, 1, "", "logical_xor"], [559, 2, 1, "", "maximum"], [560, 2, 1, "", "minimum"], [561, 2, 1, "", "multiply"], [562, 2, 1, "", "negative"], [563, 2, 1, "", "not_equal"], [564, 2, 1, "", "positive"], [565, 2, 1, "", "pow"], [566, 2, 1, "", "remainder"], [567, 2, 1, "", "round"], [568, 2, 1, "", "sign"], [571, 2, 1, "", "sin"], [572, 2, 1, "", "sinh"], [573, 2, 1, "", "sqrt"], [574, 2, 1, "", "square"], [575, 2, 1, "", "subtract"], [576, 2, 1, "", "tan"], [577, 2, 1, "", "tanh"], [578, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[580, 2, 1, "", "all_equal"], [581, 2, 1, "", "arg_info"], [582, 2, 1, "", "arg_names"], [583, 2, 1, "", "array_equal"], [584, 2, 1, "", "arrays_equal"], [585, 2, 1, "", "assert_supports_inplace"], [586, 2, 1, "", "cache_fn"], [587, 2, 1, "", "clip_matrix_norm"], [588, 2, 1, "", "clip_vector_norm"], [589, 2, 1, "", "container_types"], [590, 2, 1, "", "copy_array"], [591, 2, 1, "", "cumprod"], [592, 2, 1, "", "cumsum"], [593, 2, 1, "", "current_backend_str"], [594, 2, 1, "", "default"], [595, 2, 1, "", "einops_rearrange"], [596, 2, 1, "", "einops_reduce"], [597, 2, 1, "", "einops_repeat"], [598, 2, 1, "", "exists"], [599, 2, 1, "", "floormod"], [600, 2, 1, "", "fourier_encode"], [601, 2, 1, "", "gather"], [602, 2, 1, "", "gather_nd"], [603, 2, 1, "", "get_all_arrays_in_memory"], [604, 2, 1, "", "get_min_base"], [605, 2, 1, "", "get_min_denominator"], [606, 2, 1, "", "get_num_dims"], [607, 2, 1, "", "get_referrers_recursive"], [608, 2, 1, "", "has_nans"], [609, 2, 1, "", "indices_where"], [610, 2, 1, "", "inplace_arrays_supported"], [611, 2, 1, "", "inplace_decrement"], [612, 2, 1, "", "inplace_increment"], [613, 2, 1, "", "inplace_update"], [614, 2, 1, "", "inplace_variables_supported"], [615, 2, 1, "", "is_array"], [616, 2, 1, "", "is_ivy_array"], [617, 2, 1, "", "is_ivy_container"], [618, 2, 1, "", "is_native_array"], [619, 2, 1, "", "match_kwargs"], [620, 2, 1, "", "multiprocessing"], [621, 2, 1, "", "num_arrays_in_memory"], [622, 2, 1, "", "one_hot"], [623, 2, 1, "", "print_all_arrays_in_memory"], [624, 2, 1, "", "queue_timeout"], [625, 2, 1, "", "scatter_flat"], [626, 2, 1, "", "scatter_nd"], [627, 2, 1, "", "set_min_base"], [628, 2, 1, "", "set_min_denominator"], [629, 2, 1, "", "set_queue_timeout"], [630, 2, 1, "", "set_tmp_dir"], [631, 2, 1, "", "shape"], [632, 2, 1, "", "shape_to_tuple"], [633, 2, 1, "", "stable_divide"], [634, 2, 1, "", "stable_pow"], [635, 2, 1, "", "supports_inplace"], [636, 2, 1, "", "tmp_dir"], [637, 2, 1, "", "to_list"], [638, 2, 1, "", "to_numpy"], [639, 2, 1, "", "to_scalar"], [640, 2, 1, "", "try_else_none"], [641, 2, 1, "", "unstack"], [642, 2, 1, "", "value_is_nan"]], "ivy.verbosity": [[808, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 177, 398, 768], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 175, 358, 363, 368, 372], "method": [2, 184, 364, 372, 373], "ab": [3, 185, 512], "aco": [4, 186, 513], "acosh": [5, 187, 514], "adam_step": [6, 188], "add": [7, 190, 357, 515], "add_ivy_array_instance_method": [8, 159], "all": [9, 192, 757, 758, 759], "all_equ": [10, 193, 580], "ani": [11, 194, 760], "argsort": [12, 195, 745], "asin": [13, 196, 516, 517, 518], "asinh": [14, 197, 519], "atan": [15, 200, 520], "atan2": [16, 201, 521], "atanh": [17, 202, 522], "binary_cross_entropi": [18, 203, 682], "bitwise_and": [19, 204, 523], "bitwise_invert": [20, 205, 524], "bitwise_left_shift": [21, 206, 525], "bitwise_or": [22, 207, 526], "bitwise_right_shift": [23, 208, 527], "bitwise_xor": [24, 209, 528, 529, 530], "can_cast": [25, 210, 437], "ceil": [26, 211, 531], "choleski": [27, 657], "clip": [28, 212, 686, 687], "concat": [29, 214, 689], "constant_pad": [30, 215, 690], "co": [31, 216, 532], "cosh": [32, 217, 533], "cross": [33, 658], "cross_entropi": [34, 218, 683], "det": [35, 659], "diagon": [36, 660], "divid": [37, 219, 534], "eigh": [38, 661], "eigvalsh": [39, 662], "einsum": [40, 220, 748], "equal": [41, 221, 535], "erf": [42, 222, 536, 537, 538], "exp": [43, 223, 539], "expand_dim": [44, 224, 691], "expm1": [45, 225, 540], "flip": [46, 226, 692], "floor": [47, 227, 541], "floor_divid": [48, 228, 542], "gather_nd": [49, 229, 602], "greater": [50, 231, 543], "greater_equ": [51, 232, 544], "inv": [52, 663], "isfinit": [53, 233, 545], "isinf": [54, 234, 546], "isnan": [55, 235, 547], "layer_norm": [56, 238, 726], "less": [57, 239, 548], "less_equ": [58, 240, 549], "log": [59, 241, 550], "log10": [60, 242, 551], "log1p": [61, 243, 552], "log2": [62, 244, 553], "logaddexp": [63, 245, 554], "logical_and": [64, 246, 555], "logical_not": [65, 247, 556], "logical_or": [66, 248, 557], "logical_xor": [67, 249, 558], "matmul": [68, 250, 664], "matrix_norm": [69, 665], "matrix_rank": [70, 667], "matrix_transpos": [71, 668], "max": [72, 251, 749], "mean": [73, 252, 750], "min": [74, 253, 751], "multipli": [75, 254, 561], "neg": [76, 255, 562], "not_equ": [77, 256, 563], "outer": [78, 669], "permute_dim": [79, 258, 693], "pinv": [80, 670], "posit": [81, 259, 564], "pow": [82, 260, 565], "prod": [83, 261, 752], "qr": [84, 671], "remaind": [85, 263, 566], "repeat": [86, 264, 694], "reshap": [87, 265, 695], "roll": [88, 266, 357, 696], "round": [89, 267, 567], "sign": [90, 268, 568], "sin": [91, 269, 569, 570, 571], "sinh": [92, 270, 572], "solv": [93, 673], "sort": [94, 152, 271, 341, 744, 746], "sparse_cross_entropi": [95, 272, 684], "sqrt": [96, 273, 573], "squar": [97, 274, 574], "squeez": [98, 275, 698], "stack": [99, 276, 699], "std": [100, 301, 753], "subtract": [101, 302, 575], "sum": [102, 303, 754], "svd": [103, 674], "svdval": [104, 675], "swapax": [105, 304, 700], "tan": [106, 305, 357, 576], "tanh": [107, 306, 405, 577], "tensordot": [108, 676], "tile": [109, 307, 701], "trace": [110, 677], "trunc": [111, 308, 578], "var": [112, 309, 755], "vecdot": [113, 678], "vector_norm": [114, 679], "vector_to_skew_symmetric_matrix": [115, 680], "zero_pad": [116, 310, 702], "convers": 117, "args_to_ivi": 118, "args_to_n": 119, "to_ivi": 120, "to_n": 121, "creation": [122, 311, 409], "arraywithcr": 123, "data": [124, 313, 359, 365, 373, 387, 428], "type": [124, 313, 360, 365, 387, 428], "arraywithdatatyp": 125, "devic": [126, 315, 366, 368, 461], "arraywithdevic": 127, "elementwis": [128, 317, 511], "arraywithelementwis": 129, "gener": [130, 319, 359, 579], "arraywithgener": 131, "gradient": [132, 321], "arraywithgradi": 133, "imag": [134, 323], "arraywithimag": 135, "layer": [136, 325, 643, 782], "arraywithlay": 137, "linear": [138, 327, 652, 656, 792], "algebra": [138, 327, 656], "arraywithlinearalgebra": 139, "loss": [140, 329, 681], "arraywithloss": 141, "manipul": [142, 331, 685], "arraywithmanipul": 143, "norm": [144, 333, 725, 796], "arraywithnorm": 145, "random": [146, 335, 727], "arraywithrandom": 147, "search": [148, 337, 734], "arraywithsearch": 149, "set": [150, 339, 350, 361, 739], "arraywithset": 151, "arraywithsort": 153, "statist": [154, 343, 747], "arraywithstatist": 155, "util": [156, 345, 756], "arraywithutil": 157, "wrap": [158, 347, 362], "backend": [160, 355, 361, 370, 387], "handler": [160, 370], "choose_random_backend": 162, "clear_backend_stack": 163, "current_backend": 164, "get_backend": 165, "set_backend": 166, "try_import_ivy_jax": 167, "try_import_ivy_mxnet": 168, "try_import_ivy_numpi": 169, "try_import_ivy_tf": 170, "try_import_ivy_torch": 171, "unset_backend": 172, "background": [173, 761], "ml": 174, "explos": 174, "standard": 175, "skeptic": 175, "complimentari": 175, "vs": [175, 387], "competit": 175, "do": 175, "work": [175, 353], "The": [175, 351, 372, 387], "api": [175, 352, 355, 358, 364, 370, 372, 374, 375], "why": 176, "unifi": [176, 372], "No": [176, 350], "more": 176, "re": 176, "implement": 176, "infinit": 176, "shelf": 176, "life": 176, "containerwithactiv": 178, "base": 179, "containerbas": 180, "contain": [181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 364, 373, 517, 529, 537, 570, 688, 758], "multidevcontain": 183, "adam_upd": 189, "add_ivy_container_instance_method": [191, 348], "at_dev": [198, 199], "clip_vector_norm": [213, 588], "gradient_descent_upd": 230, "lamb_upd": 236, "lars_upd": 237, "optimizer_upd": 257, "random_uniform": [262, 731], "static_adam_step": 277, "static_adam_upd": 278, "static_add": 279, "static_all_equ": 280, "static_argsort": 281, "static_binary_cross_entropi": 282, "static_can_cast": 283, "static_clip": [284, 688], "static_cross_entropi": 285, "static_divid": 286, "static_gather_nd": 287, "static_gradient_descent_upd": 288, "static_lamb_upd": 289, "static_lars_upd": 290, "static_multipli": 291, "static_optimizer_upd": 292, "static_randint": 293, "static_random_uniform": 294, "static_rol": 295, "static_sort": 296, "static_sparse_cross_entropi": 297, "static_subtract": 298, "static_tan": 299, "static_tanh": 300, "containerwithcr": 312, "containerwithdatatyp": 314, "containerwithdevic": 316, "containerwithelementwis": 318, "containerwithgener": 320, "containerwithgradi": 322, "containerwithimag": 324, "containerwithlay": 326, "containerwithlinearalgebra": 328, "containerwithloss": 330, "containerwithmanipul": 332, "containerwithnorm": 334, "containerwithrandom": 336, "containerwithsearch": 338, "containerwithset": 340, "containerwithsort": 342, "containerwithstatist": 344, "containerwithutil": 346, "contribut": [349, 761], "up": 350, "clone": 350, "ivi": [350, 355, 357, 359, 363, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 517, 518, 529, 530, 537, 538, 570, 571, 687, 688, 758, 759], "pycharm": 350, "virtual": 350, "environ": 350, "docker": [350, 351, 353], "us": [350, 353, 373], "miniconda": [350, 353], "venv": [350, 353], "interpret": 350, "window": 350, "maco": 350, "ubuntu": 350, "github": 350, "codespac": 350, "pre": 350, "commit": [350, 351], "basic": 351, "get": 351, "help": 351, "todo": 351, "list": 351, "issu": 351, "manag": 351, "your": 351, "fork": 351, "who": 351, "To": 351, "ask": 351, "With": 351, "command": 351, "line": 351, "browser": 351, "pull": 351, "request": 351, "small": 351, "often": 351, "run": 351, "test": [351, 358, 359], "local": 351, "open": 352, "task": 352, "function": [352, 360, 362, 364, 365, 366, 368, 370, 375, 387], "format": 352, "frontend": [352, 375], "build": [353, 370], "doc": 353, "dockerless": 353, "document": 353, "pipelin": [353, 387], "make_doc": 353, "sh": 353, "entrypoint": 353, "_make_doc": 353, "generate_src_rst_fil": 353, "py": 353, "sphinx": 353, "correct_built_html_fil": 353, "remove_fil": 353, "deep": 354, "dive": 354, "navig": 355, "code": 355, "categor": 355, "submodul": 355, "design": [355, 369, 761], "docstr": [356, 357], "exampl": [357, 368], "hypothesi": 359, "self": 359, "consist": 359, "explicit": 359, "test_array_funct": 359, "primari": 360, "composit": 360, "mix": 360, "standalon": 360, "nestabl": [360, 364, 368], "conveni": 360, "nativ": 363, "handl": 363, "instanc": [364, 372], "static": 364, "special": 364, "modul": [365, 366, 374, 794, 795], "argument": [365, 366, 367, 368], "other": [365, 366], "inplac": 367, "updat": 367, "out": [367, 368], "copi": 367, "dtype": [368, 442], "number": 368, "oper": [368, 372, 387], "integ": 368, "sequenc": 368, "block": 370, "framework": [370, 371], "graph": [370, 375], "compil": [370, 375, 406, 407], "class": 372, "monkei": 372, "patch": 372, "construct": 373, "represent": 373, "recurs": 373, "built": 373, "ins": 373, "access": 373, "save": 373, "load": 373, "comparison": 373, "custom": [373, 387], "case": 373, "compartment": 373, "configur": 373, "network": [373, 375], "weight": 373, "state": [374, 387], "initi": [374, 773], "optim": [374, 798, 802], "transpil": 375, "role": 375, "convert": [375, 771], "model": [375, 382, 387], "builder": 377, "ecosystem": 378, "gym": [379, 386], "mech": 380, "memori": [381, 386], "robot": [383, 386], "vision": [384, 386], "extens": [385, 761], "appli": 386, "librari": 386, "mechan": 386, "faq": 387, "maintain": 387, "version": 387, "dynam": 387, "size": 387, "shape": [387, 631], "check": 387, "control": 387, "flow": 387, "auto": 387, "differenti": 387, "replica": 387, "parallel": 387, "support": 387, "altern": 387, "structur": 387, "func": 388, "wrapper": 388, "handle_nest": 389, "handle_out_argu": 390, "infer_devic": 391, "infer_dtyp": 392, "inputs_to_ivy_arrai": 393, "inputs_to_native_arrai": 394, "outputs_to_ivy_arrai": 395, "to_native_arrays_and_back": 396, "gelu": [399, 770], "leaky_relu": 400, "relu": 401, "sigmoid": 402, "softmax": 403, "softplu": 404, "constant": 408, "note": [409, 415], "arang": 410, "asarrai": 411, "empti": 412, "empty_lik": 413, "ey": 414, "from_dlpack": 415, "full": 416, "full_lik": 417, "linspac": 418, "logspac": 419, "meshgrid": 420, "native_arrai": 421, "ones": 422, "ones_lik": 423, "tril": 424, "triu": 425, "zero": [426, 781], "zeros_lik": 427, "as_ivy_dtyp": 432, "as_native_dtyp": 433, "astyp": 434, "broadcast_arrai": 435, "broadcast_to": 436, "closest_valid_dtyp": 438, "default_dtyp": 439, "default_float_dtyp": 440, "default_int_dtyp": 441, "dtype_bit": 443, "finfo": 444, "function_supported_dtyp": 445, "function_unsupported_dtyp": 446, "iinfo": 447, "invalid_dtyp": 448, "is_float_dtyp": 449, "is_int_dtyp": 450, "promote_typ": 451, "result_typ": 452, "set_default_dtyp": 453, "set_default_float_dtyp": 454, "set_default_int_dtyp": 455, "type_promote_arrai": 456, "unset_default_dtyp": 457, "unset_default_float_dtyp": 458, "unset_default_int_dtyp": 459, "valid_dtyp": 460, "devcloneditem": 463, "devclonedit": 464, "devclonednest": 465, "devdistitem": 466, "devdistit": 467, "devdistnest": 468, "devmapp": 470, "devmappermultiproc": 471, "multidevitem": 473, "multidevit": 474, "multidevnest": 475, "profil": 476, "as_ivy_dev": 477, "as_native_dev": 478, "clear_mem_on_dev": 479, "default_devic": 480, "dev": 481, "dev_clon": 482, "dev_clone_arrai": 483, "dev_clone_it": 484, "dev_clone_nest": 485, "dev_dist": 486, "dev_dist_arrai": 487, "dev_dist_it": 488, "dev_dist_nest": 489, "dev_unifi": 490, "dev_unify_arrai": 491, "dev_unify_it": 492, "dev_unify_nest": 493, "dev_util": 494, "get_all_ivy_arrays_on_dev": 495, "gpu_is_avail": 496, "num_cpu_cor": 497, "num_gpu": 498, "num_ivy_arrays_on_dev": 499, "percent_used_mem_on_dev": 500, "print_all_ivy_arrays_on_dev": 501, "set_default_devic": 502, "set_split_factor": 503, "split_factor": 504, "split_func_cal": 505, "to_devic": 506, "total_mem_on_dev": 507, "tpu_is_avail": 508, "unset_default_devic": 509, "used_mem_on_dev": 510, "maximum": 559, "minimum": 560, "arg_info": 581, "arg_nam": 582, "array_equ": 583, "arrays_equ": 584, "assert_supports_inplac": 585, "cache_fn": 586, "clip_matrix_norm": 587, "container_typ": 589, "copy_arrai": 590, "cumprod": 591, "cumsum": 592, "current_backend_str": 593, "default": 594, "einops_rearrang": 595, "einops_reduc": 596, "einops_repeat": 597, "exist": 598, "floormod": 599, "fourier_encod": 600, "gather": 601, "get_all_arrays_in_memori": 603, "get_min_bas": 604, "get_min_denomin": 605, "get_num_dim": 606, "get_referrers_recurs": 607, "has_nan": 608, "indices_wher": 609, "inplace_arrays_support": 610, "inplace_decr": 611, "inplace_incr": 612, "inplace_upd": 613, "inplace_variables_support": 614, "is_arrai": 615, "is_ivy_arrai": 616, "is_ivy_contain": 617, "is_native_arrai": 618, "match_kwarg": 619, "multiprocess": 620, "num_arrays_in_memori": 621, "one_hot": 622, "print_all_arrays_in_memori": 623, "queue_timeout": 624, "scatter_flat": 625, "scatter_nd": 626, "set_min_bas": 627, "set_min_denomin": 628, "set_queue_timeout": 629, "set_tmp_dir": 630, "shape_to_tupl": 632, "stable_divid": 633, "stable_pow": 634, "supports_inplac": 635, "tmp_dir": 636, "to_list": 637, "to_numpi": 638, "to_scalar": 639, "try_else_non": 640, "unstack": 641, "value_is_nan": 642, "conv1d": [644, 783], "conv1d_transpos": 645, "conv2d": [646, 785], "conv2d_transpos": 647, "conv3d": [648, 787], "conv3d_transpos": 649, "depthwise_conv2d": 650, "dropout": [651, 790], "lstm_updat": 653, "multi_head_attent": 654, "scaled_dot_product_attent": 655, "matrix_pow": 666, "slogdet": 672, "split": 697, "meta": 703, "fomaml_step": 704, "maml_step": 705, "reptile_step": 706, "nest": 707, "all_nested_indic": 708, "copy_nest": 709, "index_nest": 710, "insert_into_nest_at_index": 711, "insert_into_nest_at_indic": 712, "map": 713, "map_nest_at_index": 714, "map_nest_at_indic": 715, "multi_index_nest": 716, "nested_ani": 717, "nested_indices_wher": 718, "nested_map": 719, "nested_multi_map": 720, "prune_nest_at_index": 721, "prune_nest_at_indic": 722, "set_nest_at_index": 723, "set_nest_at_indic": 724, "multinomi": 728, "randint": 729, "random_norm": 730, "seed": 732, "shuffl": 733, "argmax": 735, "argmin": 736, "nonzero": 737, "where": 738, "unique_al": 740, "unique_count": 741, "unique_invers": 742, "unique_valu": 743, "content": 761, "overview": 761, "quick": 761, "start": 761, "roadmap": [761, 767], "citat": 761, "inspect": 764, "add_array_spec": 765, "fn_array_spec": 766, "geglu": 769, "to_ivy_modul": 772, "firstlayersiren": 775, "glorotuniform": 776, "Ones": 778, "siren": 779, "conv1dtranspos": 784, "conv2dtranspos": 786, "conv3dtranspos": 788, "depthwiseconv2d": 789, "lstm": 791, "multiheadattent": 793, "layernorm": 797, "adam": 799, "lamb": 800, "lar": 801, "sgd": 803, "sequenti": [804, 805], "verbos": 807, "cprint": 808}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})