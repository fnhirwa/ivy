Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 242, 265, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 567, 574, 611, 617, 636, 641, 643, 645, 647, 677, 844, 846, 856, 879, 882, 948, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 175, 180, 181, 186, 189, 194, 195, 200, 203, 206, 211, 216, 219, 224, 229, 234, 237, 242, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 339, 343, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 498, 499, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 553, 558, 563, 567, 568, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 648, 652, 653, 657, 661, 665, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 701, 704, 707, 710, 713, 716, 720, 723, 724, 727, 730, 733, 736, 739, 740, 743, 746, 749, 752, 755, 758, 761, 764, 765, 770, 775, 780, 781, 786, 790, 794, 798, 802, 806, 810, 814, 819, 820, 824, 828, 832, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 893, 894, 899, 904, 905, 909, 913, 917, 921, 925, 929, 933, 937, 938, 943, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 948], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 65, 66, 69, 70, 71, 72, 73, 110, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 567, 618, 867, 868, 872, 948, 955, 956, 957, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 991, 992], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995], "base": [0, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 122, 128, 144, 171, 203, 204, 205, 242, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 329, 417, 420, 461, 464, 465, 468, 469, 472, 473, 476, 516, 519, 567, 602, 625, 632, 641, 884, 885, 886, 890, 892, 904, 905, 908, 955, 956, 957, 960, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "object": [0, 69, 70, 71, 72, 73, 130, 133, 171, 189, 192, 242, 262, 279, 324, 641, 844, 847, 849, 851, 852, 853, 858, 859, 860, 861, 867, 878, 960, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982], "__init__": [0, 1, 4, 5, 69, 70, 71, 72, 73, 113, 119, 123, 128, 130, 131, 132, 133, 242, 243, 244, 245, 279, 280, 287, 288, 289, 290, 291, 292, 293, 294, 641, 642, 867, 868, 872, 948, 955, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "choose_random_backend": 0, "exclud": [0, 2, 115, 128, 171, 172, 173, 867, 873, 875], "none": [0, 2, 5, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 250, 251, 253, 255, 257, 258, 259, 262, 265, 279, 288, 289, 297, 298, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 605, 607, 608, 612, 618, 620, 623, 624, 625, 626, 631, 632, 638, 641, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 850, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 958, 959, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "clear_backend_stack": 0, "current_backend": [0, 71, 72, 113, 118], "arg": [0, 4, 21, 24, 25, 26, 69, 70, 128, 130, 132, 279, 288, 303, 307, 311, 323, 567, 624, 958, 959, 981, 982], "kwarg": [0, 4, 24, 25, 26, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 128, 130, 132, 279, 288, 303, 307, 311, 567, 617, 958, 959, 981, 982], "return": [0, 4, 5, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 278, 279, 288, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 953, 958, 959, 969, 978, 979, 985, 989], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 118, 124, 128, 133, 144, 145, 242, 263, 264, 266, 278, 279, 288, 312, 313, 317, 319, 567, 601, 608, 612, 619, 621, 844, 845, 854, 855, 948], "prioriti": [0, 4, 19, 69, 70, 125], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 270, 279, 288, 289, 303, 307, 311, 329, 330, 333, 343, 346, 348, 351, 392, 395, 425, 428, 508, 511, 540, 543, 544, 547, 553, 557, 567, 573, 574, 578, 588, 595, 617, 624, 679, 682, 691, 692, 693, 696, 704, 706, 780, 814, 817, 844, 850, 862, 863, 866, 884, 886, 890, 904, 909, 912, 929, 932, 937, 938, 941, 951, 953, 958, 959, 981, 982], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 24, 27, 28, 69, 70, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 170, 171, 206, 209, 224, 228, 229, 233, 242, 263, 264, 279, 298, 322, 329, 520, 523, 567, 576, 641, 648, 650, 653, 655, 661, 663, 669, 671, 692, 743, 745, 746, 748, 844, 850, 856, 904, 925, 928, 933, 936, 948, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "paramet": [0, 4, 5, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 288, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 951, 953, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 175, 178, 181, 184, 189, 192, 194, 195, 198, 206, 209, 211, 214, 219, 222, 237, 241, 242, 251, 254, 270, 279, 288, 289, 298, 313, 317, 322, 323, 329, 433, 436, 540, 543, 567, 588, 595, 596, 599, 635, 641, 648, 650, 661, 663, 679, 687, 690, 692, 704, 706, 743, 745, 755, 757, 780, 798, 801, 810, 813, 820, 823, 840, 841, 842, 843, 844, 846, 856, 857, 867, 868, 869, 870, 872, 873, 875, 879, 883, 884, 885, 891, 904, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 954, 958, 959, 969, 977, 980, 985, 989], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 168, 169, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 256, 260, 262, 265, 266, 278, 279, 288, 289, 299, 304, 305, 306, 307, 308, 309, 310, 311, 313, 317, 319, 321, 322, 323, 329, 520, 523, 567, 573, 585, 586, 588, 595, 596, 599, 601, 607, 611, 619, 620, 621, 623, 624, 639, 641, 648, 650, 652, 653, 655, 661, 663, 665, 667, 669, 671, 674, 676, 677, 679, 690, 692, 698, 700, 704, 706, 720, 722, 740, 742, 743, 745, 755, 757, 758, 760, 764, 770, 773, 775, 778, 780, 786, 789, 798, 801, 806, 809, 814, 817, 819, 824, 827, 844, 849, 850, 851, 852, 857, 858, 859, 860, 861, 867, 868, 869, 870, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 951, 953, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 69, 70, 121, 122, 130, 145, 567, 638, 948], "infer": [0, 4, 112, 119, 123, 124, 128, 133, 168, 169, 171, 172, 173, 175, 178, 181, 184, 194, 195, 198, 211, 214, 219, 222, 237, 241, 329, 433, 436, 567, 604, 629, 780, 810, 813], "when": [0, 4, 14, 15, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 242, 248, 279, 329, 343, 346, 421, 424, 516, 519, 567, 578, 611, 632, 764, 765, 768, 770, 773, 775, 778, 844, 855, 879, 880, 881, 883, 904, 909, 912, 917, 920, 925, 928, 933, 936, 948, 981, 982], "global": [0, 4, 5, 6, 12, 69, 70, 71, 72, 73, 118, 119, 123, 124, 128, 242, 257, 258, 259, 279, 288, 289, 321, 322, 323, 567, 602, 603, 622, 625, 626, 627, 631, 632, 862, 863, 866, 983, 984], "set": [0, 4, 5, 6, 12, 14, 17, 19, 24, 27, 28, 58, 69, 70, 103, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 279, 298, 308, 309, 320, 321, 322, 323, 329, 360, 363, 567, 568, 571, 625, 626, 627, 628, 641, 648, 650, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 692, 698, 700, 720, 722, 724, 726, 733, 735, 740, 742, 844, 845, 854, 855, 856, 860, 861, 867, 877, 879, 880, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 925, 928, 933, 936, 969, 978, 985, 986, 987, 988, 989, 990], "ret": [0, 4, 5, 12, 24, 25, 26, 27, 28, 69, 70, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 246, 247, 248, 249, 250, 251, 254, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 278, 279, 288, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 571, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 623, 624, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 951, 953, 958, 959, 985, 989], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 234, 236, 237, 241, 242, 248, 251, 252, 253, 254, 255, 263, 264, 279, 298, 299, 301, 313, 314, 315, 316, 317, 320, 322, 324, 326, 327, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 364, 367, 368, 371, 372, 375, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 425, 426, 427, 428, 433, 436, 437, 440, 453, 456, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 575, 576, 584, 585, 592, 595, 596, 597, 598, 599, 600, 603, 614, 629, 630, 635, 636, 637, 641, 643, 644, 645, 646, 647, 679, 680, 682, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 713, 715, 724, 726, 730, 732, 743, 745, 749, 751, 752, 754, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 925, 928, 929, 932, 937, 938, 941, 948], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 24, 27, 28, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 171, 172, 173, 180, 181, 184, 186, 187, 194, 195, 198, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 270, 279, 298, 322, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 485, 488, 489, 492, 499, 502, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 567, 611, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 693, 696, 698, 700, 720, 722, 724, 726, 733, 735, 736, 738, 740, 742, 743, 745, 755, 757, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 794, 797, 798, 801, 814, 817, 819, 820, 823, 824, 827, 840, 841, 842, 844, 856, 857, 867, 872, 873, 875, 879, 880, 881, 882, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948], "import": [0, 4, 15, 20, 65, 66, 110, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 279, 320, 948, 954], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 69, 70, 117, 119, 123, 124, 125, 126, 128, 130, 133, 567, 636, 904, 905, 908, 948], "np": [0, 4, 121, 123, 124, 125, 126, 130, 131, 133, 948], "x": [0, 4, 12, 21, 24, 27, 28, 31, 32, 35, 36, 37, 38, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 104, 105, 108, 109, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 171, 175, 178, 179, 181, 184, 185, 189, 192, 193, 195, 198, 199, 206, 209, 211, 214, 215, 219, 222, 223, 224, 225, 228, 229, 230, 233, 234, 236, 237, 238, 241, 242, 248, 250, 251, 252, 253, 254, 255, 260, 279, 298, 299, 300, 301, 304, 305, 313, 317, 322, 324, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 413, 416, 417, 420, 421, 424, 425, 426, 427, 428, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 485, 488, 497, 498, 504, 507, 512, 515, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 575, 576, 577, 579, 580, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 616, 620, 629, 630, 633, 635, 636, 637, 639, 640, 641, 652, 657, 659, 660, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 720, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 743, 745, 746, 748, 749, 751, 752, 754, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 844, 845, 850, 854, 855, 856, 862, 863, 866, 867, 869, 870, 871, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 902, 903, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 942, 943, 946, 947, 948, 969, 980], "arrai": [0, 4, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 208, 209, 210, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 251, 253, 254, 255, 260, 262, 265, 267, 268, 270, 274, 279, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 313, 317, 319, 323, 324, 329, 330, 332, 333, 334, 335, 338, 339, 342, 343, 345, 346, 347, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 394, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 427, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 566, 567, 568, 570, 571, 572, 575, 576, 577, 579, 580, 582, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 611, 613, 614, 616, 619, 620, 621, 623, 624, 629, 630, 633, 635, 636, 637, 639, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 783, 784, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 846, 856, 857, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 951, 953, 969, 977, 980], "2": [0, 4, 18, 19, 21, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 167, 170, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 237, 241, 242, 248, 251, 252, 253, 254, 255, 279, 298, 299, 301, 313, 315, 317, 324, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 356, 359, 360, 363, 368, 371, 372, 375, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 425, 426, 427, 428, 433, 436, 437, 440, 453, 456, 457, 460, 473, 476, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 575, 576, 579, 580, 582, 585, 592, 595, 596, 597, 598, 599, 600, 614, 629, 630, 635, 641, 643, 644, 645, 646, 647, 679, 682, 683, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 713, 715, 716, 719, 720, 722, 724, 726, 730, 732, 733, 735, 736, 738, 743, 745, 749, 750, 751, 752, 754, 758, 759, 760, 764, 765, 768, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 948], "0": [0, 4, 19, 29, 30, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 51, 52, 57, 58, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 186, 187, 188, 200, 201, 203, 204, 205, 219, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 241, 242, 248, 251, 253, 254, 255, 262, 279, 281, 284, 288, 291, 295, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 313, 317, 320, 322, 323, 327, 329, 330, 331, 333, 334, 335, 338, 339, 342, 343, 346, 347, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 376, 379, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 426, 427, 428, 437, 440, 457, 460, 461, 464, 465, 468, 473, 476, 497, 498, 499, 502, 504, 507, 508, 511, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 575, 576, 579, 580, 582, 584, 585, 586, 592, 595, 596, 599, 600, 605, 614, 620, 623, 624, 629, 635, 636, 637, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 665, 666, 667, 668, 679, 680, 682, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 713, 715, 743, 745, 749, 751, 752, 753, 754, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 805, 806, 809, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 831, 836, 838, 844, 856, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 904, 905, 908, 909, 912, 913, 916, 925, 926, 927, 928, 929, 932, 933, 934, 935, 936, 937, 938, 941, 948, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992], "print": [0, 4, 5, 6, 12, 18, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 115, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 165, 167, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 234, 236, 237, 241, 242, 248, 251, 252, 253, 254, 255, 263, 264, 279, 299, 313, 314, 315, 316, 317, 319, 322, 326, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 364, 367, 368, 371, 372, 375, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 425, 426, 427, 428, 433, 436, 437, 440, 453, 456, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 575, 576, 584, 585, 592, 595, 596, 597, 598, 599, 600, 603, 621, 629, 630, 635, 636, 637, 641, 643, 644, 646, 647, 679, 680, 682, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 713, 715, 730, 732, 743, 745, 749, 751, 752, 754, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 794, 797, 798, 801, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 925, 928, 929, 932, 937, 938, 941, 948], "function": [0, 4, 5, 6, 14, 19, 21, 22, 23, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 67, 68, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 426, 427, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 951, 953, 955, 956, 957, 985, 988, 990], "py": [0, 4, 5, 19, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 867, 868, 872], "noqa": [0, 4, 5, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 368, 371, 388, 391, 392, 395, 400, 403, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 692, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 904, 909, 912], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 167, 168, 169, 171, 172, 173, 189, 192, 203, 204, 224, 228, 229, 233, 242, 246, 247, 248, 256, 261, 263, 264, 266, 269, 274, 278, 279, 288, 289, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 567, 573, 575, 578, 579, 587, 588, 594, 596, 599, 609, 610, 611, 613, 614, 615, 616, 618, 623, 624, 625, 626, 627, 630, 631, 632, 640, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 674, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 819, 832, 835, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 872, 879, 880, 881, 882, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989], "set_backend": [0, 4, 5, 12, 118, 119, 120, 123, 242, 263, 264, 279, 320, 567, 629, 948], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 70, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 171, 206, 209, 279, 298, 329, 330, 333, 499, 502, 516, 519, 692, 716, 719, 739, 740, 742, 743, 745, 752, 754, 780, 794, 797, 820, 823, 884, 885, 886, 890, 892, 904, 913, 916, 921, 924, 925, 928, 929, 932, 933, 936], "over": [0, 4, 14, 16, 18, 65, 66, 69, 70, 110, 111, 114, 115, 119, 125, 130, 145, 692, 720, 722, 749, 751, 755, 757, 758, 760, 862, 863, 866, 867, 873, 875, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 983, 984], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 279, 324, 329, 330, 333, 343, 346, 348, 351, 392, 395, 409, 412, 425, 428, 437, 440, 457, 460, 508, 511, 540, 543, 544, 547, 553, 557, 567, 568, 571, 588, 589, 590, 591, 592, 595, 606, 613, 614, 615, 616, 631, 632, 641, 652, 679, 682, 689, 691, 692, 693, 696, 704, 706, 780, 814, 817, 840, 841, 842, 843, 844, 850, 854, 862, 863, 866, 867, 873, 875, 884, 886, 890, 904, 909, 912, 937, 938, 941, 948], "pass": [0, 4, 20, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 242, 256, 279, 288, 323, 329, 360, 363, 567, 578, 611, 641, 677, 840, 841, 842, 958, 959, 981, 982, 985, 989, 991, 992], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 119, 123, 124, 125, 126, 128, 130, 133, 145, 641, 657, 659, 884, 885, 886, 890, 892, 948], "get_backend": [0, 118, 119], "specifi": [0, 5, 69, 70, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 171, 172, 173, 180, 194, 200, 201, 203, 204, 216, 217, 224, 228, 229, 233, 234, 236, 242, 248, 250, 279, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 319, 322, 323, 324, 329, 520, 523, 567, 573, 585, 595, 596, 599, 606, 639, 692, 704, 706, 720, 722, 749, 751, 752, 754, 755, 757, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 798, 801, 814, 817, 820, 823, 824, 827, 836, 839, 844, 849, 851, 852, 858, 859, 860, 861, 879, 880, 881, 884, 885, 886, 890, 892, 893, 894, 897, 904, 905, 908, 921, 924, 929, 932, 937, 938, 941, 943, 946], "isn": [0, 5, 19, 131, 145], "t": [0, 5, 15, 16, 18, 19, 20, 21, 65, 66, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 567, 576, 679, 688, 689], "associ": [0, 5, 19, 118, 120, 145, 329, 343, 346, 499, 502, 692, 724, 726, 733, 735, 761, 763], "option": [0, 5, 18, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 110, 111, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 256, 257, 258, 259, 266, 278, 279, 298, 322, 323, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 573, 579, 580, 582, 585, 586, 587, 589, 590, 591, 593, 595, 596, 599, 607, 618, 620, 623, 624, 631, 632, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 850, 855, 856, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 883, 884, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "str": [0, 5, 24, 25, 26, 69, 70, 123, 124, 168, 169, 171, 206, 209, 242, 246, 256, 257, 258, 261, 262, 265, 266, 267, 268, 271, 272, 273, 278, 279, 295, 298, 299, 301, 304, 305, 306, 307, 323, 567, 573, 587, 589, 590, 591, 618, 623, 624, 679, 680, 682, 684, 685, 686, 692, 736, 738, 840, 841, 842, 843, 844, 850, 904, 905, 908], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65, 66, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 641, 652, 948, 954], "want": [0, 5, 15, 17, 18, 19, 65, 66, 110, 111, 117, 131, 132, 133, 145], "retriev": [0, 5, 19, 567, 573], "i": [0, 5, 19, 21, 112, 128, 131, 133, 171, 172, 173, 206, 209, 329, 330, 333, 360, 363, 376, 379, 384, 387, 392, 395, 425, 428, 429, 432, 441, 444, 497, 498, 504, 507, 516, 519, 520, 523, 567, 575, 576, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 698, 700, 716, 719, 724, 726, 733, 735, 740, 742, 743, 745, 752, 754, 758, 760, 780, 824, 827, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936], "e": [0, 5, 15, 16, 17, 19, 21, 112, 122, 131, 145, 170, 171, 206, 209, 242, 247, 270, 279, 295, 329, 330, 333, 360, 363, 376, 379, 384, 387, 392, 395, 417, 420, 425, 428, 429, 432, 441, 444, 461, 464, 469, 472, 497, 498, 504, 507, 516, 519, 520, 523, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 698, 700, 716, 719, 724, 726, 733, 735, 740, 742, 743, 745, 758, 760, 780, 824, 827, 867, 872, 873, 875, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "one": [0, 5, 15, 16, 18, 19, 69, 70, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 171, 172, 173, 206, 209, 242, 249, 251, 254, 279, 308, 309, 310, 311, 323, 330, 334, 343, 347, 567, 568, 570, 571, 572, 596, 600, 617, 620, 623, 624, 692, 693, 697, 716, 719, 720, 722, 730, 732, 736, 738, 755, 757, 758, 760, 780, 781, 785, 794, 797, 798, 801, 814, 817, 818, 820, 823, 869, 871, 879, 880, 882, 884, 885, 886, 890, 891, 892, 904, 905, 908, 948], "default": [0, 5, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 257, 258, 259, 260, 279, 288, 289, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 571, 573, 579, 580, 582, 585, 586, 589, 590, 591, 593, 594, 595, 596, 599, 604, 605, 606, 607, 608, 611, 612, 613, 614, 616, 617, 618, 620, 622, 623, 624, 627, 629, 631, 632, 639, 640, 641, 643, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 857, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "torch": [0, 5, 12, 19, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 168, 169, 242, 263, 264, 279, 320, 567, 629, 780, 794, 797, 948], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 123, 124, 125, 126, 128, 133, 145, 948], "mxnet": [0, 5, 15, 20, 123, 124, 125, 128, 133, 948], "either": [0, 5, 12, 18, 19, 21, 69, 70, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 171, 189, 192, 329, 343, 346, 360, 363, 445, 448, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 520, 523, 528, 531, 532, 535, 553, 557, 567, 588, 613, 617, 618, 692, 716, 719, 840, 841, 842, 843, 904, 921, 924, 929, 932, 969, 980, 981, 982], "doesn": [0, 5, 18, 21, 115, 123, 128, 145], "matter": [0, 5, 14, 115], "been": [0, 5, 19, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 279, 298, 567, 589, 590, 591, 867, 868], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 17, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 73, 80, 81, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 165, 167, 170, 242, 261, 279, 288, 289, 314, 318, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 348, 351, 368, 371, 388, 391, 400, 403, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 567, 595, 602, 603, 617, 623, 624, 625, 626, 631, 632, 641, 643, 646, 648, 650, 661, 663, 665, 667, 679, 685, 687, 688, 690, 691, 692, 701, 703, 704, 706, 720, 722, 764, 765, 768, 780, 794, 797, 798, 801, 806, 809, 814, 817, 828, 831, 840, 841, 842, 843, 844, 845, 847, 853, 854, 855, 857, 862, 863, 866, 879, 880, 881, 882, 884, 885, 904, 905, 908, 937, 938, 941, 948, 969, 977, 980, 981, 982, 983, 984, 985, 987, 988], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 115, 117, 118, 121, 125, 126, 132], "call": [0, 6, 12, 15, 21, 71, 72, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 279, 323, 567, 622, 627, 638, 641, 652, 844, 845, 850, 854, 855, 969, 980, 981, 982, 985, 989], "nativ": [0, 6, 24, 26, 27, 28, 69, 70, 123, 125, 130, 131, 171, 211, 214, 242, 246, 247, 256, 279, 295, 296, 297, 298, 299, 318, 325, 328, 567, 611, 613, 616, 958, 959], "native_arrai": [0, 6, 12, 29, 30, 37, 38, 74, 75, 82, 83, 156, 158, 159, 160, 161, 162, 165, 167, 171, 206, 209, 242, 251, 254, 279, 301, 317, 329, 330, 333, 348, 351, 368, 371, 388, 391, 392, 395, 425, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 540, 543, 544, 547, 558, 562, 567, 568, 569, 570, 571, 572, 576, 584, 585, 592, 595, 596, 599, 630, 635, 636, 637, 641, 643, 646, 679, 682, 685, 686, 691, 692, 698, 700, 701, 703, 704, 706, 749, 751, 764, 765, 768, 775, 778, 780, 781, 784, 794, 797, 798, 801, 806, 809, 819, 828, 831, 862, 863, 866, 867, 868, 879, 880, 881, 882, 883, 884, 885, 886, 890, 904, 905, 908, 909, 912, 937, 938, 941], "1": [0, 6, 12, 15, 16, 21, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 167, 171, 172, 173, 174, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 237, 241, 242, 248, 251, 252, 253, 254, 255, 262, 279, 283, 286, 288, 293, 298, 299, 301, 303, 307, 311, 313, 316, 317, 324, 329, 330, 331, 332, 333, 335, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 360, 363, 368, 371, 372, 375, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 426, 427, 428, 433, 436, 437, 440, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 497, 498, 504, 507, 508, 511, 516, 519, 524, 527, 528, 531, 532, 535, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 575, 576, 584, 585, 592, 595, 596, 597, 598, 599, 600, 614, 620, 623, 624, 629, 630, 632, 635, 636, 637, 639, 641, 643, 644, 645, 646, 647, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 713, 715, 724, 726, 730, 732, 740, 742, 743, 745, 749, 751, 752, 754, 755, 756, 757, 758, 760, 764, 765, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 844, 856, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 912, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "type": [0, 6, 12, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 278, 279, 295, 296, 297, 298, 299, 301, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 616, 620, 623, 624, 625, 626, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "ndarrai": [0, 6, 121, 123, 124, 125, 126, 130, 171, 175, 178, 211, 214, 567, 636], "Or": [0, 6, 131], "jaxlib": [0, 6, 18, 123, 124, 126, 130], "xla_extens": [0, 6, 123, 124, 126, 130], "devicearrai": [0, 6, 130], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 24, 25, 26, 27, 28, 37, 38, 45, 46, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 122, 125, 131, 132, 133, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 242, 248, 251, 253, 254, 255, 260, 279, 298, 299, 310, 314, 315, 318, 323, 326, 328, 329, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 488, 489, 491, 492, 493, 495, 499, 501, 503, 504, 506, 508, 510, 511, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 567, 568, 569, 570, 571, 572, 575, 576, 580, 581, 585, 588, 592, 594, 596, 598, 600, 604, 611, 613, 614, 616, 617, 629, 639, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 692, 693, 694, 695, 696, 697, 716, 718, 720, 721, 722, 743, 745, 758, 759, 760, 765, 767, 769, 770, 772, 774, 775, 777, 779, 780, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 819, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 857, 863, 865, 867, 868, 873, 874, 876, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 958, 959, 981, 982, 985, 986, 987, 988, 989, 990], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 119], "unset": [0, 12, 119, 128, 130], "adjust": [0, 12, 904, 925, 928, 933, 936], "dict": [0, 12, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 122, 131, 132, 279, 288, 289, 298, 301, 304, 305, 306, 307, 567, 573, 589, 590, 591, 844, 846, 847, 850, 853, 856, 857], "previous": [0, 12, 18, 21, 117, 118, 128, 567, 578], "otherwis": [0, 12, 24, 25, 26, 27, 28, 69, 70, 121, 123, 124, 126, 128, 130, 171, 172, 173, 242, 248, 251, 254, 257, 258, 259, 279, 298, 329, 441, 444, 445, 448, 449, 452, 567, 577, 638, 641, 657, 659, 674, 692, 693, 696, 701, 703, 755, 757, 758, 760, 840, 841, 842, 844, 857, 879, 880, 881, 883, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "implement": [0, 12, 20, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 242, 248, 270, 279, 324, 329, 330, 333, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 417, 420, 421, 424, 461, 464, 465, 468, 469, 472, 473, 476, 499, 502, 516, 519, 520, 523, 532, 535, 536, 539, 553, 557, 558, 562, 692, 707, 709, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 948], "wa": [0, 12, 15, 69, 70, 115, 128, 130, 567, 638, 844, 857, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "last": [0, 12, 16, 19, 69, 70, 115, 119, 145, 156, 161, 279, 298, 679, 689, 692, 698, 700, 704, 706, 720, 722, 752, 754, 755, 757, 764, 770, 773, 775, 778, 780, 798, 801, 814, 817, 819, 824, 827, 893, 894, 897, 899, 902, 937, 938, 941, 943, 946, 969, 979], "henc": [0, 12, 884, 885, 886, 890, 892], "here": [0, 12, 18, 19, 20, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [0, 12, 14, 69, 70, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 171, 200, 201, 203, 204, 242, 260, 329, 368, 371, 497, 498, 567, 620, 623, 624, 679, 687, 689, 692, 749, 751, 780, 794, 797, 810, 813, 819, 867, 868, 879, 882, 948, 969, 977, 979], "howev": [0, 12, 15, 18, 20, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [0, 12, 18, 19, 20, 69, 70, 114, 117, 121, 123, 124, 125, 128, 131, 145, 279, 323, 329, 563, 566, 679, 690, 691, 840, 841, 842, 844, 856, 884, 885, 886, 890, 892, 904, 921, 924, 929, 932], "becom": [0, 12, 14, 16, 19, 115, 122, 128, 133, 145, 780, 781, 784], "swap": [0, 12, 780, 828, 831], "python": [0, 12, 13, 14, 15, 18, 19, 21, 128, 130, 131, 145, 171, 172, 173, 279, 318, 328, 329, 520, 523, 948, 954], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 24, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995], "op": [0, 12, 113, 128, 145], "eagertensor": [0, 12], "def": [1, 20, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 243, 244, 245, 280, 287, 290, 642, 948, 961, 964, 967], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995], "backend": [4, 5, 6, 12, 14, 19, 20, 24, 26, 28, 69, 70, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 242, 263, 264, 266, 278, 279, 314, 316, 326, 567, 608, 611, 612, 618, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 677, 948, 954, 958, 959, 985, 986, 987, 988, 989, 990], "ml": [13, 15, 16, 17, 127, 128, 129, 131, 132, 133, 144, 948, 954], "explos": [13, 15, 948], "A": [13, 14, 15, 16, 21, 69, 70, 71, 72, 73, 112, 117, 118, 122, 123, 124, 128, 131, 145, 171, 186, 187, 211, 214, 279, 288, 289, 323, 329, 512, 515, 567, 603, 635, 692, 730, 732, 739, 740, 742, 743, 745, 780, 819, 824, 827, 844, 845, 847, 849, 851, 852, 853, 854, 855, 858, 859, 860, 861, 904, 905, 908, 937, 938, 941, 943, 946, 948, 991, 992], "huge": [13, 15, 131, 948], "number": [13, 14, 18, 69, 70, 71, 72, 73, 115, 122, 124, 125, 128, 131, 133, 168, 169, 170, 171, 172, 173, 175, 178, 186, 187, 200, 201, 203, 204, 206, 209, 211, 214, 242, 249, 261, 262, 265, 267, 268, 270, 279, 315, 316, 317, 329, 343, 346, 360, 363, 392, 395, 425, 428, 429, 432, 497, 498, 499, 502, 516, 519, 520, 523, 524, 527, 528, 531, 563, 566, 567, 568, 571, 594, 603, 604, 619, 637, 640, 679, 690, 692, 704, 706, 707, 709, 724, 726, 739, 743, 745, 755, 757, 780, 781, 784, 790, 793, 802, 805, 806, 809, 814, 817, 819, 824, 827, 832, 835, 836, 839, 840, 841, 842, 843, 867, 868, 877, 879, 882, 884, 885, 886, 890, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980], "tool": [13, 16, 19, 129, 133, 144, 145, 948], "have": [13, 14, 15, 16, 18, 19, 20, 21, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 262, 279, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 589, 590, 591, 593, 596, 599, 607, 620, 623, 624, 641, 657, 659, 674, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948], "explod": [13, 14, 948], "onto": [13, 14, 279, 308, 309, 844, 850, 856, 948], "scene": [13, 14, 112, 127, 129, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 948], "b": [13, 16, 17, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 242, 251, 253, 254, 255, 279, 301, 329, 330, 332, 333, 334, 343, 345, 346, 347, 348, 351, 368, 371, 388, 391, 392, 394, 395, 400, 403, 425, 427, 428, 437, 440, 457, 460, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 556, 557, 558, 559, 561, 562, 567, 568, 570, 571, 572, 575, 576, 584, 585, 592, 595, 596, 598, 599, 600, 637, 641, 643, 645, 646, 647, 679, 682, 685, 686, 691, 692, 693, 695, 696, 697, 698, 700, 701, 703, 704, 706, 730, 732, 740, 742, 749, 751, 761, 763, 764, 765, 768, 780, 781, 783, 784, 785, 794, 797, 798, 801, 806, 809, 814, 816, 817, 818, 824, 827, 828, 831, 862, 863, 866, 867, 869, 871, 872, 873, 875, 879, 881, 882, 883, 884, 886, 887, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 948, 954], "why": [13, 15, 19, 122, 125, 126, 130, 948], "unifi": [13, 15, 69, 70, 121, 128, 145, 279, 308, 309, 310, 311, 323, 948], "should": [13, 15, 18, 19, 20, 21, 69, 70, 71, 72, 73, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 168, 169, 171, 206, 209, 224, 228, 229, 233, 242, 250, 279, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 417, 420, 421, 424, 425, 428, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 578, 611, 620, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 713, 715, 716, 719, 724, 726, 730, 732, 733, 735, 736, 738, 740, 742, 743, 745, 749, 751, 752, 754, 755, 757, 758, 760, 780, 810, 813, 867, 878, 879, 880, 881, 884, 885, 886, 890, 892, 904, 905, 908, 909, 912, 913, 916, 921, 924, 925, 928, 929, 932, 933, 936, 948], "them": [13, 14, 15, 16, 117, 119, 121, 122, 128, 130, 131, 132, 145, 948], "c": [13, 15, 16, 17, 98, 99, 112, 115, 118, 122, 127, 128, 129, 131, 145, 329, 508, 511, 567, 575, 576, 584, 637, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 685, 780, 824, 827, 869, 871, 879, 882, 904, 905, 908, 925, 928, 933, 936, 948, 954], "standard": [13, 112, 113, 114, 116, 117, 121, 125, 126, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 262, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 692, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 867, 872, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 925, 928, 933, 936, 937, 938, 941, 948, 954, 983, 984], "re": [13, 14, 15, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 279, 323, 567, 589, 692, 749, 751, 780, 814, 817, 879, 883, 948], "collabor": [13, 14, 15, 948], "consortium": [13, 15, 948, 954], "data": [13, 15, 69, 70, 71, 72, 73, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 246, 247, 248, 250, 251, 254, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 278, 279, 281, 282, 283, 284, 285, 286, 291, 292, 293, 295, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 575, 576, 613, 614, 616, 633, 641, 657, 659, 677, 679, 688, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 740, 742, 743, 745, 749, 751, 752, 754, 755, 757, 758, 760, 780, 794, 797, 798, 801, 802, 805, 810, 813, 814, 817, 820, 823, 824, 827, 867, 878, 879, 880, 881, 882, 893, 894, 897, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 954, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "api": [13, 14, 18, 19, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 692, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941, 948, 954], "open": [14, 15, 16, 17, 18, 21, 114, 144, 171, 172, 173, 867, 869, 870, 873, 875, 948], "project": [14, 15, 16, 18, 19, 21, 113, 119, 130, 132, 144, 145, 867, 868, 872], "grown": 14, "consider": [14, 115, 126], "recent": [14, 15, 18, 19], "year": [14, 16, 145, 948], "especi": [14, 18], "deep": [14, 17, 19, 20, 69, 70, 127, 131, 948], "learn": [14, 15, 18, 20, 112, 118, 127, 133, 144, 329, 433, 436, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 840, 841, 842, 843, 948, 985, 986, 987, 988, 989, 990], "can": [14, 15, 16, 17, 18, 19, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 171, 175, 178, 211, 214, 242, 251, 254, 279, 321, 322, 323, 692, 713, 715, 780, 810, 813, 867, 869, 870, 948, 954], "seen": [14, 15, 115, 130, 131], "rapidli": 14, "increas": [14, 279, 303, 307, 311, 780, 790, 793, 836, 839, 844, 856], "github": [14, 19, 20, 114, 117], "repo": [14, 15, 16, 18, 19, 116, 128, 130, 131, 132, 133, 144, 948, 954], "contain": [14, 18, 19, 20, 21, 24, 27, 28, 37, 38, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 165, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 279, 300, 301, 304, 313, 317, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 569, 571, 573, 576, 579, 580, 582, 584, 585, 592, 595, 596, 599, 606, 615, 635, 636, 637, 641, 643, 646, 648, 653, 657, 661, 665, 669, 679, 682, 685, 686, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 790, 794, 797, 798, 801, 802, 805, 806, 809, 810, 814, 817, 819, 820, 824, 828, 831, 832, 836, 840, 841, 842, 843, 844, 857, 862, 863, 866, 867, 868, 869, 872, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 890, 892, 893, 894, 897, 899, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 985, 989, 991, 992], "term": [14, 19, 122, 679, 689, 969, 979], "time": [14, 15, 16, 18, 19, 20, 117, 118, 122, 123, 126, 128, 131, 133, 145, 641, 648, 650, 661, 663, 679, 689, 780, 832, 835, 840, 841, 842, 843, 879, 880, 881, 884, 885, 886, 890, 969, 980, 981, 982], "These": [14, 15, 16, 19, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 692, 707, 709, 948, 954], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 171, 172, 173, 279, 288, 289, 313, 317, 319, 323, 329, 396, 399, 485, 488, 489, 492, 524, 527, 532, 535, 553, 557, 567, 568, 571, 575, 576, 577, 601, 607, 608, 612, 619, 621, 633, 679, 688, 692, 698, 700, 716, 719, 720, 722, 724, 726, 733, 735, 743, 745, 746, 748, 755, 757, 780, 781, 784, 798, 801, 814, 817, 844, 846, 850, 856, 867, 872, 873, 875, 879, 880, 881, 882, 884, 885, 948, 991, 992], "written": [14, 18, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [14, 15, 16, 18, 19, 20, 69, 70, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 780, 819], "differ": [14, 15, 16, 18, 19, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 242, 262, 279, 300, 301, 304, 305, 329, 343, 346, 499, 502, 548, 552, 679, 688, 780, 824, 827, 904, 921, 924, 929, 932, 948], "while": [14, 15, 18, 19, 69, 70, 71, 72, 73, 115, 119, 125, 132, 133, 145, 329, 485, 488, 489, 492, 884, 885, 904, 913, 916], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 251, 252, 253, 254, 255, 279, 303, 307, 311, 318, 323, 328, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 368, 371, 384, 387, 388, 391, 392, 393, 394, 395, 400, 403, 421, 424, 425, 426, 427, 428, 457, 460, 485, 488, 489, 492, 508, 511, 520, 523, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 572, 594, 595, 596, 597, 598, 600, 611, 622, 627, 641, 643, 644, 645, 647, 648, 650, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 677, 679, 682, 688, 691, 692, 693, 694, 695, 696, 697, 701, 703, 704, 706, 720, 722, 739, 780, 781, 782, 783, 785, 794, 797, 798, 801, 810, 813, 814, 815, 816, 817, 818, 824, 827, 844, 850, 856, 857, 862, 863, 866, 869, 871, 879, 880, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 904, 909, 912, 913, 916, 925, 928, 933, 936, 937, 938, 941, 948, 954, 981, 982, 985, 986, 987, 988, 989, 990], "wonder": [14, 16, 130], "thing": [14, 15, 16, 18, 19, 20, 119, 130, 131], "research": [14, 144], "develop": [14, 15, 16, 17, 18, 19, 20, 144, 145, 948], "also": [14, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 251, 252, 253, 254, 255, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 368, 371, 388, 391, 392, 393, 394, 395, 400, 403, 425, 426, 427, 428, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 572, 595, 596, 597, 598, 600, 611, 641, 643, 644, 645, 647, 648, 650, 679, 682, 688, 691, 692, 693, 694, 695, 696, 697, 701, 703, 704, 706, 780, 781, 782, 783, 785, 794, 797, 798, 801, 814, 815, 816, 817, 818, 840, 841, 842, 843, 844, 845, 846, 854, 855, 856, 862, 863, 866, 869, 871, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941, 969, 979], "consid": [14, 15, 69, 70, 113, 118, 129, 130, 131, 329, 485, 488, 489, 492, 884, 885, 886, 890, 892], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 84, 85, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 165, 167, 279, 301, 324, 329, 388, 391, 544, 547, 641, 643, 645, 646, 647, 679, 685, 686, 884, 885, 886, 890, 893, 894, 897, 904, 905, 908, 948, 954], "significantli": 14, "hinder": [14, 126], "librari": [14, 15, 16, 128, 133, 143, 145, 279, 324, 329, 421, 424, 485, 488, 489, 492, 692, 707, 709, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 948], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 19, 893, 894, 897, 899, 902], "against": [14, 69, 70, 117, 145, 242, 249, 692, 716, 719, 720, 722, 724, 726, 733, 735, 879, 880], "newest": 14, "version": [14, 15, 16, 18, 114, 128, 130, 692, 707, 709, 948], "For": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 206, 209, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 641, 657, 659, 677, 692, 743, 745, 752, 754, 780, 781, 784, 824, 827, 884, 885, 886, 890, 892, 904, 909, 912, 917, 920, 929, 932, 958, 959], "softwar": [14, 15, 18, 19], "pipelin": [14, 121, 133], "where": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 71, 72, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 171, 194, 195, 198, 206, 209, 329, 360, 363, 417, 420, 469, 472, 499, 502, 516, 519, 567, 607, 611, 620, 692, 707, 709, 724, 726, 733, 735, 736, 738, 743, 745, 746, 748, 752, 754, 755, 757, 780, 781, 784, 790, 793, 794, 797, 802, 805, 824, 827, 836, 839, 844, 845, 855, 867, 868, 879, 882, 904, 925, 928, 933, 936, 937, 938, 941, 943, 946, 948], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 133], "signific": [14, 15, 145], "bottleneck": 14, "As": [14, 19, 65, 66, 110, 111, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 884, 885, 886, 890, 892], "new": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 171, 180, 189, 192, 194, 195, 198, 216, 217, 219, 222, 234, 236, 237, 241, 242, 274, 329, 364, 367, 469, 472, 512, 515, 567, 589, 590, 591, 594, 595, 596, 599, 623, 624, 625, 626, 631, 632, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 780, 794, 797, 810, 813, 824, 827, 844, 849, 860, 861, 862, 863, 866, 948, 958, 959, 969, 979, 983, 984, 985, 986, 987, 988, 989, 990], "futur": [14, 16, 18, 19, 130, 145, 692, 707, 709], "avail": [14, 18, 19, 69, 70, 114, 124, 145, 279, 298, 314, 315, 316, 326, 567, 590], "specif": [14, 20, 69, 70, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 242, 270, 279, 321, 324, 329, 485, 488, 489, 492, 567, 589, 590, 591, 618, 692, 707, 709, 749, 751, 780, 824, 827, 840, 841, 842, 843, 867, 868, 904, 909, 912, 913, 916, 917, 920, 948, 951, 953, 954, 981, 982], "quickli": [14, 16, 18, 19, 131, 132], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 112, 117, 119, 122, 125, 127, 145, 969, 980, 981, 982], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 65, 66, 110, 111, 115, 122, 127, 130, 131, 132, 133, 145, 948], "desir": [14, 69, 70, 242, 248, 251, 254, 279, 324, 567, 607, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "provid": [14, 18, 19, 69, 70, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 168, 169, 171, 206, 209, 242, 257, 258, 259, 266, 270, 278, 279, 298, 567, 588, 620, 624, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 755, 757, 780, 798, 801, 824, 827, 879, 880, 904, 925, 928, 933, 936, 937, 938, 941, 943, 946, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 985, 986, 987, 988, 989, 990], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 168, 169, 171, 172, 173, 224, 228, 229, 233, 279, 288, 313, 319, 567, 568, 571, 575, 576, 601, 621, 636, 679, 689, 692, 740, 742, 749, 751, 758, 760, 780, 798, 801, 814, 817, 840, 841, 842, 843, 844, 845, 846, 855, 856, 857, 867, 868, 873, 875, 937, 948, 951, 953], "modern": [14, 15], "simpl": [14, 18, 19, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 567, 592], "scalabl": [14, 128], "manner": [14, 24, 27, 28, 69, 70, 113, 114, 124, 131, 144, 145, 844, 856], "must": [14, 16, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 279, 308, 309, 310, 311, 323, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 589, 590, 591, 593, 596, 599, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 985, 989], "determin": [14, 69, 70, 114, 118, 122, 123, 124, 242, 251, 254, 256, 261, 266, 267, 268, 278, 279, 314, 315, 316, 326, 329, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 396, 399, 400, 403, 404, 407, 417, 420, 421, 424, 441, 444, 445, 448, 449, 452, 461, 464, 465, 468, 473, 476, 477, 480, 493, 496, 499, 502, 516, 519, 520, 523, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 567, 568, 571, 575, 576, 606, 608, 612, 613, 614, 615, 616, 633, 640, 641, 657, 659, 679, 690, 692, 693, 696, 698, 700, 701, 703, 704, 706, 713, 715, 716, 719, 724, 726, 730, 732, 733, 735, 739, 740, 742, 752, 754, 755, 757, 758, 760, 840, 841, 842, 843, 884, 885, 886, 890, 892, 937, 938, 941, 943, 946], "exactli": [14, 16, 115, 122, 124, 948, 954], "common": [14, 20, 69, 70, 115, 118, 120, 122, 124, 145], "ground": [14, 117], "li": 14, "between": [14, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 171, 172, 173, 242, 262, 329, 360, 363, 516, 519, 764, 765, 768, 770, 773, 775, 778, 780, 794, 797, 824, 827, 844, 850, 867, 869, 870, 884, 885, 886, 890, 892, 948, 985, 987], "find": [14, 18, 19, 69, 70, 128, 131, 884, 885, 886, 890, 892, 948], "exist": [14, 15, 18, 20, 21, 69, 70, 71, 72, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 567, 588, 985, 989], "essenti": [14, 15, 20, 115, 118, 124], "order": [14, 18, 19, 21, 69, 70, 71, 72, 73, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 329, 360, 363, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 707, 709, 720, 722, 743, 745, 746, 748, 758, 760, 780, 798, 801, 840, 841, 842, 879, 882, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 991, 992], "design": [14, 15, 112, 125, 128, 130, 145], "univers": 14, "abstract": [14, 122, 132, 145, 279, 294, 985, 989], "In": [14, 16, 18, 19, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 279, 318, 324, 325, 328, 329, 343, 346, 499, 502, 520, 523, 567, 573, 611, 780, 810, 813, 867, 873, 875, 948], "search": [14, 18, 24, 27, 28, 56, 69, 70, 101, 113, 115, 117, 880, 881, 882, 883], "languag": [14, 16, 128], "first": [14, 15, 18, 19, 21, 115, 118, 121, 122, 126, 128, 130, 131, 133, 168, 169, 171, 200, 201, 203, 204, 242, 269, 274, 279, 298, 310, 329, 343, 346, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 409, 412, 429, 432, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 548, 552, 567, 575, 641, 652, 692, 698, 700, 704, 706, 707, 709, 716, 719, 730, 732, 736, 738, 743, 745, 749, 751, 755, 757, 780, 786, 789, 814, 817, 824, 827, 828, 831, 840, 841, 842, 843, 844, 845, 854, 855, 867, 878, 879, 880, 881, 884, 885, 886, 890, 969, 980, 981, 982, 985, 989], "see": [14, 17, 18, 19, 20, 116, 118, 122, 124, 126, 130, 131, 144, 145, 171, 172, 173, 189, 192, 200, 201, 203, 204, 242, 250, 270, 329, 343, 346, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 421, 424, 453, 456, 477, 480, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 548, 552, 692, 724, 726, 733, 735, 740, 742, 755, 757, 758, 760, 879, 881, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948], "clear": [14, 15, 16, 19, 20, 115, 117, 123, 124, 128, 130, 279, 297], "front": [14, 127, 128, 131, 948, 954], "runner": 14, "look": [14, 18, 19, 21, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 948], "littl": [14, 130], "deeper": [14, 19, 112, 127, 279, 303, 307, 311, 844, 855, 856], "follow": [14, 15, 18, 19, 20, 21, 69, 70, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 242, 265, 279, 323, 329, 520, 523, 567, 609, 610, 611, 631, 632, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 690, 691, 692, 736, 738, 758, 760, 844, 850, 856, 884, 885, 886, 890, 892, 948, 969, 979, 985, 989], "same": [14, 16, 18, 19, 21, 24, 25, 26, 69, 70, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 171, 172, 173, 181, 184, 195, 198, 206, 209, 219, 222, 224, 228, 229, 233, 237, 241, 242, 248, 249, 250, 279, 288, 289, 323, 329, 330, 333, 343, 346, 372, 375, 392, 395, 425, 428, 499, 502, 520, 523, 524, 527, 528, 531, 563, 566, 567, 593, 595, 596, 599, 620, 623, 624, 641, 657, 659, 674, 679, 680, 681, 682, 683, 684, 685, 686, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 752, 754, 755, 757, 780, 786, 789, 798, 801, 802, 805, 814, 817, 820, 823, 824, 827, 840, 841, 842, 844, 857, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 929, 932, 933, 936, 948, 969, 970, 971, 972, 973, 974, 975, 976], "core": [14, 18, 20, 124, 128, 133, 279, 315, 948], "principl": 14, "oper": [14, 18, 20, 69, 70, 71, 72, 114, 115, 118, 121, 122, 124, 125, 131, 132, 171, 200, 201, 203, 204, 242, 270, 329, 343, 346, 384, 387, 388, 391, 437, 440, 504, 507, 508, 511, 520, 523, 544, 547, 567, 577, 589, 590, 591, 633, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 680, 681, 682, 683, 684, 685, 686, 688], "expos": [14, 128, 132, 567, 583], "almost": [14, 19, 122, 129, 131], "ident": [14, 16, 69, 70, 118, 120, 122, 130, 131, 145, 279, 313, 844, 857, 948], "uniqu": [14, 118, 122, 145, 279, 288, 289, 840, 841, 842, 843, 844, 850, 884, 885, 886, 890, 891, 892], "syntax": [14, 15], "There": [14, 18, 19, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [14, 17, 18, 19, 69, 70, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 279, 319, 329, 485, 488, 489, 492, 692, 716, 719, 736, 738, 780, 798, 801, 844, 845, 846, 854, 855, 879, 880, 881, 904, 913, 916, 948, 985, 986, 987, 988, 989, 990], "so": [14, 15, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 693, 694, 695, 697, 781, 782, 783, 785, 814, 815, 816, 818, 844, 845, 855, 869, 871, 886, 887, 888, 889, 948], "wai": [14, 15, 18, 119, 125, 130, 131, 132, 133, 145], "manipul": [14, 50, 95, 113, 133, 144, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839], "unsurprisingli": [14, 115], "fundament": [14, 122, 128], "consist": [14, 69, 70, 121, 125, 279, 311, 692, 707, 709, 904, 905, 908, 981, 982], "each": [14, 15, 16, 19, 20, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 165, 171, 206, 209, 242, 249, 279, 288, 289, 300, 301, 302, 303, 304, 305, 306, 310, 323, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 571, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 693, 696, 698, 700, 701, 703, 707, 709, 716, 719, 724, 726, 727, 729, 733, 735, 740, 742, 743, 745, 780, 790, 793, 806, 809, 814, 817, 819, 824, 827, 832, 835, 836, 839, 844, 850, 857, 867, 868, 879, 882, 884, 885, 886, 890, 904, 905, 908, 948, 954, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "veri": [14, 15, 18, 19, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 948], "similar": [14, 113, 122, 123, 124, 131, 145, 329, 520, 523, 679, 690, 969, 980], "convent": [14, 144, 692, 716, 719, 904, 905, 908], "those": [14, 18, 19, 20, 69, 70, 122, 128, 133, 171, 172, 173, 641, 677, 692, 736, 738, 743, 745, 780, 781, 784], "introduc": [14, 122, 131, 780, 814, 817, 884, 885], "2006": 14, "layer": [14, 44, 89, 113, 114, 128, 129, 132, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 862, 863, 866, 948, 960, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "therefor": [14, 19, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 392, 395, 425, 428, 508, 511, 540, 543, 544, 547, 553, 557, 567, 595, 679, 682, 691, 692, 693, 696, 704, 706, 780, 814, 817, 862, 863, 866, 884, 886, 890, 904, 909, 912, 937, 938, 941], "present": [14, 19, 69, 70, 116, 122, 123, 124, 125, 126, 128], "itself": [14, 18, 19, 122, 125, 126, 132, 144, 145, 567, 573, 844, 856], "cut": 14, "cloth": 14, "adher": [14, 15, 114, 116, 128, 133], "semant": [14, 128, 133, 329, 520, 523], "round": [14, 15, 16, 18, 19, 20, 21, 35, 36, 80, 81, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 329, 343, 346, 392, 395, 425, 428, 429, 432, 499, 502, 540, 543, 563, 566, 948], "up": [14, 15, 16, 17, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [14, 128], "pictur": [14, 128], "how": [14, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 948, 954, 969, 980, 981, 982], "pleas": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 948], "check": [14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 69, 70, 122, 127, 128, 130, 131, 132, 133, 144, 242, 256, 263, 264, 266, 278, 279, 318, 328, 567, 577, 592, 606, 613, 614, 615, 616, 633, 640, 641, 657, 659, 692, 707, 709, 844, 845, 854, 855, 856, 948], "out": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 74, 75, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 250, 279, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 579, 580, 581, 582, 584, 585, 586, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 969, 977], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 948], "faq": [14, 15, 16, 128, 130, 131, 132, 133, 144], "reach": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 279, 303, 307, 311, 844, 856], "discord": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 948], "you": [14, 15, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 948, 954], "question": [14, 15, 16, 18, 19, 115, 117, 128, 130, 131, 132, 133, 144, 145, 948], "With": [15, 16, 18, 37, 38, 39, 40, 57, 58, 69, 70, 71, 72, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 102, 103, 115, 117, 128, 156, 158, 159, 160, 161, 162, 165, 167, 171, 206, 209, 242, 251, 254, 279, 301, 317, 329, 330, 333, 334, 343, 346, 347, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 557, 558, 559, 562, 567, 568, 569, 570, 571, 572, 576, 584, 585, 592, 595, 596, 599, 600, 630, 635, 636, 637, 641, 643, 644, 646, 679, 682, 685, 686, 691, 692, 693, 696, 697, 698, 700, 701, 703, 704, 706, 720, 722, 749, 751, 764, 765, 768, 775, 778, 780, 781, 784, 785, 794, 797, 798, 801, 806, 809, 814, 817, 818, 819, 828, 831, 862, 863, 866, 867, 868, 869, 871, 872, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 937, 938, 941], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 69, 70, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 171, 172, 173, 567, 622, 627, 884, 891, 948], "would": [15, 18, 19, 21, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 279, 324, 948], "entir": [15, 16, 19, 69, 70, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 279, 323, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 969, 978], "forgiven": 15, "rais": [15, 19, 69, 70, 125, 128, 130, 242, 250, 329, 417, 420, 516, 519, 567, 577, 602, 611, 625, 632, 638, 692, 716, 719, 723, 755, 757, 780, 820, 823, 824, 827, 879, 882, 904, 909, 912, 917, 920, 937, 938, 941, 943, 946, 981, 982, 985, 989], "an": [15, 16, 18, 19, 20, 21, 24, 27, 28, 65, 66, 69, 70, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 165, 170, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 251, 254, 262, 267, 268, 270, 279, 301, 305, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 578, 579, 580, 582, 584, 593, 594, 595, 607, 611, 613, 614, 615, 616, 636, 637, 638, 641, 657, 659, 674, 676, 677, 679, 682, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 723, 724, 726, 727, 729, 733, 735, 736, 738, 739, 740, 742, 743, 745, 752, 754, 755, 757, 758, 760, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 844, 850, 862, 863, 866, 867, 869, 870, 878, 879, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 958, 959, 981, 982, 985, 986, 987, 989], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 118, 123, 124, 125, 126, 128, 130, 133, 145, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 948, 985, 986, 987, 988, 989, 990], "other": [15, 18, 19, 69, 70, 71, 72, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 168, 169, 171, 172, 173, 329, 421, 424, 567, 568, 571, 573, 641, 652, 867, 873, 875, 884, 891, 904, 925, 928, 933, 936, 948], "strong": [15, 145], "industri": 15, "back": [15, 121, 127, 128, 130, 145, 948, 954, 981, 982, 985, 989], "momentum": 15, "won": [15, 16, 19, 133], "ad": [15, 18, 19, 20, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 567, 631, 632, 692, 707, 709, 780, 794, 797, 991, 992], "just": [15, 16, 18, 19, 114, 115, 117, 118, 125, 128, 130, 131, 145, 904, 905, 908, 969, 978], "make": [15, 16, 18, 19, 20, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 279], "problem": [15, 19, 121, 130], "even": [15, 16, 18, 19, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 329, 516, 519, 524, 527], "wors": 15, "rather": [15, 69, 70, 113, 114, 117, 122, 133, 145, 171, 172, 173, 279, 323, 567, 613, 614, 616, 641, 657, 659], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 118, 122], "feasibl": 15, "space": [15, 171, 172, 173, 200, 201, 203, 204, 567, 594], "case": [15, 18, 19, 20, 24, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 171, 206, 209, 279, 318, 325, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 388, 391, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 567, 611, 623, 624, 692, 720, 722, 780, 810, 813, 844, 847, 853, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936, 969, 980, 981, 982, 985, 989], "unlik": [15, 115, 122, 279], "charger": 15, "charact": 15, "encod": [15, 131, 567, 594], "instant": [15, 948], "messag": [15, 19, 128, 130, 994, 995], "much": [15, 19, 113, 121, 122, 125, 128, 130, 131], "doe": [15, 19, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 329, 388, 391, 567, 611, 780, 819], "mandat": [15, 117, 125], "adopt": [15, 19, 121], "continu": [15, 16, 116, 117, 145], "own": [15, 16, 18, 114, 128, 145], "signatur": [15, 113, 114, 115, 122, 123, 124, 125, 126, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "replac": [15, 19, 21, 69, 70, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 567, 623, 624, 780, 781, 784, 867, 868], "your": [15, 16, 17, 18, 20, 21, 113, 114, 131, 132, 145, 948], "10": [15, 18, 21, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 122, 128, 130, 131, 171, 194, 203, 204, 205, 279, 329, 368, 371, 372, 375, 400, 403, 437, 440, 457, 460, 465, 468, 540, 543, 567, 585, 595, 622, 627, 641, 661, 662, 663, 664, 679, 685, 692, 701, 703, 704, 706, 730, 732, 749, 751, 780, 798, 801, 806, 809, 819, 862, 863, 866, 867, 868, 869, 870, 871, 879, 882, 884, 885, 904, 905, 908, 909, 912, 985, 987], "100": [15, 16, 98, 99, 131, 132, 133, 145, 329, 540, 543, 869, 871, 948], "despit": [15, 122, 124], "distinct": [15, 114, 122, 125, 127, 884, 885, 886, 890, 892, 948], "still": [15, 69, 70, 114, 117, 123, 130, 132, 145, 948], "believ": [15, 19], "share": [15, 69, 70, 115, 117, 118, 119, 122, 128, 242, 274], "bring": [15, 128, 129], "benefit": [15, 16, 18, 19, 121, 122, 125, 130, 131, 145], "unrel": [15, 19], "what": [15, 16, 19, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 948], "again": [15, 16, 19, 113, 115, 122, 125, 131, 133, 145], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 131], "most": [15, 18, 19, 69, 70, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 692, 707, 709], "technolog": 15, "sector": [15, 329, 339, 342, 352, 355, 364, 367], "full": [15, 16, 19, 71, 72, 114, 123, 126, 128, 145, 171, 242, 262, 329, 437, 440, 457, 460, 679, 685, 692, 736, 738, 740, 742, 743, 745, 862, 863, 866], "success": 15, "reason": [15, 19, 113, 115, 118, 121, 122, 123, 125, 128, 130, 329, 520, 523], "build": [15, 17, 18, 118, 127, 129, 132, 133, 145, 884, 885, 886, 890, 892, 948, 969, 980, 981, 982], "custom": [15, 132], "comput": [15, 16, 18, 69, 70, 118, 122, 128, 131, 145, 279, 323, 329, 343, 346, 368, 371, 380, 383, 388, 391, 409, 412, 413, 416, 433, 436, 437, 440, 453, 456, 457, 460, 481, 484, 485, 488, 489, 492, 493, 496, 499, 502, 504, 507, 508, 511, 567, 579, 580, 582, 585, 586, 641, 643, 646, 648, 650, 652, 653, 655, 661, 663, 665, 667, 669, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 692, 693, 696, 698, 700, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 736, 738, 739, 740, 742, 743, 745, 755, 757, 758, 760, 764, 765, 768, 770, 773, 775, 778, 844, 850, 884, 885, 886, 890, 892, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "thank": [15, 131], "interoper": 15, "compon": [15, 128], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 70, 71, 72, 73, 119, 123, 124, 279, 679, 689, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 985, 989], "pcie": 15, "interfac": [15, 133, 145], "motherboard": 15, "raid": 15, "storag": [15, 131], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 24, 25, 26, 27, 28, 69, 70, 118, 132, 133, 171, 175, 178, 211, 214, 224, 228, 229, 233, 567, 573, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 724, 726, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 844, 846, 856], "factor": [15, 279, 288, 321, 322, 323, 641, 643, 646, 648, 650, 661, 663, 665, 667, 679, 680, 681, 682, 683, 684, 685, 686, 692, 693, 696, 969, 970, 971, 972, 973, 974, 975, 976, 985, 986, 987, 988], "sata": 15, "connect": [15, 18, 132, 133, 969, 979, 980], "host": [15, 145], "bu": 15, "adapt": [15, 641, 665, 667, 985, 988], "devic": [15, 19, 29, 30, 34, 69, 70, 74, 75, 79, 98, 99, 112, 113, 118, 120, 123, 130, 131, 145, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 567, 595, 596, 599, 620, 623, 624, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 958, 959, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "html": [15, 21, 114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "enabl": [15, 18, 19, 69, 70, 71, 72, 73, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [15, 17, 145], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 69, 70, 122, 844, 845, 854, 855], "commun": [15, 17, 19, 20, 145, 948, 954], "network": [15, 118, 122, 128, 132, 144, 679, 688, 948, 955, 969, 981, 982], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 567, 617, 635, 904, 909, 912, 917, 920], "send": 15, "gmail": 15, "outlook": 15, "pop": 15, "email": 15, "ieee": [15, 170, 242, 262, 329, 343, 346, 421, 424, 499, 502, 520, 523, 540, 543], "754": [15, 170, 242, 262, 329, 343, 346, 421, 424, 499, 502, 520, 523, 540, 543], "allow": [15, 128, 145, 171, 200, 201, 203, 204, 567, 617, 981, 982], "calcul": [15, 69, 70, 71, 72, 73, 114, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 404, 407, 417, 420, 421, 424, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 499, 502, 516, 519, 532, 535, 536, 539, 540, 543, 548, 552, 553, 557, 558, 562, 764, 765, 768, 770, 773, 775, 778, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "live": [15, 16], "depend": [15, 18, 19, 114, 120, 122, 123, 128, 145, 242, 248, 329, 330, 333, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 417, 420, 421, 424, 461, 464, 465, 468, 469, 472, 473, 476, 516, 519, 532, 535, 536, 539, 553, 557, 558, 562, 692, 707, 709, 736, 738, 740, 742, 743, 745, 879, 883, 893, 894, 897, 899, 902], "did": [15, 20, 133], "aris": [15, 145], "until": [15, 19, 145, 948], "substanti": [15, 19, 117, 121], "innov": 15, "growth": 15, "usag": [15, 128, 279, 323], "relev": [15, 18, 20, 115, 122, 123, 131, 985, 986, 987, 988, 989, 990], "area": [15, 125, 143, 329, 339, 342, 352, 355, 364, 367, 948], "necess": 15, "parti": [15, 145], "could": [15, 16, 18, 19, 115, 117, 122, 123, 125, 128, 130, 131, 132, 884, 885, 886, 890, 892], "easili": [15, 19, 131, 132, 133, 145, 948], "engag": [15, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [15, 122, 279], "effect": [15, 114, 121, 122, 126, 145, 171, 206, 209, 641, 669, 671, 904, 925, 928, 933, 936], "2015": 15, "sinc": [15, 18, 19, 145], "alongsid": 15, "machin": [15, 18, 118, 144, 242, 262, 265, 329, 433, 436, 692, 724, 726, 733, 735], "given": [15, 16, 18, 19, 20, 21, 69, 70, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 171, 172, 173, 180, 200, 201, 203, 204, 279, 312, 318, 320, 321, 322, 323, 325, 328, 567, 585, 586, 596, 599, 623, 624, 639, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 680, 681, 682, 683, 684, 685, 686, 692, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 794, 797, 798, 801, 806, 809, 814, 817, 819, 832, 835, 844, 851, 852, 867, 869, 870, 872, 873, 875, 878, 893, 899, 902, 958, 959], "frame": [15, 144], "less": [15, 19, 35, 36, 69, 70, 80, 81, 115, 122, 126, 127, 128, 329, 335, 338, 339, 342, 348, 351, 360, 363, 392, 395, 461, 464, 465, 468, 473, 476, 516, 519, 520, 523, 528, 531, 540, 543, 692, 724, 726, 733, 735, 758, 760, 867, 873, 875, 904, 933, 936], "matur": [15, 145], "state": [15, 114, 126, 127, 128, 129, 131, 144, 329, 499, 502, 679, 689, 948, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "than": [15, 19, 69, 70, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 171, 172, 173, 242, 262, 279, 323, 329, 335, 338, 339, 342, 348, 351, 360, 363, 376, 379, 384, 387, 392, 395, 425, 428, 429, 432, 461, 464, 465, 468, 473, 476, 497, 516, 519, 520, 523, 528, 531, 540, 543, 563, 566, 567, 613, 614, 616, 641, 657, 659, 692, 698, 700, 716, 719, 724, 726, 733, 735, 758, 760, 780, 781, 784, 798, 801, 820, 823, 867, 873, 875, 884, 885, 886, 890, 892, 904, 921, 924, 925, 928, 929, 932, 933, 936], "preced": [15, 132], "mention": [15, 18, 19, 115, 118, 125, 126], "aros": 15, "70": [15, 692, 730, 732, 904, 905, 908], "80": [15, 692, 730, 732, 904, 905, 908], "90": [15, 98, 99, 329, 388, 391, 524, 527, 692, 730, 732, 869, 871, 904, 905, 908], "effort": [15, 17, 145], "stage": [15, 17, 19, 21, 112, 948], "complet": [15, 19, 20, 69, 70, 121, 122, 130, 131, 692, 736, 738], "natur": [15, 115, 121, 122, 144, 329, 417, 420, 461, 464, 469, 472, 692, 739], "like": [15, 18, 19, 21, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 641, 657, 659, 867, 873, 875, 948], "certainli": 15, "mission": [15, 948], "creat": [15, 17, 18, 19, 21, 69, 70, 123, 124, 125, 128, 129, 132, 143, 144, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 279, 288, 289, 567, 595, 596, 599, 620, 623, 624, 635, 641, 676, 867, 868, 869, 870, 873, 875, 948, 954, 958, 959, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 118, 122, 128, 133, 279, 288, 289, 318, 328], "ourselv": 15, "lead": [15, 16, 69, 70, 71, 72, 73, 145, 692, 736, 738, 743, 745], "quansight": 15, "compani": 15, "made": [15, 19, 20, 122, 125, 128, 130], "organ": [15, 113, 118, 121, 122], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 884, 885, 886, 890, 892], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 128, 133], "sympi": 15, "rai": [15, 329, 360, 363], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 69, 70, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 171, 172, 173, 175, 178, 211, 214, 567, 606, 640, 692, 758, 760, 844, 845, 867, 873, 875, 879, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 951, 953, 969, 979, 980, 983, 984], "member": [15, 19], "googl": [15, 948], "octoml": 15, "einop": [15, 69, 70, 567, 589, 590, 591], "further": [15, 16, 19, 21, 115, 121, 127, 131, 132, 948], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 98, 99, 112, 122, 131, 567, 576, 584, 679, 680, 681, 682, 683, 684, 685, 686, 692, 704, 706, 730, 732, 869, 871, 948, 954], "shaw": 15, "co": [15, 35, 36, 80, 81, 128, 144, 329, 567, 594, 948], "intel": 15, "togeth": [15, 69, 70, 121, 122, 132, 133, 145, 991, 992], "major": [15, 123, 124, 145, 879, 882], "involv": [15, 17, 21, 112, 123, 133, 242, 270, 329, 343, 346, 499, 502, 948, 954], "anoth": [15, 18, 19, 69, 70, 118, 122, 123, 130, 133, 171, 189, 192, 242, 249, 251, 254], "promis": 15, "sign": [15, 18, 35, 36, 80, 81, 129, 133, 171, 172, 173, 329, 330, 333, 343, 346, 360, 363, 384, 387, 499, 502, 520, 523, 692, 739, 884, 885, 886, 890, 892, 904, 921, 924, 929, 932], "pursuit": 15, "unif": [15, 17, 130, 948, 954], "clearli": [15, 20, 115], "lot": [15, 16, 120, 130, 145], "thought": [15, 18, 19, 126], "care": [15, 19, 133], "attent": [15, 19, 121, 122, 679, 690, 691, 969, 980], "gone": [15, 127], "simplifi": [15, 128, 129, 130, 132], "compat": [15, 126, 145, 242, 250, 329, 343, 346, 360, 363, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 409, 412, 429, 432, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 548, 552, 692, 724, 726, 733, 735, 740, 742, 749, 751, 755, 757, 758, 760, 780, 810, 813, 879, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948], "excit": [15, 17, 112, 948], "complianc": 15, "hope": [15, 145], "due": [15, 18, 122, 125, 329, 499, 502], "suit": [15, 18, 112, 116, 117, 131, 144], "some": [15, 16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 329, 421, 424, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 677, 679, 687, 948, 969, 977], "motiv": [15, 130], "great": [15, 16, 117, 128, 130], "convinc": 15, "celebr": 15, "encourag": [15, 144, 145, 948, 954], "foundat": 15, "point": [16, 19, 114, 115, 121, 125, 126, 128, 130, 131, 144, 170, 171, 172, 173, 180, 186, 187, 194, 216, 217, 234, 236, 242, 248, 262, 267, 270, 329, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 692, 693, 696, 701, 703, 707, 709, 710, 712, 713, 715, 724, 726, 733, 735, 736, 738, 740, 742, 743, 745, 758, 760, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "mai": [16, 18, 19, 122, 130, 132, 171, 172, 173, 189, 192, 279, 324, 329, 409, 412, 437, 440, 457, 460, 485, 488, 489, 492, 567, 588, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920], "ask": [16, 128, 130, 145, 948], "perfectli": 16, "happi": [16, 18, 145], "abund": 16, "better": [16, 112, 127, 130, 131, 132], "ll": [16, 17, 19, 115, 122, 125, 131], "give": [16, 18, 19, 112, 114, 115, 119, 126, 130, 780, 810, 813], "two": [16, 71, 72, 114, 115, 117, 121, 122, 127, 131, 133, 171, 172, 173, 186, 187, 206, 209, 224, 228, 229, 233, 242, 269, 274, 329, 384, 387, 524, 527, 567, 575, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 780, 828, 831, 884, 885, 886, 890, 891, 892, 948], "streamlin": 16, "workflow": [16, 19, 131, 143, 948], "save": [16, 69, 70, 145, 567, 628, 981, 982], "week": [16, 19, 20, 948], "let": [16, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 904, 913, 916, 925, 928, 929, 932, 933, 936, 948], "sai": [16, 18, 120, 130], "deepmind": 16, "releas": [16, 18, 20, 948], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 125, 131, 904, 925, 928, 933, 936], "perceiverio": 16, "happen": [16, 18, 19, 131], "slew": 16, "rush": 16, "f": [16, 21, 112, 122, 128, 131, 133, 329, 433, 436, 567, 608, 612], "g": [16, 112, 122, 145, 242, 247, 270, 279, 295, 867, 872, 873, 875, 884, 885, 886, 890, 892, 904, 909, 912, 917, 920, 921, 924, 929, 932], "inevit": 16, "deviat": [16, 862, 863, 866, 867, 872, 904, 925, 928, 983, 984], "origin": [16, 69, 70, 71, 72, 73, 119, 120, 123, 128, 130, 329, 360, 363, 692, 720, 722, 780, 810, 813, 814, 817], "often": [16, 118, 145], "erron": 16, "train": [16, 118, 122, 124, 131, 132, 133, 143, 144, 145, 641, 643, 646, 648, 650, 661, 663, 948], "poor": 16, "converg": 16, "perform": [16, 69, 70, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 171, 200, 201, 203, 204, 279, 567, 585, 589, 590, 591, 609, 610, 611, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 687, 689, 692, 743, 745, 840, 841, 842, 843, 844, 851, 852, 937, 938, 941, 943, 946], "issu": [16, 17, 20, 128, 130, 132, 145], "etc": [16, 18, 19, 20, 65, 66, 69, 70, 110, 111, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 171, 200, 201, 203, 204, 567, 595, 596, 599, 620, 623, 624, 867, 868, 869, 870, 873, 875, 884, 885, 886, 890, 892, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "publish": [16, 145], "manag": [16, 17, 125, 145, 279], "get": [16, 17, 18, 20, 69, 70, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 242, 260, 261, 262, 265, 279, 288, 289, 298, 299, 312, 313, 318, 322, 325, 328, 567, 574, 601, 602, 603, 622, 948, 954, 969, 978], "work": [16, 18, 19, 20, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 948, 954], "repositori": [16, 18, 19, 21, 116], "pull": [16, 17, 18, 21, 113, 145], "request": [16, 17, 113, 279, 315], "confus": [16, 125], "do": [16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 329, 520, 523, 567, 611, 641, 657, 659, 677, 844, 845, 854, 855, 856], "don": [16, 18, 19, 20, 65, 66, 110, 111, 123, 132, 145], "expect": [16, 145, 567, 574, 948], "codebas": [16, 17, 112, 113, 125, 127, 279, 321, 322, 948], "total": [16, 17, 19, 69, 70, 71, 72, 73, 115, 117, 124, 131, 132, 145, 279, 325, 879, 882, 904, 925, 928, 933, 936], "hour": 16, "spent": 16, "spin": 16, "off": [16, 127, 692, 704, 706, 752, 754], "test": [16, 18, 20, 112, 115, 145, 242, 267, 268, 329, 441, 444, 445, 448, 449, 452, 937, 938, 941, 943, 946], "error": [16, 18, 69, 70, 117, 121, 124, 126, 130, 145, 156, 157, 279, 329, 413, 416, 904, 909, 912, 917, 920, 981, 982, 985, 989], "iter": [16, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 122, 128, 131, 168, 169, 279, 301, 302, 304, 305, 306, 307, 310, 323, 567, 568, 571, 624, 629, 780, 790, 793, 806, 809, 819, 832, 835, 836, 839, 844, 845, 846, 850, 854, 855, 856], "address": [16, 19, 20, 121, 128], "sake": 16, "singl": [16, 19, 69, 70, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 279, 288, 289, 308, 309, 310, 311, 567, 637, 640, 867, 872, 873, 875, 884, 885], "multipl": [16, 19, 69, 70, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 115, 118, 122, 145, 329, 343, 347, 499, 502, 567, 568, 570, 571, 572, 596, 600, 617, 692, 693, 696, 697, 713, 715, 780, 781, 784, 785, 814, 817, 818, 819, 862, 863, 866, 869, 871, 879, 880, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 969, 979], "line": [16, 18, 115, 121, 129, 130, 131, 132, 143, 948, 954], "convert": [16, 24, 25, 26, 27, 28, 69, 70, 121, 128, 145, 146, 154, 171, 175, 178, 211, 214, 242, 246, 247, 279, 295, 296, 297, 298, 318, 325, 328, 567, 630, 636, 637, 692, 761, 763, 844, 846, 856, 857, 959], "directli": [16, 19, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 844, 856], "graph": [16, 118, 122, 129, 145, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 884, 885, 886, 890, 892, 981, 982], "guarante": [16, 121, 145, 884, 885], "turn": [16, 115, 122], "4": [16, 21, 35, 36, 45, 46, 49, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 171, 195, 198, 206, 209, 219, 222, 237, 241, 242, 251, 253, 254, 255, 279, 301, 317, 329, 330, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 360, 363, 368, 371, 388, 391, 392, 394, 395, 400, 403, 425, 427, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 556, 557, 558, 559, 561, 562, 567, 576, 585, 594, 595, 596, 598, 599, 600, 630, 635, 641, 643, 645, 646, 647, 679, 682, 683, 684, 686, 689, 691, 692, 693, 694, 696, 698, 700, 701, 703, 704, 706, 713, 715, 724, 726, 730, 732, 749, 751, 752, 754, 764, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 816, 817, 818, 819, 828, 831, 862, 863, 866, 867, 868, 869, 871, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 948, 985, 986, 987, 988, 990], "step": [16, 18, 19, 21, 39, 40, 69, 70, 74, 75, 84, 85, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 171, 172, 173, 174, 200, 201, 203, 204, 279, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 661, 662, 663, 664, 665, 667, 669, 671, 840, 841, 842, 843, 948, 985, 986, 987, 988, 989, 990], "take": [16, 17, 18, 19, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 329, 388, 391, 948, 954], "few": [16, 19, 20, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 948, 954], "second": [16, 18, 115, 125, 130, 242, 269, 274, 279, 310, 329, 343, 346, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 409, 412, 429, 432, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 548, 552, 567, 575, 622, 627, 641, 643, 646, 648, 650, 661, 663, 692, 698, 700, 704, 706, 707, 709, 716, 719, 730, 732, 736, 738, 743, 745, 749, 751, 755, 757, 780, 824, 827, 828, 831, 840, 842, 884, 885, 886, 890, 985, 986, 987], "automat": [16, 18, 19, 118, 122, 126, 127, 128, 129, 132, 133, 948], "convers": [16, 25, 26, 27, 28, 69, 70, 127, 129, 133, 144, 145, 948, 954], "everyon": [16, 17, 19, 145], "regardless": [16, 17, 69, 70, 130, 133, 168, 169], "wouldn": 16, "nice": [16, 117], "write": [16, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 279, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 586, 589, 590, 591, 593, 595, 596, 599, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 883, 884, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "onc": [16, 18, 19, 122, 123, 124, 128, 131, 145, 279, 323, 692, 713, 715, 743, 745, 867, 868], "know": [16, 19, 884, 885, 886, 890, 892], "among": [16, 69, 70, 117], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 118, 128], "understand": [16, 18, 19, 20, 21, 112, 114, 115, 116, 126, 127], "pattern": [16, 69, 70, 114, 123, 567, 589, 590, 591], "hasn": 16, "chang": [16, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 116, 117, 122, 128, 132, 145, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 279, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 692, 693, 694, 695, 697, 698, 700, 780, 781, 782, 783, 785, 810, 813, 814, 815, 816, 818, 844, 846, 856, 869, 871, 886, 887, 888, 889, 948, 954], "now": [16, 18, 21, 69, 70, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 969, 980, 981, 982], "spend": 16, "torchvis": 16, "probabl": [16, 679, 687, 867, 868, 969, 977], "sonnet": 16, "about": [16, 18, 19, 116, 127, 128, 132, 133, 145, 242, 262, 265], "next": [16, 18, 19, 20, 21, 114, 115, 119, 120, 130, 131, 242, 262, 948, 981, 982, 985, 986, 987, 988, 989, 990], "everyth": [16, 19, 20, 129, 145], "zero": [16, 69, 70, 71, 72, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 171, 180, 186, 187, 206, 209, 224, 228, 229, 233, 237, 241, 242, 248, 329, 343, 346, 348, 351, 376, 379, 400, 403, 421, 424, 425, 428, 485, 488, 489, 492, 497, 498, 499, 502, 504, 507, 508, 511, 516, 519, 520, 523, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 585, 620, 623, 624, 641, 643, 646, 648, 650, 661, 663, 665, 667, 679, 687, 692, 693, 696, 701, 703, 716, 719, 724, 726, 733, 735, 755, 757, 758, 760, 780, 794, 797, 798, 801, 806, 809, 814, 817, 836, 839, 862, 863, 866, 867, 869, 870, 879, 880, 881, 882, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 985, 986, 987, 988], "need": [16, 18, 19, 20, 21, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 567, 579, 580, 582, 780, 781, 784, 794, 797], "said": 16, "high": [16, 20, 69, 70, 98, 99, 131, 867, 869, 870, 871, 873, 874, 875, 876], "level": [16, 17, 20, 118, 127, 128, 131, 132, 133, 145], "optim": [16, 125, 129, 131, 133, 144, 279, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 840, 841, 842, 843, 948, 986, 987, 988, 990], "trainer": [16, 143, 145, 948], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 133], "flax": [16, 133, 145], "trax": [16, 133], "objax": [16, 133], "idea": [16, 144], "fulli": [16, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 969, 979, 980], "offer": [16, 132], "strongli": [17, 18, 948, 954], "welcom": [17, 18, 19, 948, 954], "absolut": [17, 69, 70, 329, 330, 333, 692, 739], "skill": 17, "whether": [17, 18, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 110, 111, 123, 125, 126, 156, 157, 168, 169, 242, 248, 260, 266, 267, 268, 278, 279, 298, 299, 310, 314, 315, 318, 319, 323, 326, 328, 329, 449, 452, 567, 568, 571, 575, 576, 585, 588, 592, 594, 604, 606, 608, 611, 612, 613, 614, 615, 616, 617, 629, 633, 639, 640, 641, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 674, 679, 687, 692, 707, 709, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 857, 867, 868, 937, 938, 941, 943, 946, 958, 959, 969, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 69, 70, 74, 75, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 171, 172, 173, 174, 200, 201, 202, 203, 204, 205, 279, 294], "aspect": [17, 131, 948], "guid": [17, 18, 19, 117, 948], "through": [17, 19, 20, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 329, 360, 363], "journei": [17, 948, 954], "inclusvi": 17, "big": [17, 145], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 127, 948], "split": [17, 19, 69, 70, 127, 128, 145, 279, 288, 304, 305, 306, 307, 321, 322, 323, 567, 617, 780, 948], "section": [17, 19, 20, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 884, 885, 886, 890, 892], "below": [17, 18, 20, 21, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 171, 224, 228, 229, 233, 329, 368, 371, 388, 391, 400, 403, 524, 527, 558, 562, 692, 701, 703, 704, 706, 752, 754, 780, 794, 797, 798, 801, 884, 885, 893, 894, 897, 948], "best": [17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 567, 617], "go": [17, 18, 19, 20, 112, 113, 115, 122, 127, 131, 145, 844, 855], "finish": [17, 18, 112, 948], "dive": [17, 19, 20, 127, 130, 131, 145, 948], "right": [17, 18, 19, 69, 70, 112, 115, 131, 329, 376, 379, 384, 387, 692, 743, 745], "environ": [17, 19, 21, 144], "basic": [17, 20, 21], "fork": [17, 18, 567, 618], "doc": [17, 20, 114, 126, 128, 131, 132, 948], "document": [17, 19, 129, 131, 133], "local": [17, 18, 21, 118], "task": [17, 19, 144, 840, 841, 842, 843, 948], "help": [17, 18, 115, 119, 121, 122, 130, 131, 132, 143, 567, 573, 904, 929, 932, 948], "video": [17, 19, 114, 115, 126], "realli": [18, 122, 145], "contribut": [18, 19, 20, 128, 954], "toward": [18, 128, 780, 814, 817, 948, 954], "page": [18, 19, 129, 133, 143, 948, 954], "explain": [18, 19, 20, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 948, 954], "main": [18, 21, 120, 122, 171, 186, 187, 224, 228, 229, 233, 692, 704, 706, 752, 754], "prefer": [18, 122], "mode": [18, 45, 46, 69, 70, 115, 122, 145, 168, 169, 279, 308, 309, 310, 311, 323, 329, 343, 346, 499, 502, 692, 736, 737, 738], "git": [18, 19], "recurs": [18, 21, 24, 25, 26, 27, 28, 69, 70, 118, 122, 132, 145, 844, 845, 846, 854, 855, 856], "submodul": [18, 19, 20, 21, 116, 117, 118, 124, 127, 128, 132, 948, 983, 984, 991, 992], "com": 18, "unifyai": [18, 21], "http": [18, 114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 641, 643, 646, 648, 650, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "gh": 18, "your_fold": 18, "id": [18, 121, 122, 279, 298, 981, 982], "cours": [18, 19, 115, 131, 145], "whatev": [18, 145], "integr": [18, 117, 242, 248], "familiar": [18, 20], "decid": [18, 69, 70, 844, 855], "sure": [18, 20, 116], "elig": 18, "free": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 948], "student": 18, "licenc": 18, "peopl": [18, 19, 112], "seem": [18, 132, 145], "miss": [18, 115, 117, 121, 122, 985, 989], "add": [18, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 80, 81, 82, 83, 110, 111, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 329, 330, 333, 347, 568, 572, 862, 863, 866, 948, 954, 983, 984], "explicit": [18, 21, 122, 123, 125, 128, 145], "remind": 18, "channel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 567, 594, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979], "pace": 18, "updat": [18, 19, 20, 21, 69, 70, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 279, 288, 567, 611, 623, 624, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 689, 840, 841, 842, 844, 851, 852, 860, 861, 958, 959, 985, 986, 987, 988, 989, 990], "suggest": [18, 19, 113], "latest": [18, 20, 21, 114, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 969, 978], "packag": [18, 21, 145], "ensur": [18, 19, 117, 121, 123, 126, 567, 611], "align": [18, 69, 70, 128, 130, 948, 954], "accord": [18, 21, 69, 70, 118, 123, 242, 251, 254, 262, 329, 343, 346, 384, 387, 499, 502, 567, 595, 623, 624, 692, 755, 757, 780, 790, 793, 836, 839, 904, 925, 928, 933, 936], "stabl": [18, 59, 60, 104, 105, 128, 145, 567, 602, 603, 625, 626, 631, 632, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903], "pypi": [18, 20, 145], "mayb": [18, 24, 27, 28, 128, 130], "person": [18, 19], "experi": [18, 129, 131, 145], "avoid": [18, 19, 117, 119, 120, 122, 130, 279, 329, 421, 424], "pip": [18, 144, 948], "instal": [18, 21, 144, 948], "abil": [18, 129, 145], "certain": [18, 69, 70, 145, 171, 172, 173, 200, 201, 203, 204], "perhap": [18, 130, 131, 132, 145], "keep": [18, 19, 69, 70, 116, 122, 129, 131, 133, 567, 639], "track": [18, 19, 279, 844, 856, 981, 982], "termin": [18, 19, 21, 69, 70, 71, 72, 73, 122, 128, 131], "run": [18, 21, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 279, 288, 641, 643, 646, 648, 650, 661, 663, 840, 841, 842, 843, 969, 980, 981, 982], "command": [18, 21, 948], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 114, 117, 128, 130, 131, 133, 168, 169, 567, 573, 692, 707, 709, 736, 738, 743, 745, 884, 885, 886, 890], "3": [18, 21, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 170, 171, 195, 198, 206, 209, 219, 222, 234, 236, 237, 241, 242, 251, 252, 253, 254, 255, 279, 298, 301, 317, 324, 329, 330, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 368, 371, 384, 387, 388, 391, 392, 394, 395, 400, 403, 417, 420, 425, 426, 427, 428, 433, 436, 437, 440, 453, 456, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 556, 557, 558, 559, 561, 562, 567, 568, 569, 570, 575, 576, 585, 592, 595, 596, 597, 598, 599, 600, 629, 630, 635, 637, 641, 643, 644, 645, 646, 647, 679, 680, 681, 682, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 713, 715, 724, 726, 730, 732, 743, 745, 749, 751, 752, 754, 761, 763, 764, 765, 768, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 816, 817, 818, 819, 820, 823, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 929, 932, 937, 938, 941, 948], "8": [18, 21, 49, 50, 71, 72, 80, 81, 98, 99, 115, 122, 127, 131, 156, 160, 279, 301, 329, 343, 346, 347, 368, 371, 392, 395, 400, 403, 437, 440, 457, 460, 497, 498, 524, 527, 540, 543, 544, 547, 558, 562, 567, 576, 595, 641, 643, 646, 679, 686, 692, 698, 700, 701, 703, 704, 706, 730, 732, 749, 751, 764, 765, 768, 780, 781, 782, 784, 798, 801, 806, 809, 819, 867, 868, 869, 870, 871, 879, 883, 884, 885, 904, 905, 908, 948, 969, 980], "activ": [18, 19, 21, 23, 65, 66, 68, 110, 111, 113, 132, 157, 158, 159, 160, 161, 162, 165, 167, 948, 956, 957], "setup": 18, "click": [18, 19, 114, 948], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 133, 279, 324, 329, 485, 488, 489, 492, 879, 883, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920], "left": [18, 19, 69, 70, 115, 123, 329, 376, 379, 692, 707, 709, 720, 722, 743, 745, 879, 880, 948], "panel": 18, "select": [18, 19, 117, 128, 130, 133, 145], "drop": [18, 145], "down": [18, 130], "path": [18, 21], "manual": [18, 19, 117, 132, 844, 845, 854, 855], "builtin": [18, 21, 130, 132], "requir": [18, 21, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 168, 169, 329, 540, 543, 692, 707, 709, 780, 824, 827, 958, 959], "cmd": [18, 21], "directori": [18, 19, 21, 567, 628], "folder": [18, 19, 21, 113, 116, 117, 118], "file": [18, 19, 21, 69, 70, 113, 114, 118, 119, 121, 122, 128, 131, 567, 628, 981, 982], "abov": [18, 19, 21, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 499, 502, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 707, 709, 752, 754, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 867, 869, 870, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 921, 924, 925, 928, 929, 932, 937, 938, 941], "m": [18, 19, 21, 112, 128, 171, 206, 209, 224, 228, 229, 233, 567, 576, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 867, 872, 873, 875], "python3": [18, 21], "script": [18, 19, 21, 115, 128, 145], "bat": [18, 19, 21], "OR": [18, 19, 21, 329, 380, 383, 489, 492, 937, 943, 946], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 70, 71, 72, 73, 114, 121, 122, 279, 313], "os": 18, "note": [18, 19, 113, 114, 115, 122, 329, 520, 523, 692, 707, 709, 743, 745, 780, 824, 827, 884, 886, 890, 904, 913, 916], "tick": [18, 19], "abl": [18, 19, 69, 70, 118, 123, 125, 130, 133], "To": [18, 115, 118, 122, 131, 132, 133, 948], "ivy_test": [18, 19], "test_array_api": [18, 19, 116, 117], "cd": [18, 19, 21], "r": [18, 69, 70, 567, 576, 639, 692, 736, 738, 761, 763], "txt": 18, "visual": [18, 145], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 127, 329, 421, 424], "conflict": [18, 19, 131], "addit": [18, 19, 69, 70, 113, 114, 117, 122, 123, 130, 131, 133, 279, 324, 329, 343, 346, 567, 589, 590, 591, 862, 863, 866, 969, 979], "yet": [18, 20, 122], "particular": [18, 19, 113, 125, 329, 330, 333], "system": [18, 145, 692, 740, 742], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 42, 87, 113, 128, 129, 131, 133, 144, 679, 680, 681, 682, 683, 685, 686, 948], "profession": 18, "execut": [18, 21, 122, 125, 128, 130, 133, 145, 567, 638], "deploy": 18, "top": [18, 19, 117, 131, 132, 948], "press": [18, 131, 948], "ok": 18, "correctli": [18, 69, 70, 117, 122, 123, 126, 132, 145, 692, 720, 722, 879, 880], "caus": [18, 19, 115, 117, 122, 125, 145], "earlier": [18, 19], "might": [18, 19, 113, 117, 120, 128, 130, 131, 567, 588], "necessari": [18, 115, 119, 122, 125], "virtualis": 18, "detail": [18, 19, 20, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 171, 189, 192, 884, 885, 886, 890, 892], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 69, 70, 82, 83, 171, 206, 209, 567, 579, 580, 581, 582, 679, 687, 692, 720, 722, 758, 760, 969, 977], "keyr": 18, "fssl": 18, "download": [18, 117], "gpg": 18, "dearmor": 18, "o": [18, 128, 567, 576], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 133, 145], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 65, 66, 69, 70, 84, 85, 102, 103, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 171, 172, 173, 175, 178, 180, 206, 207, 209, 211, 214, 216, 217, 234, 236, 242, 249, 279, 288, 289, 298, 300, 301, 304, 305, 308, 309, 323, 567, 576, 630, 635, 639, 643, 645, 647, 679, 680, 681, 682, 683, 684, 685, 686, 692, 749, 751, 780, 786, 789, 798, 801, 819, 824, 827, 844, 845, 846, 850, 855, 856, 862, 863, 866, 879, 882, 884, 886, 887, 889, 890, 948, 969, 970, 971, 972, 973, 974, 975, 976], "dev": [18, 69, 70, 71, 73, 118, 124, 128, 130, 132, 279, 288, 313], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 122, 145], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 144, 279], "post": [18, 133, 862, 863, 866, 948, 954], "It": [18, 19, 21, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 279, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 589, 590, 591, 593, 596, 599, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 883, 884, 892, 893, 894, 897, 899, 902, 937, 938, 941, 943, 946], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [18, 113, 126, 131, 948], "vm": 18, "azur": 18, "cloud": [18, 144], "mean": [18, 19, 61, 62, 69, 70, 106, 107, 110, 111, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 279, 308, 309, 310, 311, 323, 567, 590, 840, 841, 842, 843, 844, 850, 867, 872, 884, 885, 904, 948, 960], "configur": [18, 19, 21, 69, 70, 123, 279, 322, 844, 857], "defin": [18, 20, 113, 114, 123, 126, 130, 132, 145, 329, 499, 502, 520, 523, 567, 620, 692, 698, 700, 707, 709, 740, 742, 867, 869, 870, 904, 909, 912, 913, 916, 917, 920], "dockerfil": [18, 21], "longer": [18, 123, 125], "worri": 18, "platform": 18, "agnost": [18, 121, 126, 128, 130, 133, 145, 948], "usual": 18, "studio": 18, "favourit": 18, "extens": [18, 19, 114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 692, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "theme": 18, "too": [18, 19, 145, 329, 343, 346, 499, 502], "done": [18, 19, 115, 117, 131], "unsupport": [18, 123, 242, 263, 264], "old": [18, 69, 70, 125], "slow": 18, "ipad": 18, "long": [18, 19, 115, 679, 689], "browser": 18, "cool": [18, 113], "requisit": 18, "head": [18, 122, 679, 690, 948, 969, 980], "pane": [18, 19], "readi": [18, 20], "begin": [18, 844, 845, 855], "outlin": [18, 19, 20, 112, 114, 117, 118, 122, 125, 130], "green": [18, 19, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 994, 995], "dropdown": 18, "tab": [18, 131, 948], "master": [18, 19, 122], "vs": 18, "view": [18, 19, 171, 189, 192, 679, 682, 686], "log": [18, 19, 35, 36, 80, 81, 118, 122, 125, 128, 131, 171, 203, 204, 329, 469, 472, 477, 480, 692, 739, 948], "built": [18, 129, 171, 172, 173, 279, 969, 980, 981, 982], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 98, 99, 115, 329, 368, 371, 524, 527, 679, 682, 692, 704, 706, 730, 732, 749, 751, 780, 814, 817, 862, 863, 866, 867, 869, 870, 871, 879, 882, 884, 885, 904, 905, 908], "minut": 18, "launch": 18, "12": [18, 98, 99, 115, 122, 329, 368, 371, 388, 391, 400, 403, 524, 527, 567, 585, 603, 641, 643, 646, 692, 704, 706, 730, 732, 749, 751, 780, 798, 801, 806, 809, 814, 817, 862, 863, 866, 867, 869, 870, 871, 879, 883, 884, 885, 904, 905, 908], "output": [18, 69, 70, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 279, 288, 289, 323, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 578, 579, 580, 582, 585, 586, 589, 590, 591, 593, 595, 596, 599, 607, 620, 623, 624, 641, 652, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 844, 857, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 883, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980], "That": [18, 19, 130, 131, 132, 329, 520, 523], "alreadi": [18, 19, 69, 70, 119, 122, 126, 130, 145, 279, 329, 392, 395, 425, 428, 499, 502, 524, 527, 563, 566, 692, 730, 732, 948], "refer": [18, 19, 117, 118, 123, 126, 145, 171, 186, 187, 329, 421, 424, 469, 472, 641, 643, 646, 648, 650, 692, 755, 757, 761, 763, 904, 925, 928, 933, 936, 937, 938, 941, 943, 946, 969, 979], "approach": [18, 19, 117, 118, 122, 130, 131, 145], "colour": 18, "applic": [18, 123, 124, 132, 679, 690, 691, 844, 850, 856], "good": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 18, "vscode": 18, "show": [18, 19, 69, 70, 115, 125, 144, 145, 948], "explor": [18, 129, 133, 144], "troubleshoot": 18, "sometim": [18, 19], "ever": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [18, 131, 132, 329, 540, 543, 544, 547, 679, 685, 686, 692, 730, 732, 904, 905, 908, 948, 969, 980], "bit": [18, 115, 118, 122, 130, 242, 261, 262, 265, 329, 372, 375, 376, 379, 384, 387, 904, 921, 924, 929, 932], "usr": 18, "more": [18, 19, 20, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 171, 172, 173, 242, 249, 329, 421, 424, 692, 716, 719, 780, 798, 801, 884, 885, 886, 890, 892, 948], "nutshel": [18, 126], "hook": 18, "lint": 18, "accept": [18, 19, 24, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 485, 488, 489, 492, 508, 511, 520, 523, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 913, 916, 937, 938, 941, 948], "fix": [18, 19], "fail": [18, 20, 116, 117, 128, 130], "attempt": [18, 145], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 242, 251, 252, 253, 255, 270, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 567, 568, 569, 570, 572, 589, 590, 591, 596, 597, 598, 600, 641, 643, 644, 645, 647, 661, 663, 665, 667, 679, 688, 690, 691, 692, 693, 694, 695, 697, 724, 726, 733, 735, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 785, 814, 815, 816, 818, 824, 827, 840, 841, 842, 844, 850, 853, 856, 857, 862, 863, 866, 869, 871, 886, 887, 888, 889, 948, 955, 956, 957, 983, 984], "proce": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [18, 19, 114, 118, 123, 124, 128], "properli": [18, 112], "enter": [18, 19, 121, 123, 124, 126, 279], "unsur": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 948], "server": [19, 948], "appropri": [19, 65, 66, 110, 111, 120, 329, 343, 346, 499, 502, 879, 880], "context": [19, 115, 122, 123, 124, 279, 567, 618, 679, 690, 969, 980], "suitabl": [19, 113, 122], "quick": [19, 112, 132], "alwai": [19, 20, 69, 70, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 242, 248, 329, 343, 346, 499, 502, 567, 611, 641, 657, 659, 674], "correct": [19, 20, 61, 62, 106, 107, 112, 118, 122, 123, 124, 126, 242, 274, 780, 781, 784, 904, 925, 926, 927, 928, 933, 934, 935, 936, 948], "tendenc": 19, "gener": [19, 20, 21, 38, 65, 66, 69, 70, 83, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 168, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 520, 523, 540, 543, 544, 547, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 657, 659, 692, 704, 706, 780, 794, 797, 814, 817, 867, 868, 869, 870, 873, 875, 877, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 948, 985, 989], "land": 19, "end": [19, 122, 125, 127, 144, 145, 171, 172, 173, 329, 360, 363, 948, 954], "world": 19, "come": [19, 20, 132, 143, 948, 954], "fly": 19, "hard": [19, 130], "receiv": [19, 117, 123, 124, 279, 288, 289, 567, 574, 617, 969, 979], "respons": [19, 21], "internship": 19, "comment": 19, "trigger": 19, "unansw": 19, "label": [19, 128, 129, 133, 764, 765, 768, 770, 773, 775, 778], "respond": 19, "remov": [19, 20, 21, 69, 70, 114, 117, 118, 123, 125, 133, 692, 704, 706, 716, 719, 752, 754, 780, 820, 823, 840, 841, 842], "someon": [19, 145], "els": [19, 20, 113, 118, 119, 125, 128, 130, 132, 133, 145, 567, 577, 588, 592, 844, 854], "strive": [19, 145], "repli": 19, "newli": [19, 125, 168, 169, 242, 248, 567, 578], "place": [19, 69, 70, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 279, 324, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 609, 610, 611, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941, 985, 986, 987, 988, 989, 990], "bug": [19, 117], "serv": [19, 117, 118, 121, 122, 126, 127, 948], "suspect": 19, "behaviour": [19, 114, 117, 121, 122, 125, 126, 130], "observ": 19, "confid": 19, "noth": [19, 69, 70], "wrong": 19, "someth": [19, 113, 131, 132, 145], "bet": 19, "act": [19, 115, 145], "placehold": [19, 121, 126, 844, 856], "sub": [19, 20, 69, 70, 112, 117, 122, 130, 131, 132, 279, 304, 305, 308, 309, 310, 311, 692, 704, 706, 780, 819, 840, 841, 842, 843, 948], "mark": [19, 117], "ii": [19, 904, 905, 908], "iii": 19, "titl": [19, 948], "issue_numb": 19, "delet": [19, 21], "No": [19, 128], "wait": [19, 69, 70, 71, 72, 73], "progress": [19, 122, 129, 133], "pr": 19, "soon": [19, 122, 143, 145, 948, 954], "partial": [19, 69, 70, 981, 982], "solut": [19, 117, 122, 692, 740, 742], "review": [19, 113], "merg": 19, "everi": [19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 171, 194, 195, 198, 567, 568, 571], "shape": [19, 49, 50, 69, 70, 74, 75, 84, 85, 94, 95, 98, 99, 102, 103, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 218, 219, 222, 224, 228, 229, 233, 234, 235, 236, 237, 241, 242, 248, 249, 250, 279, 291, 319, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 589, 590, 591, 593, 596, 599, 604, 607, 620, 623, 624, 630, 641, 643, 645, 647, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 811, 812, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 882, 883, 887, 889, 893, 894, 897, 899, 902, 904, 905, 908, 937, 938, 941, 943, 946, 948, 969, 971, 972, 973, 974, 975, 976, 983, 984], "move": [19, 69, 70, 113, 279, 324], "within": [19, 24, 27, 28, 117, 132, 145, 171, 172, 173, 867, 873, 875], "7": [19, 21, 35, 36, 49, 50, 71, 72, 80, 81, 98, 99, 115, 118, 122, 125, 156, 158, 159, 279, 301, 329, 330, 333, 343, 344, 345, 346, 347, 368, 371, 372, 375, 388, 391, 392, 395, 400, 403, 417, 420, 425, 428, 437, 440, 457, 460, 497, 498, 524, 527, 540, 543, 553, 557, 558, 562, 567, 576, 585, 595, 641, 643, 646, 648, 650, 661, 663, 679, 685, 686, 691, 692, 698, 700, 701, 703, 704, 706, 730, 732, 749, 751, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 784, 794, 797, 798, 801, 806, 809, 819, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 879, 883, 884, 885, 904, 905, 908], "dai": 19, "close": [19, 114, 329, 421, 424, 524, 527, 692, 743, 745], "likewis": [19, 114, 118, 122, 123, 126, 131], "freed": 19, "flag": [19, 69, 70, 125, 130, 279, 298, 641, 657, 659], "purpos": [19, 21, 115, 117, 118, 120, 121, 122, 126, 127, 130, 329, 421, 424, 948], "remain": [19, 115, 145, 329, 343, 346, 499, 502, 520, 523, 780, 810, 813, 844, 850], "access": [19, 21, 69, 70, 123], "short": [19, 132, 679, 689], "basi": [19, 116, 131], "situat": [19, 133], "alloc": [19, 145, 171, 224, 228, 229, 233, 242, 248, 279], "upon": [19, 115, 117, 125, 145], "period": 19, "prevent": [19, 125, 130, 641, 643, 646, 648, 650, 661, 663, 904, 929, 932, 985, 986, 987], "unabl": 19, "obvious": 19, "never": [19, 122], "reflect": [19, 121], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 130, 133], "becaus": [19, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 19, "limit": [19, 69, 70, 71, 72, 73, 115, 117, 128, 131, 133, 145, 242, 262, 265, 567, 579, 580, 582, 780, 781, 784], "me": 19, "unfairli": 19, "definit": [19, 118, 123, 130, 692, 693, 696, 698, 700], "investig": 19, "Then": [19, 21, 130, 145], "practic": [19, 117], "separ": [19, 117, 121, 128, 130, 131], "branch": [19, 122, 145, 168, 169, 329, 360, 363], "simpli": [19, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 329, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 421, 424, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 693, 694, 695, 697, 781, 782, 783, 785, 814, 815, 816, 818, 869, 871, 886, 887, 888, 889], "role": [19, 129], "kept": [19, 69, 70, 71, 72, 73, 125, 840, 841, 842], "date": 19, "upstream": [19, 116], "complic": [19, 128], "root": [19, 21, 131, 329, 540, 543, 867, 868, 872], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 904, 921, 924, 929, 932], "clone": [19, 21, 69, 70, 279, 300, 301, 302, 303], "push": [19, 116], "both": [19, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 269, 329, 330, 333, 343, 346, 348, 351, 392, 395, 425, 428, 508, 511, 516, 519, 540, 543, 544, 547, 553, 557, 567, 595, 641, 643, 646, 679, 682, 691, 692, 693, 696, 698, 700, 704, 706, 716, 719, 755, 757, 780, 814, 817, 862, 863, 866, 884, 886, 890, 904, 909, 912, 937, 938, 941], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 70, 71, 72, 114, 115, 116, 118, 121, 122, 123, 126, 242, 249, 329, 360, 363, 516, 519, 692, 698, 700, 707, 709, 740, 742, 780, 786, 789, 814, 817, 867, 868, 879, 880, 881, 884, 885, 886, 890, 892, 904, 921, 924, 925, 928, 929, 932, 933, 936], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 114, 122, 126, 130], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 118, 120, 121, 128], "inform": [19, 242, 262, 265, 567, 573, 641, 674], "tag": 19, "usu": 19, "describ": [19, 129, 133, 904, 905, 908, 921, 924, 925, 928, 929, 932], "navig": [19, 112], "blame": 19, "revis": 19, "author": [19, 948], "eg": 19, "16": [19, 45, 46, 80, 81, 98, 99, 115, 131, 329, 553, 554, 556, 557, 679, 685, 692, 693, 694, 696, 704, 706, 730, 732, 869, 871, 879, 883, 904, 905, 908], "5": [19, 21, 35, 36, 37, 38, 45, 46, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 171, 195, 198, 206, 209, 219, 222, 234, 236, 237, 241, 242, 251, 253, 254, 255, 279, 301, 317, 329, 330, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 364, 367, 368, 371, 384, 387, 388, 391, 392, 393, 394, 395, 400, 403, 425, 426, 427, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 556, 557, 558, 559, 561, 562, 567, 568, 569, 576, 585, 595, 596, 599, 600, 630, 635, 641, 643, 645, 646, 647, 679, 682, 684, 685, 691, 692, 693, 694, 696, 698, 700, 701, 703, 704, 706, 713, 715, 730, 732, 749, 751, 752, 754, 764, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 816, 817, 818, 819, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 878, 879, 881, 882, 883, 884, 885, 886, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 969, 980], "past": 19, "l": [19, 112, 692, 693, 696, 707, 709, 716, 719, 752, 754], "filepath": [19, 69, 70], "grep": 19, "v": [19, 128, 131, 132, 133, 679, 691, 948, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 989, 991, 992], "commit_id": 19, "handi": 19, "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 115], "previou": [19, 117, 126, 133, 145, 641, 648, 650, 661, 663], "shown": [19, 65, 66, 69, 70, 110, 111, 115, 126, 128, 130, 145, 329, 368, 371, 388, 391, 400, 403, 524, 527, 558, 562, 692, 701, 703, 780, 794, 797, 798, 801, 884, 885, 893, 894, 897], "whenev": [19, 130, 131], "think": [19, 115], "interact": [19, 948], "gain": [19, 127, 132, 960], "quit": [19, 20, 114, 118, 120, 121], "repeat": [19, 49, 50, 69, 70, 94, 95, 114, 115, 119, 121, 122, 567, 591, 780, 832, 835], "yourself": [19, 20, 144], "simpler": [19, 130], "cannot": [19, 119, 123, 133], "least": [19, 115, 118, 121, 692, 716, 719], "final": [19, 114, 115, 118, 121, 123, 125, 128, 130, 131, 171, 200, 201, 203, 204, 567, 594, 969, 980], "tickbox": 19, "lower": [19, 69, 70, 115, 128, 145, 171, 186, 187, 224, 228, 329, 497, 692, 693, 696, 867, 873, 875], "corner": 19, "without": [19, 69, 70, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 567, 622, 627, 780, 810, 813, 844, 846, 884, 885, 886, 890, 892], "span": 19, "intent": [19, 125], "larg": [19, 131, 329, 343, 346, 499, 502], "discourag": 19, "philosophi": 19, "increment": [19, 567, 610], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 948], "wast": 19, "spot": [19, 118], "mistak": 19, "propos": 19, "mountain": 19, "around": [19, 69, 70, 71, 72, 73, 118, 121, 126, 130, 145], "advoc": [19, 145], "individu": [19, 20, 118], "per": [19, 131, 279, 679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "style": [19, 879, 882], "ve": [19, 127, 130, 867, 868, 948], "were": [19, 69, 70, 113, 117, 122], "actual": [19, 112, 118, 125, 127, 130, 132, 145], "aim": [19, 127], "part": [19, 113, 116, 117, 118, 128, 129, 133, 144, 145, 171, 224, 228, 229, 233, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 981, 982], "subsect": 19, "session": [19, 948], "block": [19, 118, 127, 129, 133, 145, 279, 948], "smaller": [19, 128, 133, 780, 781, 784, 814, 817, 904, 921, 924, 929, 932], "edit": 19, "exact": [19, 69, 70, 128, 884, 885], "beauti": 19, "particularli": [19, 131, 145], "concern": [19, 112, 115, 122, 125, 127], "effici": [19, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [19, 117, 145, 884, 885, 886, 890, 892], "undo": 19, "stress": 19, "frequenc": [19, 567, 594], "pycharm": 19, "pytest": [19, 117], "button": 19, "declar": 19, "insid": [19, 21, 113, 123], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 117], "test_funct": 19, "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 69, 70, 242, 257, 258, 259, 271, 272, 273, 279, 292, 293, 567, 583, 587, 605, 641, 673, 678], "q": [19, 145, 679, 691, 692, 707, 709, 736, 738], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "variou": [19, 114, 120, 126, 144], "valu": [19, 49, 50, 57, 58, 69, 70, 71, 72, 73, 94, 95, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 171, 172, 173, 186, 187, 194, 195, 198, 200, 201, 203, 204, 242, 248, 257, 258, 259, 279, 291, 322, 323, 329, 330, 333, 335, 338, 343, 346, 348, 351, 356, 359, 392, 395, 409, 412, 413, 416, 425, 428, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 497, 498, 499, 502, 508, 511, 512, 515, 516, 519, 524, 527, 558, 562, 563, 566, 567, 579, 580, 582, 583, 588, 594, 595, 596, 599, 605, 608, 612, 622, 623, 624, 625, 626, 627, 640, 641, 643, 646, 648, 650, 652, 661, 663, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 690, 691, 692, 724, 726, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 758, 760, 780, 781, 784, 790, 791, 792, 793, 806, 809, 810, 813, 836, 838, 839, 840, 841, 842, 844, 848, 849, 850, 851, 852, 857, 860, 861, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 877, 879, 880, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 969, 970, 971, 972, 973, 974, 975, 976, 980, 981, 982, 983, 984, 985, 986, 987, 989], "cpu": [19, 69, 70, 124, 145, 171, 200, 201, 203, 204, 279, 298, 299, 301, 315, 318, 320, 324, 325, 327, 328, 567, 595, 596, 599, 620, 623, 624, 867, 868, 869, 870, 872, 873, 875, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "gpu": [19, 98, 99, 124, 130, 145, 279, 298, 301, 314, 316, 320, 322, 327, 869, 871], "combin": [19, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 133, 692, 698, 700], "wherebi": [20, 122, 844, 856], "broad": 20, "distribut": [20, 69, 70, 124, 145, 279, 300, 304, 305, 306, 307, 679, 687, 764, 765, 768, 770, 773, 775, 778, 867, 868, 869, 870, 872, 873, 875, 969, 977, 981, 982], "across": [20, 69, 70, 115, 117, 118, 122, 123, 126, 279, 288, 289, 300, 301, 303, 304, 305, 306, 307, 311, 321, 322, 567, 575, 576, 844, 850, 879, 881], "todo": [20, 117], "commit": [20, 117], "NOT": [20, 329, 485, 488], "static": [20, 67, 68, 69, 70, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 118, 145, 162, 166, 168, 169, 251, 255, 330, 334, 343, 347, 553, 554, 558, 559, 568, 572, 596, 600, 693, 697, 781, 785, 814, 818, 869, 871, 886, 887], "method": [20, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 175, 176, 181, 182, 189, 190, 192, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 329, 330, 331, 332, 334, 343, 344, 345, 347, 348, 351, 368, 371, 388, 391, 392, 393, 394, 395, 400, 403, 425, 426, 427, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 558, 559, 560, 561, 562, 567, 568, 569, 570, 572, 583, 584, 595, 596, 597, 598, 600, 623, 624, 635, 637, 641, 643, 644, 645, 647, 661, 663, 665, 667, 679, 685, 691, 692, 693, 694, 695, 697, 698, 700, 701, 703, 764, 765, 768, 780, 781, 782, 783, 785, 794, 797, 798, 801, 806, 809, 814, 815, 816, 818, 819, 828, 831, 844, 845, 855, 856, 857, 862, 863, 866, 867, 869, 871, 872, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 948, 969, 980, 981, 982], "instanc": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 102, 103, 110, 111, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 203, 204, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 251, 252, 253, 254, 279, 288, 320, 329, 330, 331, 332, 333, 343, 344, 345, 346, 348, 351, 368, 371, 388, 391, 392, 393, 394, 395, 400, 403, 425, 426, 427, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 555, 556, 557, 558, 560, 561, 562, 567, 568, 569, 570, 584, 595, 596, 597, 598, 611, 635, 637, 643, 644, 645, 647, 679, 682, 685, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 706, 764, 765, 768, 780, 781, 782, 783, 794, 797, 798, 801, 806, 809, 814, 815, 816, 817, 819, 828, 831, 862, 863, 866, 867, 872, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 937, 938, 941, 958, 959], "revers": [20, 71, 72, 114, 115, 133, 145, 567, 588, 780, 798, 801], "resourc": 20, "content": [20, 21, 69, 70, 125, 128, 131], "thei": [20, 69, 70, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 242, 269, 840, 841, 842, 867, 868, 948, 991, 992], "hypothesi": 20, "cover": [20, 114, 115, 118, 120, 127], "lambda": [20, 128, 131, 985, 988, 990], "direct": [20, 132, 133, 144, 893, 899, 902], "bind": [20, 122], "special": [20, 71, 72, 113, 114, 115, 121, 126, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 388, 391, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936], "aforement": 20, "categori": [20, 113, 121, 122, 123, 127, 948], "parent": [20, 130], "arraywithelementwis": [20, 35, 121], "containerwithmanipul": [20, 71, 72, 94], "hint": [20, 113, 114, 118, 121, 125, 126, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "its": [20, 21, 114, 242, 249, 279, 323, 692, 716, 719, 780, 794, 797, 810, 813, 814, 817, 828, 831], "docstr": [20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 118, 122, 126, 162, 163, 164, 166, 171, 172, 173, 175, 176, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 194, 195, 196, 198, 200, 201, 206, 209, 211, 212, 216, 217, 219, 220, 222, 224, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 251, 252, 253, 254, 255, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 368, 371, 388, 391, 392, 393, 394, 395, 400, 403, 425, 426, 427, 428, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 692, 693, 694, 695, 697, 701, 703, 704, 706, 780, 781, 782, 783, 785, 794, 797, 798, 801, 814, 815, 816, 817, 818, 869, 871, 884, 885, 886, 887, 888, 889, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "thorough": [20, 114, 117, 126], "transpil": [20, 127, 129, 948, 954], "builder": [21, 143, 145, 948], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 692, 704, 706, 724, 726, 733, 735, 752, 754, 780, 798, 801, 814, 817, 893, 894, 897, 899, 902, 948], "synchron": 21, "rest": [21, 129, 133], "remove_doc": 21, "_": [21, 114, 122, 125, 130, 131, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 641, 643, 646, 648, 650, 692, 704, 706, 761, 763, 780, 794, 797, 814, 817, 884, 885, 893, 894, 897, 904, 909, 912], "indic": [21, 37, 38, 69, 70, 82, 83, 129, 133, 156, 161, 329, 528, 531, 567, 595, 596, 597, 598, 599, 600, 607, 620, 623, 624, 679, 680, 681, 682, 683, 684, 685, 686, 692, 758, 760, 780, 814, 817, 844, 845, 847, 849, 851, 852, 853, 855, 858, 859, 860, 861, 862, 863, 866, 867, 868, 879, 880, 881, 882, 884, 885, 891, 893, 894, 897, 899, 902, 948, 951, 953, 969, 970, 971, 972, 973, 974, 975, 976, 981, 982], "privat": [21, 985, 989], "fulfil": [21, 127, 948], "autogenerated_sourc": 21, "format": [21, 69, 70, 114, 123, 124, 128, 130, 131, 242, 260, 279, 299, 904, 905, 908, 948], "png": [21, 131], "_imag": 21, "lastli": 21, "structur": [21, 69, 70, 71, 72, 73, 113, 118, 121, 122, 131, 132, 567, 583, 844, 857], "rst": 21, "skip": [21, 69, 70, 117, 844, 857], "read": [21, 69, 70, 948], "partial_sourc": 21, "conf": 21, "copi": [21, 29, 30, 69, 70, 74, 75, 114, 119, 123, 128, 130, 131, 144, 145, 171, 175, 176, 177, 178, 179, 189, 192, 242, 248, 279, 324, 567, 584, 636, 637, 780, 810, 813, 844, 846, 893, 899, 902], "create_rst_fil": 21, "filter": [21, 679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "repres": [21, 130, 171, 206, 209, 242, 261, 329, 339, 342, 343, 346, 352, 355, 364, 367, 400, 403, 499, 502, 536, 539, 558, 562, 679, 688, 692, 739, 740, 742], "overal": [21, 114, 122, 123, 124, 133], "markup": 21, "6": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 82, 83, 98, 99, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 171, 195, 198, 279, 301, 317, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 368, 371, 372, 375, 388, 391, 392, 393, 394, 395, 400, 403, 425, 428, 437, 440, 457, 460, 497, 498, 504, 507, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 576, 585, 595, 596, 599, 600, 630, 635, 641, 643, 644, 646, 679, 682, 685, 686, 691, 692, 698, 700, 701, 703, 704, 706, 730, 732, 743, 745, 749, 751, 764, 765, 768, 775, 778, 780, 781, 782, 784, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 817, 819, 828, 831, 862, 863, 866, 867, 868, 869, 870, 871, 879, 880, 883, 884, 885, 886, 890, 904, 905, 908, 909, 912], "extract": [21, 113], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 145], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 69, 70, 117, 128, 131, 329, 376, 379, 692, 704, 706, 716, 719], "append_toctree_to_rst": 21, "9": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 84, 85, 98, 99, 115, 131, 132, 329, 343, 344, 345, 346, 347, 368, 371, 372, 375, 497, 498, 524, 527, 540, 543, 544, 547, 567, 595, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 679, 682, 685, 686, 692, 698, 700, 701, 703, 704, 706, 730, 732, 743, 745, 749, 751, 780, 781, 782, 784, 798, 801, 806, 809, 814, 817, 819, 867, 868, 869, 870, 871, 879, 883, 884, 885, 904, 905, 908, 985, 986, 987], "index": [21, 29, 30, 69, 70, 74, 75, 118, 122, 130, 170, 171, 186, 187, 206, 207, 208, 209, 210, 279, 320, 567, 573, 595, 596, 599, 780, 824, 827, 844, 847, 848, 851, 852, 853, 858, 860, 879, 880, 881, 882, 884, 885, 886, 890, 893, 894, 897, 951, 953], "create_index_rst": 21, "14": [21, 98, 99, 115, 122, 329, 388, 391, 641, 643, 646, 679, 691, 692, 704, 706, 730, 732, 869, 871, 884, 885, 904, 905, 908], "\u03c0": [21, 329, 335, 338, 348, 351, 356, 359, 360, 363], "namespac": [21, 113, 123, 128, 133], "arraywithactiv": 22, "abc": [22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 130, 279, 288, 294, 567, 592, 981, 982, 985, 989], "softplu": [22, 23, 67, 68, 156, 166, 948], "variant": [22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 693, 694, 695, 697, 781, 782, 783, 785, 814, 815, 816, 818, 869, 871, 886, 887, 888, 889], "wrap": [22, 23, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 567, 568, 569, 570, 572, 578, 596, 597, 598, 600, 641, 643, 644, 645, 647, 677, 693, 694, 695, 697, 781, 782, 783, 785, 814, 815, 816, 818, 869, 871, 886, 887, 888, 889], "minim": [22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 67, 68, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 125, 128, 162, 163, 164, 166, 175, 176, 181, 182, 189, 190, 195, 196, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 253, 255, 330, 331, 332, 334, 343, 344, 345, 347, 392, 393, 394, 425, 426, 427, 553, 554, 555, 556, 558, 559, 560, 561, 568, 569, 570, 572, 596, 597, 598, 600, 643, 644, 645, 647, 693, 694, 695, 697, 781, 782, 783, 785, 814, 815, 816, 818, 869, 871, 886, 887, 888, 889], "collect": [24, 69, 70, 117, 144, 156, 168, 279, 567, 641, 679, 764, 844, 857, 862, 867, 955, 969, 983, 985], "args_to_ivi": 24, "include_deriv": [24, 25, 26, 27, 28, 844, 846, 856], "keyword": [24, 25, 26, 69, 70, 71, 72, 73, 113, 123, 124, 125, 126, 131, 171, 206, 209, 279, 288, 289, 303, 307, 311, 567, 574, 617, 844, 850, 904, 929, 932, 981, 982], "variabl": [24, 25, 26, 27, 28, 69, 70, 71, 72, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 567, 577, 609, 610, 611, 612, 613, 614, 616, 633, 641, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 674, 677, 679, 690, 692, 740, 742, 840, 841, 842, 843, 862, 863, 866, 948, 958, 959, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "nest": [24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 118, 121, 122, 130, 131, 132, 145, 279, 303, 307, 311, 567, 635, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 981, 982, 985, 986, 987, 988, 989, 990], "unchang": [24, 25, 26, 27, 28], "posit": [24, 25, 26, 35, 36, 80, 81, 126, 131, 144, 170, 171, 186, 187, 242, 262, 279, 303, 307, 311, 329, 330, 333, 441, 444, 445, 448, 499, 502, 520, 523, 567, 594, 692, 693, 696, 780, 794, 797, 814, 817, 867, 877, 879, 882, 937, 938, 941, 943, 946, 958, 959], "bool": [24, 25, 26, 27, 28, 31, 32, 69, 70, 110, 111, 115, 122, 123, 125, 133, 168, 169, 171, 194, 242, 248, 251, 252, 254, 257, 258, 259, 260, 263, 266, 267, 268, 278, 279, 298, 299, 314, 323, 326, 329, 368, 371, 372, 375, 380, 383, 388, 391, 409, 412, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 481, 484, 485, 488, 489, 492, 508, 511, 567, 568, 571, 575, 576, 585, 588, 592, 594, 604, 606, 611, 613, 614, 615, 616, 629, 639, 640, 641, 674, 692, 693, 696, 720, 722, 743, 745, 758, 760, 780, 819, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 856, 867, 868, 879, 880, 881, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "deriv": [24, 25, 26, 27, 28, 123, 124, 130, 132, 171, 181, 184, 195, 198, 219, 222, 237, 241, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 844, 846, 856, 981, 985, 989, 991], "tupl": [24, 25, 26, 27, 28, 45, 46, 57, 58, 69, 70, 113, 122, 123, 124, 126, 130, 131, 132, 145, 171, 175, 178, 180, 194, 211, 214, 216, 217, 234, 236, 242, 250, 264, 279, 298, 567, 594, 630, 679, 682, 685, 686, 689, 692, 724, 726, 733, 735, 743, 744, 745, 749, 751, 758, 760, 780, 786, 789, 790, 793, 798, 801, 802, 805, 810, 813, 814, 817, 820, 823, 824, 827, 836, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 855, 856, 858, 859, 860, 861, 867, 872, 873, 875, 879, 882, 884, 885, 886, 888, 890, 891, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "kei": [24, 25, 26, 69, 70, 71, 72, 73, 122, 131, 279, 291, 567, 573, 583, 679, 690, 691, 840, 841, 842, 844, 847, 853, 857, 958, 959, 969, 980, 985, 989], "word": [24, 25, 26, 171, 172, 173, 867, 873, 875, 958, 959], "args_to_n": [24, 125, 130], "to_ivi": [24, 69, 70, 130, 844, 857], "input": [24, 27, 28, 39, 40, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 267, 268, 269, 270, 274, 279, 288, 289, 298, 299, 300, 301, 303, 304, 307, 311, 317, 323, 324, 329, 330, 333, 334, 335, 338, 339, 342, 343, 346, 347, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 554, 557, 558, 559, 562, 563, 566, 567, 568, 571, 572, 573, 575, 576, 577, 579, 580, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 604, 606, 607, 609, 610, 611, 613, 614, 615, 616, 620, 623, 624, 629, 630, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 652, 657, 659, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 785, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984], "leaf": [24, 27, 28, 69, 70, 118, 122, 131, 844, 845, 854, 855], "union": [24, 27, 28, 37, 38, 45, 46, 69, 70, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 246, 247, 248, 249, 250, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 312, 318, 320, 322, 323, 324, 325, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 571, 575, 576, 579, 580, 582, 585, 586, 589, 590, 591, 593, 594, 595, 596, 597, 599, 604, 606, 607, 609, 610, 611, 620, 623, 624, 629, 630, 635, 636, 637, 639, 640, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 855, 856, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "nativearrai": [24, 27, 28, 29, 30, 37, 38, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 181, 184, 195, 198, 200, 201, 203, 204, 206, 209, 211, 212, 214, 219, 222, 224, 228, 229, 233, 237, 241, 242, 248, 249, 250, 251, 254, 260, 262, 265, 267, 268, 270, 274, 279, 298, 299, 301, 317, 323, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 568, 569, 571, 575, 576, 579, 580, 582, 584, 585, 586, 589, 590, 591, 593, 594, 595, 596, 597, 599, 604, 606, 607, 609, 610, 611, 620, 623, 624, 629, 630, 635, 636, 637, 639, 640, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 844, 846, 856, 862, 863, 866, 867, 868, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "travers": [24, 27, 28, 69, 70, 122, 128, 130, 844, 856], "lowest": [24, 27, 28, 69, 70, 118, 145, 844, 856, 867, 869, 870], "leav": [24, 27, 28, 69, 70, 71, 72, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 780, 824, 827, 844, 845, 846, 854, 855, 856], "to_n": [24, 69, 70], "item": [24, 28, 65, 66, 69, 70, 123, 128, 130, 131, 133, 242, 257, 279, 288, 289, 291, 298, 300, 302, 304, 306, 310, 567, 583, 605, 631, 632, 844, 849, 850, 851, 852, 856, 860, 861, 948, 981, 982], "arraywithcr": 29, "asarrai": [29, 30, 74, 75, 125, 171, 679, 680, 884, 886, 890], "dtype": [29, 30, 31, 32, 61, 62, 69, 70, 74, 75, 76, 77, 106, 107, 113, 115, 118, 123, 124, 130, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 278, 279, 319, 329, 384, 387, 567, 575, 576, 620, 636, 679, 687, 780, 794, 797, 862, 863, 866, 867, 873, 875, 879, 880, 881, 893, 899, 902, 904, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 937, 938, 941, 948, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 991, 992], "empty_lik": [29, 30, 74, 75, 171], "from_dlpack": [29, 30, 74, 75, 171], "full_lik": [29, 30, 74, 75, 171], "fill_valu": [29, 30, 74, 75, 123, 171, 194, 195, 196, 197, 198, 199, 329, 437, 440, 457, 460], "meshgrid": [29, 30, 74, 75, 171], "xy": [29, 30, 74, 75, 171, 206, 207, 208, 209, 210], "ones_lik": [29, 30, 74, 75, 133, 171, 948], "tril": [29, 30, 74, 75, 171], "k": [29, 30, 74, 75, 112, 128, 171, 186, 187, 188, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 567, 575, 679, 691, 692, 716, 719, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 867, 872, 873, 875, 879, 882], "triu": [29, 30, 74, 75, 171], "zeros_lik": [29, 30, 74, 75, 171, 780, 781, 784, 948], "creation": [30, 69, 70, 71, 72, 73, 75, 113, 123, 124, 128, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 211, 214, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241], "data_typ": [31, 32, 76, 77, 113, 123, 242, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "arraywithdatatyp": 31, "can_cast": [31, 32, 76, 77, 118, 123, 242, 255], "float32": [31, 32, 76, 77, 115, 123, 242, 246, 247, 251, 252, 253, 254, 255, 263, 862, 863, 866], "float64": [31, 32, 123, 242, 248, 251, 252, 254, 263], "true": [31, 32, 37, 38, 45, 46, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 162, 164, 166, 168, 169, 171, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 242, 248, 251, 252, 253, 254, 255, 279, 298, 315, 319, 320, 329, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 391, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 488, 489, 491, 492, 493, 495, 499, 501, 503, 504, 506, 508, 510, 511, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 567, 568, 569, 570, 571, 572, 575, 576, 577, 578, 580, 581, 585, 592, 594, 596, 598, 600, 606, 607, 614, 629, 635, 637, 640, 641, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 679, 687, 692, 693, 695, 696, 697, 716, 718, 720, 722, 743, 744, 745, 758, 760, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 819, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 854, 855, 857, 863, 865, 867, 868, 873, 874, 876, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 911, 912, 913, 915, 916, 917, 919, 920, 921, 923, 924, 925, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 969, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990], "arraywithdevic": [33, 130], "ab": [35, 36, 80, 81, 117, 120, 329, 334, 516, 519, 692, 758, 760, 948], "y": [35, 36, 37, 38, 45, 46, 49, 50, 57, 58, 71, 72, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 102, 103, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 165, 167, 171, 194, 195, 198, 206, 209, 216, 217, 219, 222, 237, 241, 242, 248, 279, 299, 313, 317, 322, 329, 330, 331, 332, 333, 334, 343, 344, 345, 346, 347, 348, 351, 360, 363, 368, 371, 372, 375, 384, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 403, 417, 420, 425, 426, 427, 428, 437, 440, 457, 460, 497, 498, 504, 507, 508, 511, 524, 527, 540, 543, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 575, 576, 584, 585, 592, 593, 595, 596, 597, 598, 599, 600, 629, 635, 636, 637, 641, 652, 679, 685, 686, 688, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 713, 715, 730, 732, 749, 751, 752, 754, 764, 765, 768, 770, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 789, 794, 797, 798, 801, 806, 809, 810, 813, 814, 815, 816, 817, 818, 819, 828, 831, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 893, 894, 897, 904, 905, 908, 909, 912, 925, 928, 929, 932, 937, 938, 941], "aco": [35, 36, 80, 81, 329, 948], "acosh": [35, 36, 80, 81, 242, 263, 264, 329, 948], "x2": [35, 36, 37, 38, 45, 46, 69, 70, 80, 81, 82, 83, 90, 91, 115, 126, 242, 274, 279, 317, 329, 343, 344, 345, 346, 347, 360, 361, 362, 363, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 404, 405, 406, 407, 408, 409, 410, 411, 412, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 453, 454, 455, 456, 457, 458, 459, 460, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 548, 549, 550, 551, 552, 567, 568, 569, 570, 571, 572, 679, 684, 692, 698, 699, 700, 716, 717, 718, 719, 730, 731, 732, 740, 741, 742, 749, 750, 751, 755, 756, 757, 879, 883], "z": [35, 36, 37, 38, 71, 72, 80, 81, 82, 83, 115, 119, 122, 128, 130, 279, 313, 329, 343, 344, 345, 346, 347, 368, 371, 388, 391, 437, 440, 457, 460, 497, 498, 567, 575, 576, 595, 596, 597, 598, 600, 629, 692, 698, 700, 764, 765, 768, 770, 773, 780, 781, 784, 879, 880, 904, 905, 908, 909, 912], "asin": [35, 36, 80, 81, 329, 948], "asinh": [35, 36, 80, 81, 329, 948], "atan": [35, 36, 80, 81, 329, 948], "atan2": [35, 36, 80, 81, 329, 948], "atanh": [35, 36, 80, 81, 329, 948], "bitwise_and": [35, 36, 80, 81, 329], "bitwise_invert": [35, 36, 80, 81, 329], "bitwise_left_shift": [35, 36, 80, 81, 329], "bitwise_or": [35, 36, 80, 81, 329], "bitwise_right_shift": [35, 36, 80, 81, 329], "bitwise_xor": [35, 36, 80, 81, 329], "ceil": [35, 36, 80, 81, 171, 172, 173, 329, 948], "cosh": [35, 36, 80, 81, 329, 948], "divid": [35, 36, 69, 70, 80, 81, 115, 121, 329, 429, 432, 567, 631, 780, 819], "equal": [35, 36, 69, 70, 80, 81, 115, 122, 123, 171, 186, 187, 194, 195, 198, 242, 248, 329, 376, 379, 384, 387, 441, 444, 445, 448, 516, 519, 524, 527, 567, 568, 571, 575, 576, 692, 704, 706, 724, 726, 733, 735, 780, 781, 784, 790, 793, 819, 836, 839, 867, 873, 875, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902, 904, 913, 916, 925, 928, 929, 932, 933, 936], "erf": [35, 36, 80, 81, 329], "exp": [35, 36, 80, 81, 329, 421, 424, 477, 480, 948], "expm1": [35, 36, 80, 81, 329], "floor": [35, 36, 80, 81, 329, 384, 387, 567, 593, 948], "floor_divid": [35, 36, 80, 81, 329], "greater": [35, 36, 69, 70, 80, 81, 329, 335, 338, 348, 351, 360, 363, 376, 379, 384, 387, 425, 428, 429, 432, 516, 519, 520, 523, 528, 531, 563, 566, 692, 698, 700, 780, 820, 823, 867, 873, 875], "greater_equ": [35, 36, 80, 81, 329], "isfinit": [35, 36, 80, 81, 329], "isinf": [35, 36, 80, 81, 329], "isnan": [35, 36, 80, 81, 329], "less_equ": [35, 36, 80, 81, 329], "log10": [35, 36, 80, 81, 329], "log1p": [35, 36, 80, 81, 329], "log2": [35, 36, 80, 81, 329], "logaddexp": [35, 36, 80, 81, 329], "logical_and": [35, 36, 80, 81, 329, 948], "logical_not": [35, 36, 80, 81, 329, 948], "logical_or": [35, 36, 80, 81, 329, 948], "logical_xor": [35, 36, 80, 81, 329], "multipli": [35, 36, 80, 81, 115, 119, 121, 329, 567, 585], "neg": [35, 36, 80, 81, 118, 122, 125, 156, 158, 171, 172, 173, 186, 187, 329, 441, 444, 445, 448, 499, 502, 516, 519, 520, 523, 692, 743, 745, 755, 757, 758, 760, 780, 798, 801, 814, 817, 937, 938, 941, 943, 946], "not_equ": [35, 36, 80, 81, 329], "pow": [35, 36, 80, 81, 329], "remaind": [35, 36, 69, 70, 80, 81, 329, 567, 593, 780, 819], "sin": [35, 36, 80, 81, 121, 128, 329, 567, 594, 948], "sinh": [35, 36, 80, 81, 329, 948], "sqrt": [35, 36, 80, 81, 329, 692, 758, 760], "squar": [35, 36, 80, 81, 329, 540, 543, 679, 682, 692, 693, 696, 701, 703, 707, 709, 710, 712, 713, 715, 723, 739, 740, 742, 743, 745], "subtract": [35, 36, 80, 81, 115, 121, 329], "tan": [35, 36, 80, 81, 114, 118, 122, 125, 126, 128, 329, 348, 351, 554, 692, 704, 706, 884, 885, 893, 894, 897, 948], "56": [35, 36, 80, 81, 115, 329, 540, 543, 553, 554, 555, 556, 557, 641, 643, 646, 692, 730, 732, 904, 905, 908], "19": [35, 36, 80, 81, 115, 329, 388, 391, 553, 554, 555, 556, 557, 692, 704, 706], "tanh": [35, 36, 80, 81, 128, 156, 329, 559, 948], "762": [35, 36, 80, 81, 156, 167, 329, 558, 560, 561, 562], "964": [35, 36, 80, 81, 156, 167, 329, 558, 560, 561, 562], "trunc": [35, 36, 80, 81, 329], "elementwis": [36, 69, 70, 81, 113, 118, 128, 133, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566], "arraywithgener": [37, 130], "all_equ": [37, 38, 82, 83, 567, 572], "equality_matrix": [37, 38, 82, 83, 567, 568, 569, 570, 571, 572], "x1": [37, 38, 80, 81, 82, 83, 115, 126, 242, 274, 279, 317, 329, 343, 346, 347, 360, 363, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 408, 409, 412, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 497, 498, 499, 502, 503, 508, 511, 516, 519, 520, 523, 548, 549, 552, 567, 568, 569, 570, 571, 572, 575, 679, 684, 692, 698, 700, 716, 719, 730, 732, 740, 742, 749, 751, 755, 757, 879, 883], "mix": [37, 38, 71, 72, 112, 115, 117, 128, 242, 270, 279, 317, 329, 343, 346, 368, 371, 388, 391, 437, 440, 457, 460, 497, 498, 508, 511, 567, 568, 569, 584, 592, 595, 596, 599, 635, 636, 637, 679, 682, 685, 686, 691, 692, 693, 696, 749, 751, 764, 765, 768, 775, 778, 780, 781, 784, 862, 863, 866, 879, 883, 904, 905, 908, 913, 916], "gather_nd": [37, 38, 69, 70, 82, 83, 567, 600, 948], "arraywithgradi": [39, 130], "adam_step": [39, 40, 84, 85, 641, 647], "mw": [39, 40, 84, 85, 132, 641, 643, 644, 645, 646, 647, 648, 650], "vw": [39, 40, 84, 85, 132, 641, 643, 644, 645, 646, 647, 648, 650], "beta1": [39, 40, 84, 85, 132, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 985, 986, 987], "beta2": [39, 40, 84, 85, 132, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 985, 986, 987], "999": [39, 40, 80, 81, 84, 85, 132, 329, 558, 559, 561, 562, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 985, 986, 987], "epsilon": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 692, 724, 726, 733, 735, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 862, 863, 864, 865, 866, 983, 984, 985, 986, 987], "1e": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 133, 567, 603, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 692, 743, 745, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 862, 863, 864, 865, 866, 948, 985, 986, 987, 988, 990], "07": [39, 40, 47, 48, 84, 85, 92, 93, 132, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 661, 662, 663, 664, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 985, 986, 987], "dcdw": [39, 40, 84, 85, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668], "adam_step_delta": [39, 40, 84, 85, 641, 643, 644, 645, 646, 647], "639": [39, 40, 641, 643, 644, 646], "11": [39, 40, 71, 72, 80, 81, 98, 99, 115, 122, 329, 343, 345, 346, 347, 368, 371, 524, 527, 567, 585, 595, 643, 644, 692, 704, 706, 730, 732, 764, 775, 778, 780, 798, 801, 806, 809, 867, 869, 870, 871, 879, 883, 884, 885, 904, 905, 908], "32": [39, 40, 131, 156, 158, 329, 388, 391, 643, 644, 679, 682, 685, 692, 730, 732, 879, 883, 904, 905, 908], "63": [39, 40, 90, 91, 329, 540, 543, 643, 644, 692, 693, 695, 696, 697, 730, 732, 904, 905, 908], "00121": [39, 40, 643, 644], "0102": [39, 40, 643, 644], "0397": [39, 40, 643, 644], "gradient": [40, 69, 70, 85, 113, 122, 131, 132, 144, 145, 279, 323, 643, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 674, 675, 676, 677, 678, 840, 841, 842, 843, 948, 985, 986, 987, 988, 989, 990], "arraywithimag": [41, 130], "arraywithlay": 43, "linear_algebra": [45, 46, 90, 91, 113, 130, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763], "arraywithlinearalgebra": 45, "choleski": [45, 46, 90, 91, 692, 697], "upper": [45, 46, 69, 70, 90, 91, 171, 186, 187, 229, 233, 692, 693, 694, 695, 696, 697, 736, 738, 867, 873, 875], "625": [45, 46, 692, 693, 694, 696], "25": [45, 46, 122, 329, 540, 543, 544, 547, 692, 693, 694, 696, 704, 706, 713, 715, 764, 770, 773, 862, 863, 866, 904, 905, 908], "cross": [45, 46, 71, 72, 692, 764, 765, 768, 770, 773, 775, 778, 948], "axi": [45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 69, 70, 74, 75, 92, 93, 94, 95, 104, 105, 106, 107, 108, 109, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 171, 200, 201, 202, 203, 204, 205, 279, 281, 284, 291, 304, 305, 306, 307, 308, 309, 310, 311, 323, 567, 585, 586, 595, 639, 692, 698, 699, 700, 704, 706, 755, 756, 757, 758, 759, 760, 764, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 807, 808, 809, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 867, 878, 879, 880, 881, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947], "det": [45, 46, 71, 72, 692], "diagon": [45, 46, 71, 72, 171, 186, 187, 224, 228, 229, 233, 692, 752, 754], "offset": [45, 46, 51, 52, 96, 97, 692, 704, 705, 706, 752, 753, 754, 862, 863, 864, 865, 866], "axis1": [45, 46, 49, 50, 94, 95, 692, 704, 705, 706, 780, 828, 829, 830, 831], "axis2": [45, 46, 692, 704, 705, 706], "eigh": [45, 46, 71, 72, 692], "namedtupl": [45, 46, 692, 707, 708, 709, 736, 737, 738, 743, 745, 884, 885, 886, 890], "eigvalsh": [45, 46, 71, 72, 692], "inv": [45, 46, 71, 72, 130, 692, 948], "matmul": [45, 46, 90, 91, 113, 119, 128, 692, 743, 745, 948], "matrix_norm": [45, 46, 69, 70, 692], "ord": [45, 46, 69, 70, 692, 720, 721, 722, 758, 759, 760], "fro": [45, 46, 692, 720, 721, 722], "keepdim": [45, 46, 61, 62, 63, 64, 69, 70, 106, 107, 108, 109, 567, 639, 692, 720, 721, 722, 758, 759, 760, 879, 880, 881, 904, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947], "matrix_rank": [45, 46, 71, 72, 692], "rtol": [45, 46, 692, 724, 725, 726, 733, 734, 735], "matrix_transpos": [45, 46, 71, 72, 130, 692], "outer": [45, 46, 71, 72, 692, 840, 841, 842, 843], "pinv": [45, 46, 71, 72, 692, 948], "qr": [45, 46, 71, 72, 692], "reduc": [45, 46, 69, 70, 130, 279, 323, 567, 590, 692, 736, 737, 738, 879, 880, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "solv": [45, 46, 71, 72, 129, 144, 692], "svd": [45, 46, 71, 72, 692, 948], "full_matric": [45, 46, 692, 743, 744, 745], "svdval": [45, 46, 71, 72, 692], "tensordot": [45, 46, 71, 72, 692], "ax": [45, 46, 49, 50, 69, 70, 94, 95, 113, 115, 123, 130, 279, 323, 567, 585, 692, 720, 722, 740, 742, 749, 750, 751, 758, 760, 780, 790, 793, 798, 801, 802, 803, 804, 805, 814, 817, 820, 823, 828, 831, 836, 839, 879, 880, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "trace": [45, 46, 69, 70, 71, 72, 128, 145, 567, 613, 614, 616, 692], "vecdot": [45, 46, 71, 72, 692], "vector_norm": [45, 46, 69, 70, 692], "vector_to_skew_symmetric_matrix": [45, 46, 71, 72, 692, 948], "arraywithloss": 47, "binary_cross_entropi": [47, 48, 92, 93, 764], "pred": [47, 48, 92, 93, 118, 122, 125, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779], "cross_entropi": [47, 48, 92, 93, 118, 122, 125, 764, 775, 778], "sparse_cross_entropi": [47, 48, 92, 93, 764], "loss": [48, 93, 113, 118, 131, 132, 133, 765, 768, 770, 773, 775, 778, 948], "arraywithmanipul": 49, "clip": [49, 50, 69, 70, 94, 95, 118, 122, 125, 128, 131, 133, 329, 497, 498, 567, 579, 580, 582, 780, 785, 948], "x_min": [49, 50, 69, 70, 94, 95, 128, 133, 780, 781, 782, 783, 784, 785], "x_max": [49, 50, 69, 70, 94, 95, 128, 133, 780, 781, 782, 783, 784, 785], "roll": [49, 50, 94, 95, 122, 126, 780, 781, 782, 818], "concat": [49, 50, 69, 70, 94, 95, 279, 308, 309, 310, 311, 323, 567, 594, 780, 948], "xs": [49, 50, 94, 95, 122, 279, 302, 306, 308, 309, 310, 567, 568, 571, 576, 641, 652, 780, 786, 787, 788, 789], "constant_pad": [49, 50, 94, 95, 780], "pad_width": [49, 50, 94, 95, 780, 790, 791, 792, 793, 836, 837, 838, 839], "expand_dim": [49, 50, 94, 95, 128, 131, 780, 948], "flip": [49, 50, 94, 95, 130, 131, 133, 329, 372, 375, 780, 806, 809, 948], "permute_dim": [49, 50, 94, 95, 780], "reshap": [49, 50, 69, 70, 94, 95, 125, 128, 130, 133, 780, 948], "shift": [49, 50, 94, 95, 115, 126, 329, 376, 379, 384, 387, 780, 814, 815, 816, 817, 818], "squeez": [49, 50, 94, 95, 780, 948], "stack": [49, 50, 69, 70, 94, 95, 128, 171, 224, 228, 229, 233, 692, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 723, 724, 726, 727, 729, 733, 735, 736, 738, 743, 745, 746, 748, 752, 754, 780, 844, 845, 854, 855, 948, 969, 978], "swapax": [49, 50, 94, 95, 780], "axis0": [49, 50, 94, 95, 780, 828, 829, 830, 831], "tile": [49, 50, 94, 95, 780, 948], "rep": [49, 50, 94, 95, 780, 832, 833, 834, 835], "zero_pad": [49, 50, 94, 95, 780, 948], "arraywithnorm": 51, "layer_norm": [51, 52, 96, 97, 862], "normalized_idx": [51, 52, 96, 97, 862, 863, 864, 865, 866], "05": [51, 52, 96, 97, 279, 641, 643, 646, 862, 863, 864, 865, 866], "scale": [51, 52, 96, 97, 122, 279, 321, 322, 641, 665, 667, 679, 687, 690, 691, 862, 863, 864, 865, 866, 969, 977, 980, 985, 988], "new_std": [51, 52, 96, 97, 862, 863, 864, 865, 866, 983, 984], "norm": [52, 69, 70, 97, 113, 567, 579, 580, 582, 692, 720, 722, 758, 760, 863, 866, 948, 984, 985, 987], "arraywithrandom": [53, 130], "random": [54, 69, 70, 99, 113, 124, 133, 144, 868, 869, 870, 872, 873, 875, 877, 878, 948], "arraywithsearch": 55, "arraywithset": 57, "unique_count": [57, 58, 102, 103, 884, 887], "uc": [57, 58, 886, 888], "count": [57, 58, 115, 131, 279, 317, 692, 755, 757, 780, 798, 801, 884, 885, 886, 888, 890, 937, 938, 941, 943, 946], "arraywithsort": 59, "argsort": [59, 60, 104, 105, 893], "descend": [59, 60, 104, 105, 692, 743, 745, 746, 748, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903], "sort": [60, 69, 70, 71, 72, 73, 105, 113, 692, 707, 709, 743, 745, 746, 748, 894, 897], "arraywithstatist": 61, "einsum": [61, 62, 106, 107, 904], "equat": [61, 62, 106, 107, 692, 740, 742, 904, 905, 906, 907, 908], "max": [61, 62, 69, 70, 106, 107, 242, 262, 265, 329, 497, 567, 579, 580, 582, 590, 623, 624, 692, 724, 726, 733, 735, 904, 985, 987], "min": [61, 62, 69, 70, 106, 107, 242, 262, 265, 329, 498, 567, 590, 623, 624, 631, 692, 736, 738, 743, 745, 746, 748, 758, 760, 904], "prod": [61, 62, 69, 70, 106, 107, 115, 123, 567, 590, 904], "std": [61, 62, 106, 107, 115, 867, 872, 884, 885, 904], "sum": [61, 62, 69, 70, 106, 107, 118, 122, 123, 125, 128, 279, 308, 309, 310, 311, 323, 329, 343, 346, 477, 480, 567, 586, 590, 623, 624, 679, 691, 692, 743, 745, 752, 754, 758, 760, 904, 905, 908, 925, 928], "var": [61, 62, 106, 107, 110, 111, 115, 128, 840, 841, 842, 904], "statist": [62, 107, 110, 111, 113, 123, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "arraywithutil": 63, "util": [64, 109, 113, 124, 279, 312, 938, 941, 943, 946], "add_ivy_array_instance_method": 65, "cl": [65, 66, 110, 111], "to_ignor": [65, 66, 110, 111, 844, 855], "loop": [65, 66, 110, 111, 119, 145, 840, 841, 842, 843], "_wrap_funct": [65, 66, 110, 111, 118, 120], "toi": [65, 66, 110, 111], "arrayexampl": [65, 66], "hasattr": [65, 66, 110, 111, 130], "relu": [65, 66, 71, 72, 131, 132, 156, 157, 158, 948], "softmax": [65, 66, 71, 72, 156, 679, 690, 691, 948], "containerwithactiv": [67, 71, 72], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 279, 288, 289, 567, 622, 627], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 567], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "containerbas": [67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 122], "key_chain": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 251, 253, 255, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 499, 501, 503, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 568, 570, 572, 580, 581, 596, 598, 600, 648, 649, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 693, 695, 697, 716, 718, 765, 767, 769, 770, 772, 774, 775, 777, 779, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 844, 857, 863, 865, 869, 871, 873, 874, 876, 886, 887, 889, 894, 896, 898, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 938, 940, 942, 943, 945, 947], "to_appli": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 251, 253, 255, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 499, 501, 503, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 568, 570, 572, 580, 581, 596, 598, 600, 648, 649, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 693, 695, 697, 716, 718, 765, 767, 769, 770, 772, 774, 775, 777, 779, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 844, 857, 863, 865, 873, 874, 876, 886, 887, 889, 894, 896, 898, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 938, 940, 942, 943, 945, 947], "prune_unappli": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 251, 253, 255, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 499, 501, 503, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 568, 570, 572, 580, 581, 596, 598, 600, 648, 649, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 693, 695, 697, 716, 718, 765, 767, 769, 770, 772, 774, 775, 777, 779, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 844, 857, 863, 865, 873, 874, 876, 886, 887, 889, 894, 896, 898, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 938, 940, 942, 943, 945, 947], "map_sequ": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 251, 253, 255, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 364, 366, 372, 374, 392, 394, 396, 398, 400, 402, 404, 406, 408, 413, 415, 417, 419, 421, 423, 425, 427, 441, 443, 445, 447, 449, 451, 461, 463, 465, 467, 469, 471, 473, 475, 485, 487, 499, 501, 503, 504, 506, 512, 514, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 568, 570, 572, 580, 581, 596, 598, 600, 648, 649, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 693, 695, 697, 765, 767, 769, 770, 772, 774, 775, 777, 779, 781, 783, 785, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 828, 830, 832, 834, 836, 838, 863, 865, 873, 874, 876, 886, 887, 889, 894, 896, 898, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 938, 940, 942, 943, 945, 947], "static_softplu": [67, 68, 162], "__getitem__": [69, 70, 122], "queri": [69, 70, 122, 123, 130, 279, 312, 322, 679, 690, 691, 969, 980], "slice": [69, 70, 567, 595, 596, 599, 844, 853], "chain": [69, 70, 121, 122, 132, 133, 145, 840, 841, 842, 844, 857, 991, 992], "element": [69, 70, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 194, 195, 198, 224, 228, 229, 233, 279, 302, 306, 310, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 575, 576, 579, 580, 582, 585, 586, 593, 607, 636, 637, 679, 687, 692, 698, 700, 707, 709, 716, 719, 736, 738, 743, 745, 780, 781, 784, 798, 801, 806, 809, 814, 817, 819, 820, 823, 867, 868, 879, 882, 883, 884, 885, 886, 890, 891, 892, 893, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 969, 977], "represent": [69, 70, 71, 72, 73, 144, 170, 242, 246, 247, 262, 265, 279, 295, 296, 329, 330, 333, 343, 346, 368, 371, 380, 383, 388, 391, 493, 496, 499, 502, 567, 573, 630, 635], "dictionari": [69, 70, 71, 72, 73, 131, 145, 279, 322], "sequenc": [69, 70, 71, 72, 73, 115, 123, 144, 168, 169, 279, 288, 289, 567, 576, 617, 780, 819, 824, 827, 867, 869, 870, 904, 909, 912, 937, 938, 941, 943, 946, 969, 978, 983, 984, 991, 992], "multiprocess": [69, 70, 71, 72, 73, 131, 145, 279, 288, 567], "asynchron": [69, 70, 71, 72, 73], "size": [69, 70, 71, 72, 73, 130, 131, 171, 200, 201, 203, 204, 279, 321, 322, 323, 567, 623, 629, 679, 691, 692, 704, 706, 720, 722, 730, 732, 736, 738, 743, 745, 755, 757, 780, 794, 797, 814, 817, 819, 820, 823, 867, 868, 872, 873, 875, 879, 880, 882, 937, 938, 941, 943, 946, 969, 970, 971], "dimens": [69, 70, 71, 72, 73, 115, 128, 131, 156, 161, 171, 224, 228, 229, 233, 279, 310, 567, 589, 590, 591, 594, 604, 620, 639, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 696, 698, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 760, 764, 770, 773, 775, 778, 780, 786, 789, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 840, 841, 842, 843, 867, 878, 879, 880, 881, 882, 884, 885, 886, 890, 892, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980], "arriv": [69, 70, 71, 72, 73], "timeout": [69, 70, 71, 72, 73, 279, 288, 289, 567, 622, 627], "maximum": [69, 70, 71, 72, 73, 115, 128, 131, 133, 279, 303, 307, 311, 323, 329, 567, 579, 580, 582, 594, 641, 661, 663, 780, 781, 784, 844, 856, 879, 880, 904, 909, 912, 917, 920, 948], "length": [69, 70, 71, 72, 73, 131, 171, 172, 173, 206, 209, 692, 743, 745, 746, 748, 780, 810, 813], "whitespac": [69, 70, 71, 72, 73], "indent": [69, 70, 71, 72, 73, 131], "extra": [69, 70, 71, 72, 73, 115, 120, 121, 128, 641, 652], "newlin": [69, 70, 71, 72, 73, 114], "handl": [69, 70, 71, 72, 73, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 168, 169, 279, 295, 296, 297, 298, 299, 313, 317, 318, 325, 328, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 985, 986, 987, 988, 989, 990], "result": [69, 70, 71, 72, 73, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 250, 270, 279, 288, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 586, 589, 590, 591, 593, 595, 596, 599, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 844, 857, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 883, 884, 885, 892, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946, 948], "color": [69, 70, 71, 72, 73, 994, 995], "map": [69, 70, 71, 72, 73, 117, 118, 122, 126, 131, 144, 145, 279, 288, 844, 851, 852, 856, 857, 969, 980], "termcolor": [69, 70, 71, 72, 73], "rebuild": [69, 70, 71, 72, 73], "constructor": [69, 70, 71, 72, 73, 123, 124, 130, 567, 574, 991, 992], "param": [69, 70, 71, 72, 73, 82, 83, 128, 133, 567, 573, 595, 596, 599, 600], "alphabet": [69, 70, 71, 72, 73], "preserv": [69, 70, 71, 72, 73, 133, 145, 641, 674, 780, 798, 801], "__setitem__": [69, 70, 121, 122, 130], "val": [69, 70, 125, 130, 567, 609, 610, 611, 625, 626], "after": [69, 70, 115, 122, 123, 127, 242, 274, 329, 540, 543, 641, 648, 650, 652, 653, 655, 661, 663, 665, 667, 669, 671, 862, 863, 866, 985, 986, 987, 988, 989, 990], "all_fals": [69, 70], "assert_is_bool": [69, 70], "entri": [69, 70, 171, 200, 201, 203, 204, 780, 819, 844, 857], "boolean": [69, 70, 122, 171, 194, 242, 248, 266, 278, 279, 314, 326, 329, 368, 371, 372, 375, 380, 383, 388, 391, 481, 484, 485, 488, 489, 492, 493, 496, 567, 568, 571, 575, 576, 606, 607, 608, 612, 613, 614, 615, 616, 633, 640, 641, 657, 659, 840, 841, 842, 844, 854, 904, 917, 920], "evalu": [69, 70, 122, 329, 417, 420, 421, 424, 461, 464, 465, 468, 469, 472, 473, 476, 504, 507, 528, 531, 544, 547, 844, 845, 854, 855, 937, 938, 941, 943, 946], "assert": [69, 70, 130, 131, 567, 577], "prune": [69, 70, 844, 857, 858, 859], "all_key_chain": [69, 70], "include_empti": [69, 70], "all_tru": [69, 70, 122, 131], "arrays_as_list": [69, 70], "intermedi": [69, 70], "as_arrai": [69, 70, 567, 604, 629], "as_bool": [69, 70], "as_on": [69, 70], "ones": [69, 70, 71, 72, 117, 128, 130, 131, 171, 186, 187, 219, 222, 329, 392, 395, 567, 620, 948], "fill": [69, 70, 171, 180, 194, 195, 198, 216, 217, 219, 222, 234, 236, 237, 241, 867, 869, 870], "as_random_uniform": [69, 70], "low": [69, 70, 98, 99, 128, 867, 869, 870, 871, 873, 874, 875, 876], "uniform": [69, 70, 132, 867, 868, 869, 870, 873, 875, 960, 962, 963, 966, 967], "boundari": [69, 70, 867, 873, 875], "interv": [69, 70, 128, 133, 171, 172, 173, 200, 201, 203, 204, 692, 755, 757, 780, 781, 784, 824, 827, 867, 869, 870, 873, 875, 937, 938, 941, 943, 946], "as_vari": [69, 70], "as_zero": [69, 70], "assert_contains_sub_contain": [69, 70], "sub_cont": [69, 70], "except": [69, 70, 114, 121, 125, 130, 145, 242, 250, 567, 577, 588, 611, 638, 692, 733, 735, 780, 786, 789, 824, 827, 879, 882, 937, 938, 941, 943, 946], "diff": [69, 70, 122, 131], "screen": [69, 70, 131], "assert_contains_sub_structur": [69, 70], "check_shap": [69, 70], "assert_ident": [69, 70], "check_typ": [69, 70], "same_arrai": [69, 70, 131], "arrays_equ": [69, 70, 71, 72, 567], "datatyp": [69, 70, 171, 175, 178, 211, 214, 242, 256, 267, 268, 269], "assert_identical_structur": [69, 70], "at_key_chain": [69, 70], "ignore_key_error": [69, 70], "ignore_non": [69, 70], "at_kei": [69, 70], "ignor": [69, 70, 115, 145, 171, 206, 209, 844, 855, 985, 989], "substr": [69, 70], "clip_min": [69, 70], "clip_max": [69, 70], "minimum": [69, 70, 128, 133, 279, 329, 330, 333, 567, 602, 603, 625, 626, 631, 632, 780, 781, 784, 879, 881, 904, 909, 912, 917, 920, 948], "config": [69, 70, 131, 844, 857], "duplic": [69, 70, 114, 119, 120, 130, 132], "compar": [69, 70, 117, 131, 567, 568, 571, 575, 576, 884, 885, 886, 890, 892, 893, 894, 897, 899, 902], "container_rightmost": [69, 70], "common_key_chain": [69, 70, 122], "properti": [69, 70, 115, 117, 118, 122, 130, 131, 132, 279, 291, 981, 982, 985, 986, 987, 988, 990], "contains_sub_contain": [69, 70], "match": [69, 70, 122, 242, 248, 329, 520, 523, 567, 617], "contains_sub_structur": [69, 70], "create_if_abs": [69, 70], "inplac": [69, 70, 84, 85, 112, 115, 120, 121, 126, 130, 132, 567, 577, 608, 611, 612, 633, 641, 648, 649, 650, 651, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 958, 959, 985, 986, 987, 988, 989, 990], "cutoff_at_depth": [69, 70], "depth_cutoff": [69, 70], "cutoff_at_height": [69, 70], "height_cutoff": [69, 70], "deep_copi": [69, 70, 131], "intern": [69, 70, 114, 121, 122, 124, 125, 279, 641, 677, 844, 845, 854, 855, 960, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 991, 992], "belong": [69, 70, 132], "dev_clon": [69, 70, 279], "dev_dist": [69, 70, 279], "along": [69, 70, 113, 125, 171, 200, 201, 203, 204, 279, 304, 305, 306, 307, 308, 309, 310, 311, 323, 567, 585, 586, 595, 639, 692, 720, 722, 752, 754, 755, 757, 758, 760, 764, 770, 773, 775, 778, 780, 786, 789, 798, 801, 806, 809, 814, 817, 819, 824, 827, 832, 835, 840, 841, 842, 843, 867, 878, 879, 880, 881, 893, 894, 897, 899, 902, 904, 905, 908, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "dev_str": [69, 70], "diff_kei": [69, 70], "detect_key_diff": [69, 70], "detect_value_diff": [69, 70], "detect_shape_diff": [69, 70], "treat": [69, 70, 129, 133, 168, 169], "detect": [69, 70, 126, 131, 132, 844, 845, 855], "container0": [69, 70], "einops_rearrang": [69, 70, 567], "axes_length": [69, 70, 567, 589, 590, 591], "rearrang": [69, 70, 567, 589, 591], "einops_reduc": [69, 70, 567], "reduct": [69, 70, 123, 130, 567, 590, 623, 624, 937, 938, 941, 943, 946, 948], "One": [69, 70, 123, 128, 130, 131, 567, 590, 780, 810, 813, 867, 869, 870], "callabl": [69, 70, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 168, 169, 242, 263, 264, 279, 323, 567, 573, 578, 588, 590, 840, 841, 842, 843, 844, 850, 854, 855, 856], "einops_repeat": [69, 70, 567], "find_sub_contain": [69, 70], "sub_cont_to_find": [69, 70], "exsit": [69, 70], "find_sub_structur": [69, 70], "sub_struc_to_find": [69, 70], "flatten_key_chain": [69, 70, 131, 981, 982], "__": [69, 70, 115, 131], "above_height": [69, 70, 131], "below_depth": [69, 70, 131], "format_key_chain": [69, 70], "format_fn": [69, 70], "string": [69, 70, 119, 123, 124, 128, 131, 242, 246, 247, 260, 266, 278, 279, 295, 296, 297, 298, 312, 318, 324, 325, 328, 567, 587], "from_disk_as_hdf5": [69, 70, 131], "h5_obj_or_filepath": [69, 70], "slice_obj": [69, 70], "load": [69, 70, 145], "disk": [69, 70, 131], "h5py": [69, 70], "hdf5": [69, 70, 131, 981, 982], "h5": [69, 70], "from_disk_as_json": [69, 70, 131], "json_filepath": [69, 70], "json": [69, 70, 131], "dure": [69, 70, 118, 122, 123, 124, 125, 145, 168, 169, 279, 324, 567, 638, 641, 643, 646, 648, 650, 661, 663, 692, 716, 719, 840, 841, 842, 843, 904, 925, 928, 933, 936, 981, 982, 985, 986, 987, 989], "from_disk_as_pickl": [69, 70, 131], "pickle_filepath": [69, 70], "pickl": [69, 70, 122, 131], "from_flat_list": [69, 70], "flat_list": [69, 70], "hierarchi": [69, 70, 131], "flat": [69, 70, 567, 623, 780, 806, 809], "popul": [69, 70, 123, 124, 128, 867, 868, 904, 925, 928, 933, 936], "from_numpi": [69, 70, 131], "gather": [69, 70, 567, 596, 599], "h5_file_s": [69, 70], "batch": [69, 70, 118, 122, 131, 279, 321, 322, 567, 594, 679, 688, 692, 758, 760, 840, 841, 842, 843, 862, 863, 866, 983, 984], "handle_inplac": [69, 70], "prime": [69, 70], "overwritten": [69, 70, 119, 121], "has_kei": [69, 70], "query_kei": [69, 70], "somewher": [69, 70], "has_key_chain": [69, 70], "has_nan": [69, 70, 567], "include_inf": [69, 70, 567, 606, 640], "leafwis": [69, 70], "nan": [69, 70, 113, 114, 170, 242, 248, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 441, 444, 449, 452, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 567, 606, 640, 679, 691, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "well": [69, 70, 117, 125, 132, 133, 144, 567, 606, 692, 740, 742], "inf": [69, 70, 170, 567, 606, 640, 692, 758, 760], "wise": [69, 70, 128, 133, 156, 157, 158, 159, 160, 161, 162, 165, 167, 329, 330, 333, 335, 338, 343, 346, 348, 351, 356, 359, 360, 363, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 409, 412, 413, 416, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 508, 511, 516, 519, 520, 523, 548, 552, 567, 593, 780, 781, 784], "identical_array_shap": [69, 70], "exclus": [69, 70, 84, 85, 118, 122, 133, 171, 172, 173, 567, 585, 613, 614, 616, 641, 657, 658, 659, 660, 867, 869, 870], "identical_config": [69, 70], "identical_structur": [69, 70], "if_exist": [69, 70], "inplace_upd": [69, 70, 125, 567, 958, 959], "key_chains_contain": [69, 70], "sub_str": [69, 70], "join": [69, 70, 780, 786, 789, 824, 827, 948], "list_stack": [69, 70, 131], "dim": [69, 70, 123, 567, 620, 969, 980], "func": [69, 70, 122, 168, 169, 279, 323, 567, 578, 641, 652, 844, 857], "map_cont": [69, 70], "include_self": [69, 70], "possibi": [69, 70], "matrix": [69, 70, 171, 206, 209, 224, 228, 229, 233, 567, 568, 571, 579, 679, 688, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 719, 720, 722, 723, 724, 726, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 761, 763, 969, 979], "integ": [69, 70, 122, 123, 130, 171, 172, 173, 194, 242, 265, 268, 270, 329, 330, 333, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 425, 428, 429, 432, 493, 496, 516, 519, 520, 523, 524, 527, 563, 566, 692, 723, 755, 757, 758, 760, 780, 819, 867, 869, 870, 877, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "flatten": [69, 70, 567, 594, 692, 730, 732, 758, 760, 780, 806, 809, 814, 817, 879, 880, 881, 884, 885, 886, 890, 892], "broadcast": [69, 70, 113, 114, 115, 122, 123, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 248, 249, 250, 279, 324, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 585, 589, 590, 591, 593, 596, 599, 607, 620, 623, 624, 641, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 703, 704, 706, 710, 712, 713, 715, 716, 719, 720, 722, 724, 726, 727, 729, 730, 732, 733, 735, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 765, 768, 770, 773, 775, 778, 780, 781, 784, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 878, 879, 880, 881, 883, 884, 892, 893, 899, 902, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "max_depth": [69, 70, 279, 283, 286, 293, 303, 307, 311, 567, 605, 844, 856], "multi_map": [69, 70, 122], "map_nest": [69, 70, 80, 81, 90, 91, 94, 95, 360, 362, 368, 370, 376, 378, 380, 382, 384, 386, 388, 390, 409, 411, 429, 431, 433, 435, 437, 439, 453, 455, 457, 459, 477, 479, 481, 483, 489, 491, 493, 495, 508, 510, 516, 518, 520, 522, 716, 718, 786, 788, 824, 826], "leftmost": [69, 70, 844, 857], "multi_map_in_static_method": [69, 70, 122], "fn_name": [69, 70], "num_arrai": [69, 70], "overwrite_at_key_chain": [69, 70], "overwrit": [69, 70, 125, 128, 279, 323], "target_dict": [69, 70], "return_dict": [69, 70], "prune_empti": [69, 70], "keep_non": [69, 70], "empti": [69, 70, 71, 72, 121, 123, 124, 171, 172, 173, 904, 925, 928, 929, 932, 937, 938, 941, 943, 946], "prune_key_chain": [69, 70], "key1": [69, 70, 132], "key2": [69, 70], "key3": [69, 70], "prune_key_from_key_chain": [69, 70], "prune_kei": [69, 70], "prune_keys_from_key_chain": [69, 70], "remove_key_length_limit": [69, 70], "remove_print_limit": [69, 70], "reshape_lik": [69, 70], "leading_shap": [69, 70], "return_cont": [69, 70], "restructur": [69, 70], "keep_orig": [69, 70], "transpos": [69, 70, 130, 133, 279, 310, 679, 681, 683, 685, 692, 727, 729, 733, 735, 948, 969, 971, 973, 975], "restructure_key_chain": [69, 70], "keychain_map": [69, 70], "set_at_key_chain": [69, 70], "set_at_kei": [69, 70], "set_framework": [69, 70, 128, 130, 131, 133], "set_ivy_backend": [69, 70], "ivy_backend": [69, 70], "attribut": [69, 70, 114, 122, 123, 129, 130, 131, 132, 242, 262, 263, 264, 265, 279, 319], "show_sub_contain": [69, 70], "sub_cont_or_keychain": [69, 70], "shuffl": [69, 70, 867, 948], "seed_valu": [69, 70, 867, 877], "seed": [69, 70, 71, 72, 867, 948], "shuffle_h5_fil": [69, 70], "dataset": [69, 70, 131, 143, 948], "size_ordered_arrai": [69, 70], "keychain": [69, 70], "smallest": [69, 70, 242, 262, 265, 329, 392, 395], "largest": [69, 70, 144, 242, 262, 265, 692, 743, 745], "slice_kei": [69, 70], "key_slic": [69, 70], "all_depth": [69, 70], "slice_via_kei": [69, 70], "sort_by_kei": [69, 70], "num_or_size_split": [69, 70, 128, 780, 819], "with_remaind": [69, 70, 780, 819], "constitu": [69, 70, 133], "dimension": [69, 70, 171, 172, 173, 186, 187, 206, 209, 692, 698, 700, 701, 703, 716, 719, 724, 726, 730, 732, 733, 735, 755, 757, 758, 760, 780, 819, 879, 880, 881, 882, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "evenli": [69, 70, 171, 172, 173, 200, 201, 203, 204, 780, 819], "store": [69, 70, 114, 119, 121, 122, 128, 130, 131, 132, 567, 594, 641, 677, 692, 752, 754, 780, 819, 981, 982], "stop_gradi": [69, 70, 71, 72, 84, 85, 132, 279, 323, 641, 648, 649, 650, 651, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 840, 841, 842, 843, 948, 985, 986, 987, 988, 989, 990], "preserve_typ": [69, 70, 641, 674], "stop": [69, 70, 74, 75, 128, 145, 171, 172, 173, 174, 200, 201, 202, 203, 204, 205, 279, 294, 323, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 674, 840, 841, 842, 843, 985, 986, 987, 988, 989, 990], "structural_diff": [69, 70], "to_devic": [69, 70, 279, 298], "cuda": [69, 70, 128, 131, 145, 171, 200, 201, 203, 204, 279, 288, 295, 320, 567, 595, 596, 599, 620, 623, 624, 867, 868, 869, 870, 873, 875, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992], "target": [69, 70, 112, 127, 131, 132, 133, 279, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 948], "to_dict": [69, 70], "to_disk_as_hdf5": [69, 70, 131], "starting_index": [69, 70], "max_batch_s": [69, 70], "w": [69, 70, 84, 85, 128, 131, 132, 567, 576, 641, 643, 646, 648, 650, 651, 653, 655, 656, 661, 663, 664, 665, 667, 668, 669, 671, 672, 679, 680, 681, 682, 683, 684, 685, 686], "later": [69, 70, 567, 578], "to_disk_as_json": [69, 70, 131], "to_disk_as_pickl": [69, 70, 131], "to_flat_list": [69, 70], "to_iter": [69, 70, 122], "leaf_keys_onli": [69, 70], "to_iterator_kei": [69, 70], "to_iterator_valu": [69, 70], "to_json": [69, 70], "to_list": [69, 70, 567, 948], "to_multi_dev": [69, 70], "multidevcontain": [69, 70, 71], "distributedarrai": [69, 70], "to_numpi": [69, 70, 131, 567, 948], "update_backend": [69, 70], "to_raw": [69, 70], "raw": [69, 70, 114], "trim_kei": [69, 70], "max_length": [69, 70], "try_kc": [69, 70], "tri": [69, 70], "self": [69, 70, 121, 122, 128, 130, 131, 132, 133, 162, 163, 164, 175, 176, 177, 181, 182, 183, 189, 190, 191, 195, 196, 197, 206, 207, 208, 211, 212, 213, 219, 220, 221, 224, 226, 227, 229, 231, 232, 237, 239, 240, 251, 252, 253, 279, 330, 331, 332, 335, 336, 337, 339, 340, 341, 343, 344, 345, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 499, 500, 501, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 550, 551, 553, 555, 556, 558, 560, 561, 563, 564, 565, 568, 569, 570, 580, 581, 596, 597, 598, 643, 644, 645, 648, 649, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 693, 694, 695, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 714, 716, 717, 718, 720, 721, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 765, 766, 767, 770, 771, 772, 775, 776, 777, 781, 782, 783, 786, 787, 788, 790, 791, 792, 794, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 808, 810, 811, 812, 814, 815, 816, 820, 821, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 836, 837, 838, 863, 864, 865, 873, 874, 886, 888, 889, 894, 895, 896, 899, 900, 901, 905, 906, 907, 909, 910, 911, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 926, 927, 929, 930, 931, 933, 934, 935, 938, 939, 940, 943, 944, 945, 948, 985, 989], "arbitrari": [69, 70, 117, 118, 122, 125, 126, 132, 145, 171, 206, 209, 242, 249, 270, 279, 308, 309, 311], "concatten": [69, 70, 279, 308, 309, 310, 311, 323], "unstack": [69, 70, 128, 131, 567, 948], "dim_siz": [69, 70, 279], "update_config": [69, 70], "global_norm": [69, 70, 82, 83, 580, 581], "vector": [69, 70, 144, 171, 206, 209, 567, 580, 582, 679, 688, 692, 698, 700, 707, 709, 716, 719, 730, 732, 743, 745, 746, 748, 755, 757, 758, 760, 761, 763, 969, 979], "with_default_key_color": [69, 70], "with_entries_as_list": [69, 70], "with_ivy_backend": [69, 70], "with_key_length_limit": [69, 70, 131], "with_print_ind": [69, 70, 131], "with_print_limit": [69, 70, 131], "with_print_line_spac": [69, 70], "containerwithcr": [71, 72, 74], "containerwithdatatyp": [71, 72, 76], "containerwithdevic": [71, 72, 78], "containerwithelementwis": [71, 72, 80, 122], "containerwithgener": [71, 72, 82], "containerwithgradi": [71, 72, 84], "containerwithimag": [71, 72, 86], "containerwithlay": [71, 72, 88], "containerwithlinearalgebra": [71, 72, 90], "containerwithloss": [71, 72, 92], "containerwithnorm": [71, 72, 96], "containerwithrandom": [71, 72, 98], "containerwithsearch": [71, 72, 100], "containerwithset": [71, 72, 102], "containerwithsort": [71, 72, 104], "containerwithstatist": [71, 72, 106], "containerwithutil": [71, 72, 108], "__add__": [71, 72, 114, 115, 121, 122, 126, 130], "__radd__": [71, 72, 114, 115], "arang": [71, 72, 123, 171, 200, 201, 203, 204, 904, 905, 908, 948], "arg_info": [71, 72, 567], "arg_nam": [71, 72, 567], "argmax": [71, 72, 879, 948], "argmin": [71, 72, 879, 948], "array_equ": [71, 72, 567], "as_ivy_dev": [71, 72, 130, 279], "as_ivy_dtyp": [71, 72, 242], "as_native_dev": [71, 72, 279], "as_native_dtyp": [71, 72, 242], "assert_supports_inplac": [71, 72, 567], "astyp": [71, 72, 123, 125, 242], "broadcast_arrai": [71, 72, 242], "broadcast_to": [71, 72, 123, 242], "cache_fn": [71, 72, 118, 567], "clear_mem_on_dev": [71, 72, 279], "clip_matrix_norm": [71, 72, 567], "closest_valid_dtyp": [71, 72, 242], "container_typ": [71, 72, 567], "conv1d": [71, 72, 679, 969], "conv1d_transpos": [71, 72, 679], "conv2d": [71, 72, 679, 948, 969], "conv2d_transpos": [71, 72, 679], "conv3d": [71, 72, 679, 969], "conv3d_transpos": [71, 72, 679], "copy_arrai": [71, 72, 567], "cumprod": [71, 72, 133, 567], "cumsum": [71, 72, 567, 948], "current_backend_str": [71, 72, 567], "default_devic": [71, 72, 124, 128, 279, 317, 320, 327], "default_dtyp": [71, 72, 118, 123, 242], "default_float_dtyp": [71, 72, 123, 242], "default_int_dtyp": [71, 72, 123, 242], "depthwise_conv2d": [71, 72, 679, 948], "dev_clone_arrai": [71, 72, 279], "dev_clone_it": [71, 72, 279], "dev_clone_nest": [71, 72, 279], "dev_dist_arrai": [71, 72, 279], "dev_dist_it": [71, 72, 279], "dev_dist_nest": [71, 72, 279], "dev_unifi": [71, 72, 279], "dev_unify_arrai": [71, 72, 279], "dev_unify_it": [71, 72, 279], "dev_unify_nest": [71, 72, 279], "dev_util": [71, 72, 124, 279], "dropout": [71, 72, 131, 679, 969, 980], "dtype_bit": [71, 72, 242], "execute_with_gradi": [71, 72, 122, 131, 132, 133, 145, 641, 948], "ey": [71, 72, 133, 171, 679, 682, 686], "finfo": [71, 72, 242], "floormod": [71, 72, 567, 948], "fourier_encod": [71, 72, 567], "function_supported_dtyp": [71, 72, 242], "function_unsupported_dtyp": [71, 72, 242], "gelu": [71, 72, 156, 955], "get_all_arrays_in_memori": [71, 72, 567], "get_all_ivy_arrays_on_dev": [71, 72, 124, 279], "get_min_bas": [71, 72, 567], "get_min_denomin": [71, 72, 567], "get_num_dim": [71, 72, 567, 948], "get_referrers_recurs": [71, 72, 567], "gpu_is_avail": [71, 72, 279], "handle_nest": [71, 72, 118, 122, 146], "handle_out_argu": [71, 72, 120, 123, 124, 125, 126, 146], "iinfo": [71, 72, 242], "indices_wher": [71, 72, 567, 948], "infer_devic": [71, 72, 123, 124, 126, 146], "infer_dtyp": [71, 72, 123, 124, 126, 146], "inplace_arrays_support": [71, 72, 567], "inplace_decr": [71, 72, 567], "inplace_incr": [71, 72, 567], "inplace_variables_support": [71, 72, 567], "inputs_to_native_arrai": [71, 72, 121, 146], "invalid_dtyp": [71, 72, 242], "is_float_dtyp": [71, 72, 242], "is_int_dtyp": [71, 72, 242, 567, 637], "is_ivy_contain": [71, 72, 567], "leaky_relu": [71, 72, 156, 948], "linear": [71, 72, 114, 128, 131, 132, 133, 156, 157, 158, 159, 567, 594, 679, 687, 740, 742, 948, 969, 970, 971, 972, 973, 974, 975, 976], "linspac": [71, 72, 128, 171, 172, 173, 948], "logspac": [71, 72, 128, 171], "lstm_updat": [71, 72, 128, 679], "match_kwarg": [71, 72, 567], "matrix_pow": [71, 72, 692], "multi_head_attent": [71, 72, 122, 125, 679], "multinomi": [71, 72, 867], "nonzero": [71, 72, 329, 343, 346, 499, 502, 879], "num_arrays_in_memori": [71, 72, 567], "num_cpu_cor": [71, 72, 124, 279], "num_gpu": [71, 72, 117, 124, 279], "num_ivy_arrays_on_dev": [71, 72, 279], "one_hot": [71, 72, 133, 567, 948], "outputs_to_ivy_arrai": [71, 72, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [71, 72, 279], "print_all_arrays_in_memori": [71, 72, 567], "print_all_ivy_arrays_on_dev": [71, 72, 279], "promote_typ": [71, 72, 242], "randint": [71, 72, 98, 99, 867, 871, 948], "random_norm": [71, 72, 679, 682, 685, 686, 692, 743, 745, 867, 884, 885], "result_typ": [71, 72, 123, 242], "scaled_dot_product_attent": [71, 72, 679], "scatter_flat": [71, 72, 567], "scatter_nd": [71, 72, 130, 567, 948], "set_default_devic": [71, 72, 124, 279, 327], "set_default_dtyp": [71, 72, 118, 123, 242], "set_default_float_dtyp": [71, 72, 123, 242], "set_default_int_dtyp": [71, 72, 123, 242], "set_min_bas": [71, 72, 567], "set_min_denomin": [71, 72, 567], "set_queue_timeout": [71, 72, 567], "set_split_factor": [71, 72, 279], "set_tmp_dir": [71, 72, 567], "set_with_grad": [71, 72, 641], "shape_to_tupl": [71, 72, 123, 567], "sigmoid": [71, 72, 128, 131, 132, 156, 948], "slogdet": [71, 72, 692], "split_factor": [71, 72, 279, 288], "split_func_cal": [71, 72, 279], "stable_divid": [71, 72, 118, 567], "stable_pow": [71, 72, 567], "static_aco": [71, 72], "static_acosh": [71, 72], "static_arg_info": [71, 72], "static_arg_nam": [71, 72], "static_argmax": [71, 72], "static_argmin": [71, 72], "static_arrai": [71, 72], "static_array_equ": [71, 72], "static_arrays_equ": [71, 72], "static_as_ivy_dev": [71, 72], "static_as_ivy_dtyp": [71, 72], "static_as_native_dev": [71, 72], "static_as_native_dtyp": [71, 72], "static_asin": [71, 72], "static_asinh": [71, 72], "static_assert_supports_inplac": [71, 72], "static_astyp": [71, 72], "static_atan": [71, 72], "static_atan2": [71, 72], "static_atanh": [71, 72], "static_bitwise_and": [71, 72], "static_bitwise_invert": [71, 72], "static_bitwise_left_shift": [71, 72], "static_bitwise_or": [71, 72], "static_bitwise_right_shift": [71, 72], "static_bitwise_xor": [71, 72], "static_broadcast_arrai": [71, 72], "static_broadcast_to": [71, 72], "static_cache_fn": [71, 72], "static_ceil": [71, 72], "static_clear_mem_on_dev": [71, 72], "static_clip_matrix_norm": [71, 72], "static_clip_vector_norm": [71, 72], "static_closest_valid_dtyp": [71, 72], "static_concat": [71, 72], "static_constant_pad": [71, 72], "static_container_typ": [71, 72], "static_conv1d": [71, 72], "static_conv1d_transpos": [71, 72], "static_conv2d": [71, 72], "static_conv2d_transpos": [71, 72], "static_conv3d": [71, 72], "static_conv3d_transpos": [71, 72], "static_copy_arrai": [71, 72], "static_co": [71, 72], "static_cosh": [71, 72], "static_cross": [71, 72], "static_cumprod": [71, 72], "static_cumsum": [71, 72], "static_current_backend": [71, 72], "static_current_backend_str": [71, 72], "static_default": [71, 72], "static_default_devic": [71, 72], "static_default_dtyp": [71, 72], "static_default_float_dtyp": [71, 72], "static_default_int_dtyp": [71, 72], "static_depthwise_conv2d": [71, 72], "static_det": [71, 72], "static_dev": [71, 72], "static_dev_clon": [71, 72], "static_dev_clone_arrai": [71, 72], "static_dev_clone_it": [71, 72], "static_dev_clone_nest": [71, 72], "static_dev_dist": [71, 72], "static_dev_dist_arrai": [71, 72], "static_dev_dist_it": [71, 72], "static_dev_dist_nest": [71, 72], "static_dev_unifi": [71, 72], "static_dev_unify_arrai": [71, 72], "static_dev_unify_it": [71, 72], "static_dev_unify_nest": [71, 72], "static_dev_util": [71, 72], "static_diagon": [71, 72], "static_dropout": [71, 72], "static_dtyp": [71, 72], "static_dtype_bit": [71, 72], "static_eigh": [71, 72], "static_eigvalsh": [71, 72], "static_einops_rearrang": [71, 72], "static_einops_reduc": [71, 72], "static_einops_repeat": [71, 72], "static_einsum": [71, 72], "static_empti": [71, 72], "static_equ": [71, 72], "static_erf": [71, 72], "static_execute_with_gradi": [71, 72], "static_exist": [71, 72], "static_exp": [71, 72], "static_expand_dim": [71, 72], "static_expm1": [71, 72], "static_finfo": [71, 72], "static_flip": [71, 72], "static_floor": [71, 72], "static_floor_divid": [71, 72], "static_floormod": [71, 72], "static_fourier_encod": [71, 72], "static_ful": [71, 72], "static_function_supported_dtyp": [71, 72], "static_function_unsupported_dtyp": [71, 72], "static_gath": [71, 72], "static_gelu": [71, 72], "static_get_all_arrays_in_memori": [71, 72], "static_get_all_ivy_arrays_on_dev": [71, 72], "static_get_min_bas": [71, 72], "static_get_min_denomin": [71, 72], "static_get_num_dim": [71, 72], "static_get_referrers_recurs": [71, 72], "static_gpu_is_avail": [71, 72], "static_great": [71, 72], "static_greater_equ": [71, 72], "static_handle_nest": [71, 72], "static_handle_out_argu": [71, 72], "static_has_nan": [71, 72], "static_iinfo": [71, 72], "static_indices_wher": [71, 72], "static_infer_devic": [71, 72], "static_infer_dtyp": [71, 72], "static_inplace_arrays_support": [71, 72], "static_inplace_decr": [71, 72], "static_inplace_incr": [71, 72], "static_inplace_upd": [71, 72], "static_inplace_variables_support": [71, 72], "static_inputs_to_native_arrai": [71, 72], "static_inv": [71, 72], "static_invalid_dtyp": [71, 72], "static_is_arrai": [71, 72], "static_is_float_dtyp": [71, 72], "static_is_int_dtyp": [71, 72], "static_is_ivy_arrai": [71, 72], "static_is_ivy_contain": [71, 72], "static_is_native_arrai": [71, 72], "static_isfinit": [71, 72], "static_isinf": [71, 72], "static_isnan": [71, 72], "static_layer_norm": [71, 72], "static_leaky_relu": [71, 72], "static_less": [71, 72], "static_less_equ": [71, 72], "static_linear": [71, 72], "static_log": [71, 72], "static_log10": [71, 72], "static_log1p": [71, 72], "static_log2": [71, 72], "static_logaddexp": [71, 72], "static_logical_and": [71, 72], "static_logical_not": [71, 72], "static_logical_or": [71, 72], "static_logical_xor": [71, 72], "static_lstm_upd": [71, 72], "static_match_kwarg": [71, 72], "static_matmul": [71, 72], "static_matrix_norm": [71, 72], "static_matrix_pow": [71, 72], "static_matrix_rank": [71, 72], "static_matrix_transpos": [71, 72], "static_max": [71, 72], "static_maximum": [71, 72], "static_mean": [71, 72], "static_min": [71, 72], "static_minimum": [71, 72], "static_multi_head_attent": [71, 72], "static_multinomi": [71, 72], "static_multiprocess": [71, 72], "static_neg": [71, 72], "static_nonzero": [71, 72], "static_not_equ": [71, 72], "static_num_arrays_in_memori": [71, 72], "static_num_cpu_cor": [71, 72], "static_num_gpu": [71, 72], "static_num_ivy_arrays_on_dev": [71, 72], "static_one_hot": [71, 72], "static_out": [71, 72], "static_outputs_to_ivy_arrai": [71, 72], "static_percent_used_mem_on_dev": [71, 72], "static_permute_dim": [71, 72], "static_pinv": [71, 72], "static_posit": [71, 72], "static_pow": [71, 72], "static_print_all_arrays_in_memori": [71, 72], "static_print_all_ivy_arrays_on_dev": [71, 72], "static_prod": [71, 72], "static_promote_typ": [71, 72], "static_qr": [71, 72], "static_queue_timeout": [71, 72], "static_random_norm": [71, 72], "static_relu": [71, 72], "static_remaind": [71, 72], "static_repeat": [71, 72], "static_reshap": [71, 72], "static_result_typ": [71, 72], "static_round": [71, 72], "static_scaled_dot_product_attent": [71, 72], "static_scatter_flat": [71, 72], "static_scatter_nd": [71, 72], "static_se": [71, 72], "static_set_default_devic": [71, 72], "static_set_default_dtyp": [71, 72], "static_set_default_float_dtyp": [71, 72], "static_set_default_int_dtyp": [71, 72], "static_set_min_bas": [71, 72], "static_set_min_denomin": [71, 72], "static_set_queue_timeout": [71, 72], "static_set_split_factor": [71, 72], "static_set_tmp_dir": [71, 72], "static_set_with_grad": [71, 72], "static_shap": [71, 72], "static_shape_to_tupl": [71, 72], "static_shuffl": [71, 72], "static_sigmoid": [71, 72], "static_sign": [71, 72], "static_sin": [71, 72], "static_sinh": [71, 72], "static_slogdet": [71, 72], "static_softmax": [71, 72], "static_solv": [71, 72], "static_split": [71, 72], "static_split_factor": [71, 72], "static_split_func_cal": [71, 72], "static_sqrt": [71, 72], "static_squar": [71, 72], "static_squeez": [71, 72], "static_stable_divid": [71, 72], "static_stable_pow": [71, 72], "static_stack": [71, 72], "static_std": [71, 72], "static_stop_gradi": [71, 72], "static_sum": [71, 72], "static_supports_inplac": [71, 72], "static_svd": [71, 72], "static_svdv": [71, 72], "static_swapax": [71, 72], "static_tensordot": [71, 72], "static_til": [71, 72], "static_tmp_dir": [71, 72], "static_to_devic": [71, 72], "static_to_list": [71, 72], "static_to_native_arrays_and_back": [71, 72], "static_to_numpi": [71, 72], "static_to_scalar": [71, 72], "static_total_mem_on_dev": [71, 72], "static_tpu_is_avail": [71, 72], "static_trac": [71, 72], "static_trunc": [71, 72], "static_try_else_non": [71, 72], "static_type_promote_arrai": [71, 72], "static_unique_al": [71, 72], "static_unique_invers": [71, 72], "static_unique_valu": [71, 72], "static_unset_default_devic": [71, 72], "static_unset_default_dtyp": [71, 72], "static_unset_default_float_dtyp": [71, 72], "static_unset_default_int_dtyp": [71, 72], "static_unset_with_grad": [71, 72], "static_unstack": [71, 72], "static_used_mem_on_dev": [71, 72], "static_valid_dtyp": [71, 72], "static_value_is_nan": [71, 72], "static_var": [71, 72], "static_vari": [71, 72], "static_variable_data": [71, 72], "static_vecdot": [71, 72], "static_vector_norm": [71, 72], "static_vector_to_skew_symmetric_matrix": [71, 72], "static_wher": [71, 72], "static_with_grad": [71, 72], "static_zero_pad": [71, 72], "supports_inplac": [71, 72, 567], "tmp_dir": [71, 72, 567], "to_native_arrays_and_back": [71, 72, 120, 126, 146], "to_scalar": [71, 72, 567], "total_mem_on_dev": [71, 72, 124, 279], "tpu_is_avail": [71, 72, 279], "try_else_non": [71, 72, 567], "type_promote_arrai": [71, 72, 242], "unique_al": [71, 72, 884], "unique_invers": [71, 72, 884], "unique_valu": [71, 72, 884], "unset_default_devic": [71, 72, 279], "unset_default_dtyp": [71, 72, 242], "unset_default_float_dtyp": [71, 72, 242], "unset_default_int_dtyp": [71, 72, 242], "unset_with_grad": [71, 72, 641], "used_mem_on_dev": [71, 72, 279], "valid_dtyp": [71, 72, 242], "value_is_nan": [71, 72, 567], "variable_data": [71, 72, 641], "with_grad": [71, 72, 641, 673], "at_dev": [71, 73, 279, 292, 293], "static_arang": [74, 75, 172], "static_asarrai": [74, 75, 175], "static_empty_lik": [74, 75, 181], "static_ey": [74, 75, 186], "n_row": [74, 75, 171, 186, 187, 188], "n_col": [74, 75, 171, 186, 187, 188], "static_from_dlpack": [74, 75, 189], "static_full_lik": [74, 75, 195], "static_linspac": [74, 75, 200], "num": [74, 75, 128, 171, 200, 201, 202, 203, 204, 205], "endpoint": [74, 75, 171, 200, 201, 202, 203, 205], "static_logspac": [74, 75, 203], "static_meshgrid": [74, 75, 206], "static_native_arrai": [74, 75, 211], "static_on": [74, 75, 216], "static_ones_lik": [74, 75, 219], "static_tril": [74, 75, 224], "static_triu": [74, 75, 229], "static_zero": [74, 75, 234], "static_zeros_lik": [74, 75, 237], "int32": [76, 77, 123, 242, 251, 253, 254, 255, 263, 567, 636, 780, 794, 797, 904, 921, 924, 929, 932], "int64": [76, 77, 123, 242, 251, 253, 254, 255, 263, 329, 384, 387, 879, 880, 881, 904, 921, 924, 929, 932], "static_can_cast": [76, 77, 251], "from_": [76, 77, 242, 251, 254, 255], "static_ab": [80, 81, 330], "static_add": [80, 81, 114, 115, 122, 343], "static_divid": [80, 81, 122, 404], "static_multipli": [80, 81, 122, 499], "static_subtract": [80, 81, 122, 548], "static_tan": [80, 81, 115, 122, 553], "143": [80, 81, 115, 329, 553, 554, 556, 557], "38": [80, 81, 115, 329, 553, 554, 556, 557], "static_tanh": [80, 81, 558], "76": [80, 81, 329, 400, 403, 558, 559, 641, 643, 646, 692, 749, 751, 904, 905, 908], "96": [80, 81, 329, 553, 557, 558, 559, 641, 643, 646, 692, 730, 732, 904, 905, 908], "995": [80, 81, 329, 558, 559, 561, 562], "9999": [80, 81, 558, 559], "static_all_equ": [82, 83, 568, 570], "clip_vector_norm": [82, 83, 567], "max_norm": [82, 83, 567, 579, 580, 581, 582], "static_gather_nd": [82, 83, 596], "adam_upd": [84, 85, 132, 641], "lr": [84, 85, 131, 132, 641, 648, 649, 650, 651, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 985, 986, 987, 988, 989, 990], "mw_tm1": [84, 85, 641, 648, 649, 650, 651, 661, 662, 663, 664], "vw_tm1": [84, 85, 641, 648, 649, 650, 651, 661, 662, 663, 664], "gradient_descent_upd": [84, 85, 641, 840, 841, 842, 843, 948], "is_vari": [84, 85, 125, 641], "lamb_upd": [84, 85, 641], "max_trust_ratio": [84, 85, 641, 661, 662, 663, 664, 985, 987], "decay_lambda": [84, 85, 641, 661, 662, 663, 664, 665, 666, 667, 668, 985, 987, 988], "lars_upd": [84, 85, 641], "optimizer_upd": [84, 85, 641], "effective_grad": [84, 85, 641, 669, 670, 671, 672], "static_adam_step": [84, 85, 643], "87": [84, 85, 98, 99, 641, 643, 646, 647, 869, 871], "976": [84, 85, 329, 558, 562, 641, 643, 646, 647], "static_adam_upd": [84, 85, 648], "static_gradient_descent_upd": [84, 85, 653], "static_is_vari": [84, 85, 657], "static_lamb_upd": [84, 85, 661], "static_lars_upd": [84, 85, 665], "static_optimizer_upd": [84, 85, 669], "73": [90, 91, 329, 540, 543, 692, 693, 695, 696, 697, 862, 863, 866], "577": [90, 91, 692, 693, 695, 696, 697], "41": [90, 91, 130, 329, 388, 391, 540, 543, 692, 693, 695, 696, 697, 904, 929, 932], "707": [90, 91, 692, 693, 695, 696, 697], "static_choleski": [90, 91, 693], "static_rol": [90, 91, 94, 95, 115, 122, 693, 697, 781, 785, 814], "static_binary_cross_entropi": [92, 93, 765], "static_cross_entropi": [92, 93, 770], "static_sparse_cross_entropi": [92, 93, 775], "static_clip": [94, 95, 781], "random_uniform": [98, 99, 124, 132, 867, 948], "static_randint": [98, 99, 869], "20": [98, 99, 130, 329, 388, 391, 417, 420, 524, 527, 540, 543, 692, 704, 706, 730, 732, 749, 751, 867, 869, 870, 871, 879, 882, 883, 904, 905, 908], "40": [98, 99, 329, 400, 403, 540, 543, 692, 730, 732, 869, 871, 904, 905, 908], "62": [98, 99, 869, 871], "52": [98, 99, 641, 643, 646, 692, 730, 732, 869, 871, 884, 885, 904, 905, 908], "95": [98, 99, 641, 643, 646, 869, 871], "37": [98, 99, 329, 553, 557, 862, 863, 866, 869, 871], "42": [98, 99, 133, 156, 162, 165, 641, 643, 646, 692, 730, 732, 867, 869, 871, 877, 904, 905, 908], "13": [98, 99, 115, 122, 329, 368, 371, 388, 391, 400, 403, 540, 543, 567, 585, 641, 643, 646, 679, 691, 692, 704, 706, 730, 732, 862, 863, 866, 869, 871, 879, 883, 884, 885, 904, 905, 908], "static_random_uniform": [98, 99, 873], "static_unique_count": [102, 103, 886], "classivi": [102, 103, 780, 819, 884, 886, 887, 889, 890], "static_argsort": [104, 105, 894], "static_sort": [104, 105, 899], "static_al": [108, 109, 938], "static_ani": [108, 109, 943], "add_ivy_container_instance_method": 110, "containerexampl": [110, 111], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 392, 395, 425, 428, 508, 511, 540, 543, 544, 547, 553, 557, 567, 595, 679, 682, 691, 692, 693, 696, 704, 706, 780, 814, 817, 862, 863, 866, 884, 886, 890, 904, 909, 912, 937, 938, 941], "dynam": [112, 123, 124, 125, 128, 168, 169], "runtim": [112, 117, 279], "h": [112, 122, 679, 682, 683, 684, 685, 686], "j": [112, 567, 575, 576, 692, 752, 754, 904, 905, 908], "borrow": 112, "n": [112, 171, 206, 209, 224, 228, 229, 233, 567, 576, 679, 687, 692, 704, 706, 716, 719, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 743, 745, 746, 748, 752, 754, 755, 757, 758, 760, 761, 763, 780, 790, 793, 794, 797, 802, 805, 824, 827, 836, 839, 867, 872, 873, 875, 879, 882, 904, 913, 916, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "taken": [113, 133, 692, 704, 706], "constant": [113, 118, 132, 133, 145, 279, 288, 289, 780, 790, 793, 844, 850, 862, 863, 866, 960, 961, 965, 968, 981, 982, 983, 984], "compil": [113, 122, 127, 129, 145, 948, 981, 982, 985, 986, 987, 988, 989, 990], "meta": [113, 121, 841, 842, 843], "overlap": 113, "sever": [113, 145, 692, 713, 715], "judgement": 113, "locat": [113, 117, 119, 124, 867, 868], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 948], "anyth": [113, 948], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 844, 845, 854, 855], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 168, 169, 171, 180, 186, 187, 194, 195, 198, 200, 201, 203, 204, 216, 217, 224, 228, 229, 233, 234, 236, 242, 250, 259, 261, 262, 265, 268, 279, 301, 304, 305, 306, 307, 315, 316, 317, 323, 324, 329, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 567, 573, 585, 586, 589, 590, 591, 594, 595, 604, 620, 623, 624, 629, 630, 639, 641, 643, 646, 648, 650, 661, 663, 679, 680, 682, 684, 685, 686, 692, 698, 700, 704, 706, 749, 751, 752, 754, 755, 757, 758, 760, 764, 770, 773, 775, 778, 780, 786, 789, 790, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 856, 862, 863, 866, 867, 868, 869, 870, 872, 873, 875, 877, 879, 880, 881, 893, 894, 897, 899, 902, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "nativedtyp": [113, 123, 124, 126, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 242, 247, 248, 258, 259, 260, 269, 904, 929, 932], "nativedevic": [113, 123, 124, 126, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 194, 195, 198, 200, 201, 203, 204, 211, 214, 216, 217, 219, 222, 234, 236, 237, 241, 279, 296, 297, 298, 312, 318, 320, 322, 324, 325, 328, 567, 620, 867, 868, 869, 870, 872, 873, 875], "my": 113, "numer": [113, 132, 171, 206, 209, 242, 248, 329, 330, 333, 343, 346, 392, 395, 404, 407, 421, 424, 425, 428, 429, 432, 441, 444, 445, 448, 449, 452, 453, 456, 485, 488, 489, 492, 499, 502, 504, 507, 508, 511, 516, 519, 520, 523, 528, 531, 544, 547, 548, 552, 563, 566, 567, 602, 603, 625, 626, 631, 632, 692, 698, 700, 716, 719, 730, 732, 743, 745, 749, 751, 752, 754, 755, 757, 867, 878, 879, 880, 881, 904, 909, 912, 921, 924, 929, 932, 960], "cooler": 113, "produc": [113, 279, 288, 289, 679, 691], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 948], "spec": [114, 115], "api_specif": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 948], "approxim": [114, 156, 157, 329, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 417, 420, 421, 424, 461, 464, 465, 468, 469, 472, 473, 476, 516, 519, 532, 535, 536, 539, 553, 557, 558, 562, 692, 724, 726, 733, 735], "tangent": [114, 156, 167, 329, 356, 359, 360, 363, 364, 367, 553, 557, 558, 562], "domain": [114, 329, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 417, 420, 421, 424, 461, 464, 465, 468, 473, 476, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562], "infin": [114, 170, 242, 248, 329, 330, 333, 339, 342, 343, 346, 352, 355, 356, 359, 360, 363, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 429, 432, 441, 444, 445, 448, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 692, 758, 760, 904, 909, 912, 917, 920, 937, 938, 941, 943, 946], "codomain": [114, 329, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 396, 399, 400, 403, 417, 420, 421, 424, 461, 464, 465, 468, 473, 476, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562], "x_i": [114, 329, 330, 333, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 372, 375, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 441, 444, 445, 448, 449, 452, 461, 464, 465, 468, 473, 476, 485, 488, 504, 507, 524, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 553, 557, 558, 562, 563, 566, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936], "assum": [114, 119, 123, 130, 131, 145, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 396, 399, 400, 403, 425, 428, 508, 511, 524, 527, 532, 535, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "express": [114, 128, 133, 329, 335, 338, 348, 351, 356, 359, 360, 363, 396, 399, 532, 535, 553, 557], "radian": [114, 329, 335, 338, 348, 351, 356, 359, 360, 363, 396, 399, 532, 535, 553, 557], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 170, 171, 172, 173, 180, 186, 187, 194, 195, 198, 200, 201, 203, 204, 216, 217, 234, 236, 242, 248, 258, 262, 267, 270, 279, 312, 318, 322, 325, 328, 329, 330, 333, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 409, 412, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 453, 456, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 548, 552, 553, 557, 558, 562, 563, 566, 567, 579, 580, 582, 594, 602, 603, 625, 626, 631, 632, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 682, 686, 691, 692, 693, 696, 701, 703, 707, 709, 710, 712, 713, 715, 724, 726, 733, 735, 736, 738, 740, 742, 743, 745, 758, 760, 764, 765, 768, 770, 773, 775, 778, 840, 841, 842, 843, 862, 863, 866, 867, 872, 873, 875, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936], "operand": [114, 329, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 360, 363, 388, 391, 392, 395, 396, 399, 400, 403, 417, 420, 421, 424, 425, 428, 461, 464, 465, 468, 473, 476, 477, 480, 499, 502, 516, 519, 520, 523, 524, 527, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 563, 566, 904, 905, 908, 909, 912, 917, 920, 929, 932], "whose": [114, 171, 224, 228, 229, 233, 329, 339, 342, 352, 355, 364, 367, 396, 399, 400, 403, 516, 519, 532, 535, 536, 539, 553, 557, 558, 562, 567, 578, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754, 780, 798, 801, 814, 817, 884, 885, 886, 890, 904, 905, 908], "ref": [114, 329, 384, 387, 453, 456, 499, 502, 508, 511, 520, 523, 548, 552, 780, 824, 827], "promot": [114, 118, 123, 242, 248, 251, 254, 269, 270, 274, 329, 335, 338, 339, 342, 343, 346, 348, 351, 352, 355, 356, 359, 364, 367, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 396, 399, 400, 403, 404, 407, 417, 420, 421, 424, 461, 464, 465, 468, 473, 476, 477, 480, 493, 496, 499, 502, 516, 519, 520, 523, 532, 535, 536, 539, 540, 543, 553, 557, 558, 562, 692, 693, 696, 698, 700, 713, 715, 716, 719, 724, 726, 730, 732, 733, 735, 740, 742, 755, 757, 758, 760, 780, 824, 827, 904, 913, 916], "But": [114, 122, 133], "needless": 114, "info": [114, 948], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 421, 424, 425, 428, 457, 460, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 692, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "org": [114, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 641, 643, 646, 648, 650, 692, 704, 706, 780, 794, 797, 814, 817, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "elementwise_funct": [114, 329, 330, 333, 348, 351, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 540, 543, 544, 547, 692, 704, 706, 780, 814, 817, 884, 885, 893, 894, 897, 904, 909, 912], "descript": [114, 122, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 758, 760, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912, 937, 938, 941], "simplic": [114, 132, 144, 171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 203, 204, 206, 209, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241, 242, 251, 254, 329, 330, 333, 343, 346, 348, 351, 368, 371, 388, 391, 392, 395, 400, 403, 425, 428, 508, 511, 524, 527, 540, 543, 544, 547, 553, 557, 558, 562, 567, 595, 679, 682, 691, 692, 693, 696, 701, 703, 704, 706, 780, 794, 797, 798, 801, 814, 817, 862, 863, 866, 884, 885, 886, 890, 893, 894, 897, 904, 909, 912], "judgment": 114, "beyond": [114, 780, 814, 817], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 844, 845], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 981, 982, 985, 989], "_forward": [114, 128, 131, 132, 948], "former": 114, "trainabl": [114, 129, 131, 132, 641, 657, 659, 958, 959, 981, 982, 991], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 692, 707, 709, 969, 978, 980, 981, 982], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 171, 206, 209, 329, 330, 333, 343, 346, 360, 363, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 409, 412, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 520, 523, 548, 552, 641, 643, 646, 648, 650, 652, 653, 655, 661, 663, 665, 667, 669, 671, 692, 736, 738, 840, 841, 842, 843], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 692, 698, 700, 740, 742, 867, 868], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 171, 206, 209], "vari": [115, 117, 122, 130, 884, 885, 886, 890, 892], "simplest": 115, "small": [115, 118, 128, 132, 145, 329, 499, 502, 692, 724, 726, 733, 735, 862, 863, 866, 983, 984], "unus": [115, 125, 168, 169], "18": [115, 122, 329, 388, 391, 692, 704, 706, 730, 732, 904, 905, 908], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 329, 396, 399, 400, 403, 540, 543, 679, 691, 692, 730, 732, 867, 872, 904, 905, 908], "jointli": 115, "three": [115, 122, 127, 171, 206, 209, 948], "x0": [115, 567, 575], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 679, 690, 692, 698, 700, 948, 954, 969, 980], "seper": [115, 567, 594], "pars": [115, 145], "satisfi": [115, 692, 761, 763], "far": [115, 124, 129, 130, 844, 845, 855], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 692, 707, 709, 743, 745], "rule": [115, 117, 118, 121, 122, 123, 242, 248, 251, 254, 270, 329, 364, 367, 384, 387, 404, 407, 499, 502, 520, 523, 692, 693, 696, 698, 700, 730, 732, 740, 742], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 692, 704, 706, 867, 872], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 567, 585, 586, 692, 755, 757, 780, 806, 809, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "non": [115, 122, 123, 128, 168, 169, 242, 248, 266, 329, 485, 488, 489, 492, 679, 682, 692, 701, 703, 724, 726, 743, 745, 749, 751, 755, 757, 758, 760, 879, 880, 881, 882, 904, 909, 912, 913, 916, 917, 920, 921, 924, 933, 936, 937, 938, 941, 943, 946, 981, 982, 985, 989], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 279], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 279], "300": [117, 329, 524, 527], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 679, 687, 867, 868, 872, 873, 875, 904, 925, 928, 933, 936, 969, 977], "rang": [117, 131, 132, 133, 171, 172, 173, 200, 201, 203, 204, 884, 885, 904, 921, 924, 929, 932, 948], "cach": [117, 118, 279, 297, 567, 578], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 844, 853], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 948, 954], "truth": [117, 329, 409, 412, 433, 436, 437, 440, 453, 456, 457, 460, 508, 511], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 567, 588], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 904, 925, 928, 933, 936], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 904, 925, 928, 933, 936], "outsid": [118, 124, 128, 130, 133, 780, 781, 784, 824, 827], "denomin": [118, 145, 567, 593, 603, 626, 631, 632, 862, 863, 866, 983, 984], "divis": [118, 329, 384, 387, 404, 407, 429, 432, 520, 523, 567, 593, 603, 626, 631, 632, 641, 643, 646, 648, 650, 661, 663, 985, 986, 987], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 679, 688, 689, 691, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 985, 987, 988], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 242, 248, 251, 254, 780, 786, 789, 904, 921, 924, 929, 932, 948], "get_all_arrays_on_dev": 118, "nested_map": [118, 844], "index_nest": [118, 844], "implicit_backend": 119, "unless": [119, 124, 125, 145, 329, 499, 502, 567, 620], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 641, 643, 646, 648, 650, 661, 663, 985, 986, 987], "fallback": 119, "freedom": [119, 904, 925, 928, 933, 936], "recommend": [119, 329, 485, 488, 489, 492, 520, 523, 904, 913, 916], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "logic": [120, 121, 123, 124, 130, 279, 315, 329, 481, 484, 485, 488, 489, 492, 937, 938, 941, 943, 946, 948], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 948], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 329, 368, 371, 380, 383, 388, 391, 493, 496], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 567, 594, 780, 794, 797], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 329, 388, 391, 400, 403], "22": [122, 329, 388, 391, 692, 704, 706, 730, 732, 879, 883, 904, 905, 908], "retain_grad": [122, 641, 652], "dy": [122, 641, 652], "dx": [122, 641, 652], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 948, 985, 989], "redund": 122, "num_head": [122, 679, 690, 969, 980], "mask": [122, 679, 690, 691], "to_q_fn": [122, 679, 690], "to_kv_fn": [122, 679, 690], "to_out_fn": [122, 125, 679, 690], "to_q_v": [122, 679, 690], "to_kv_v": [122, 679, 690], "to_out_v": [122, 679, 690], "measur": [122, 679, 690, 969, 980], "dot": [122, 679, 690, 691, 692, 749, 751, 755, 757, 969, 980], "product": [122, 329, 499, 502, 567, 585, 679, 690, 691, 692, 698, 700, 716, 719, 730, 732, 749, 751, 755, 757, 904, 905, 908, 921, 924, 969, 980], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 242, 263], "int16": [123, 242, 251, 254, 263, 904, 921, 924, 929, 932], "uint8": [123, 242, 251, 254, 263], "uint16": [123, 242, 264, 904, 921, 924, 929, 932], "uint32": [123, 242, 264, 904, 921, 924, 929, 932], "uint64": [123, 242, 264, 904, 921, 924, 929, 932], "bfloat16": [123, 242, 263], "float16": [123, 242, 264], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 948, 981, 982, 985, 989], "valid": [123, 128, 242, 256, 679, 680, 681, 682, 683, 684, 685, 686, 780, 824, 827, 937, 938, 941, 943, 946, 969, 970, 971, 972, 973, 974, 975, 976], "invalid": [123, 692, 755, 757, 937, 938, 941, 943, 946], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 329, 343, 346, 904, 929, 932], "arr": [123, 124, 862, 863, 866], "scalar": [123, 128, 133, 145, 171, 195, 198, 567, 620, 637, 640, 692, 758, 760], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 948], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 948], "nd": [123, 124, 125, 128, 133, 948], "deleg": 123, "as_n": [123, 242, 257, 258, 259, 260, 279, 298, 299, 320], "idx": [124, 130, 567, 573], "tpu": [124, 279, 301, 326], "aliv": [124, 279, 313, 317, 319, 567, 601, 619, 621], "amount": [124, 279, 325, 764, 765, 768, 770, 773, 775, 778], "memori": [124, 125, 143, 145, 279, 297, 318, 323, 325, 328, 679, 689, 948], "dual": 124, "thrown": [124, 145, 567, 611], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 567, 611], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 567], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 242, 248], "inclus": [125, 171, 172, 173, 867, 869, 870], "omit": [125, 126, 884, 885, 886, 890, 892], "unspecifi": [125, 329, 516, 519, 520, 523, 692, 707, 709, 780, 824, 827], "predominantli": [125, 144], "math": [125, 133, 948], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 692, 707, 709, 716, 719, 840, 841, 842, 843], "third": [125, 145, 692, 743, 745, 884, 885], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 171, 172, 173, 329, 384, 387, 485, 488, 489, 492, 520, 523, 692, 724, 726, 733, 735, 740, 742, 758, 760], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 641, 677, 958, 959], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 904, 929, 932], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "overview": [127, 144], "handler": [127, 129, 133, 948], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 329, 516, 519, 520, 523, 884, 885, 886, 890, 892], "fit": [128, 780, 806, 809], "construct": [128, 129, 132, 133, 780, 832, 835, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 780, 781, 784, 790, 793, 836, 839, 948], "larger": [128, 133, 242, 262, 780, 781, 784, 814, 817, 904, 925, 928, 933, 936], "ml_framework": [128, 133, 171, 172, 173], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 279, 308, 567, 594, 780, 786, 789, 948], "framework_handl": 128, "face": 128, "verbos": [128, 948, 995], "cprint": [128, 994], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 780, 820, 823], "get_framework": 128, "neither": [128, 329, 343, 346, 499, 502], "illustr": [128, 144], "un": [128, 242, 266], "nn": [128, 133, 171, 206, 209, 948], "init_h": [128, 679, 689], "init_c": [128, 679, 689], "kernel": [128, 145, 679, 689], "recurrent_kernel": [128, 679, 689], "bia": [128, 132, 679, 688, 689, 969, 970, 971, 972, 973, 974, 975, 976, 979], "recurrent_bia": [128, 679, 689], "x_shape": 128, "batch_shap": [128, 130, 133, 567, 620, 679, 689, 690, 691, 692, 761, 763, 867, 868, 969, 978], "timestep": [128, 679, 689, 969, 978], "input_channel": [128, 132, 969, 970, 971, 972, 973, 974, 975, 978, 979], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 679, 689], "wh": 128, "lstm": [128, 679, 689, 969], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 679, 689], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 948], "reduce_sum": [128, 948], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 242, 263, 264, 279, 288, 289, 567, 573, 638, 844, 845, 850, 851, 852, 854, 855, 856, 951, 953], "example_input": [128, 168, 169], "static_argnum": [128, 168, 169], "static_argnam": [128, 168, 169], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "hierarch": [129, 131, 132], "straight": [130, 948], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 567], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 171, 206, 209], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 692, 736, 738, 743, 745], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 171, 206, 209], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 329, 384, 387, 417, 420, 516, 519, 567, 602, 625, 632, 692, 723, 960], "enforc": 130, "notic": 130, "appear": [130, 780, 794, 797], "invers": [130, 144, 329, 335, 338, 339, 342, 348, 351, 352, 355, 356, 359, 360, 363, 364, 367, 692, 713, 715, 733, 735], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 567, 583], "newshap": 130, "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 948, 954], "hold": [131, 567, 623, 624], "1000": [131, 329, 540, 543], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 679, 680, 681, 682, 683, 684, 685, 686, 867, 868], "dir": 131, "adam": [131, 132, 133, 641, 643, 646, 648, 650, 661, 663, 948, 985, 987], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 170], "decod": 131, "l0": 131, "l1": [131, 692, 758, 760], "depth": [131, 132, 133, 144, 279, 303, 307, 311, 567, 605, 620, 844, 856, 981, 982], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 948], "img_min": 131, "reduce_min": [131, 948], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 780, 824, 827, 862, 863, 866, 867, 872, 983, 984], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 948], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "batch_slic": 131, "model": [131, 132, 948], "mymodel": [131, 948], "linear0": [131, 132, 948], "linear1": [131, 132, 948], "x_in": [131, 132, 133, 948], "001": [131, 132, 641, 643, 646, 862, 863, 866], "loss_fn": [131, 132, 133, 948], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 969, 970, 971, 972, 973, 974, 975, 978, 979], "with_bia": [132, 969, 979], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 679, 689, 969, 978], "fed": [132, 279, 323], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979], "glorotuniform": [132, 960, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979], "bias_initi": [132, 969, 970, 971, 972, 973, 974, 975, 976, 979], "_w_init": 132, "_b_init": 132, "create_vari": [132, 960], "var_shap": [132, 960], "fan_out": [132, 960], "fan_in": [132, 960], "fan_mod": [132, 960], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 840, 842], "descent": [132, 641, 653, 655, 985, 990], "lar": [132, 641, 661, 663, 665, 667, 985], "lamb": [132, 641, 661, 663, 985], "compile_on_next_step": [132, 981, 982, 985, 986, 987, 988, 989, 990], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 985, 989], "new_v": 132, "_lr": 132, "isinst": [132, 133, 567, 635], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 985, 986, 987, 988, 989, 990], "pre": [133, 145, 279], "captur": 133, "sparse_funct": 133, "num_class": [133, 867, 868], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 862, 863, 866, 983, 984], "to_ivy_modul": [133, 958], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 679, 687, 688], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 329, 524, 527], "tree_multimap": 133, "mechan": [143, 145, 948], "vision": [143, 948], "robot": [143, 948], "focus": 144, "field": [144, 692, 707, 709, 736, 738, 743, 745, 884, 885, 886, 890], "perfect": 144, "3d": [144, 969, 974, 975], "differenti": 144, "demo": [144, 948], "orient": 144, "pose": 144, "euler": [144, 170], "quaternion": 144, "rotat": 144, "matric": [144, 171, 206, 209, 224, 228, 229, 233, 679, 688, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 723, 724, 726, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754], "angl": [144, 329, 360, 363, 400, 403, 536, 539, 558, 562], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 692, 740, 742], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 679, 948, 955, 969], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 948], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 567, 585, 586], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 168, 169, 844, 854, 855, 879, 883], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 329, 520, 523, 692, 755, 757, 937, 938, 941, 943, 946], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 242, 262, 265, 329, 516, 519, 904, 921, 924, 929, 932], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 279, 288, 289], "spmd": 145, "mixtur": [145, 641, 643, 646], "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 844, 846], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 329, 417, 420, 641, 643, 646, 692, 730, 732, 904, 905, 908], "85": [156, 158, 329, 388, 391], "48": [156, 158, 329, 540, 543, 641, 643, 646, 692, 730, 732, 904, 905, 908], "88": [156, 158, 329, 388, 391, 692, 730, 732, 904, 905, 908], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 764, 775, 778], "49": [156, 161, 329, 540, 543, 904, 905, 908], "147": [156, 161], "363": [156, 161], "3461": [156, 162, 165], "6491": [156, 162, 165], "535": [156, 162, 165], "hyperbol": [156, 167, 329, 339, 342, 352, 355, 364, 367, 400, 403, 536, 539, 558, 562], "55": [156, 167, 679, 685, 692, 730, 732, 904, 905, 908], "501": [156, 167], "array_method": [162, 163, 175, 176, 181, 182, 189, 190, 195, 196, 206, 207, 211, 212, 219, 220, 224, 226, 229, 231, 237, 239, 251, 252, 330, 331, 335, 336, 339, 340, 343, 344, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 499, 500, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 550, 553, 555, 558, 560, 563, 564, 568, 569, 596, 597, 643, 644, 693, 694, 698, 699, 701, 702, 704, 705, 707, 708, 710, 711, 713, 714, 716, 717, 720, 721, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 765, 766, 770, 771, 775, 776, 781, 782, 786, 787, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 820, 821, 824, 825, 828, 829, 832, 833, 836, 837, 863, 864, 886, 888, 894, 895, 899, 900, 905, 906, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 938, 939, 943, 944], "container_method": [162, 164, 166, 172, 174, 175, 177, 179, 181, 183, 185, 186, 188, 189, 191, 193, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 211, 213, 215, 216, 218, 219, 221, 223, 224, 225, 227, 229, 230, 232, 234, 235, 237, 238, 240, 251, 253, 255, 330, 332, 334, 335, 337, 339, 341, 343, 345, 347, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 499, 501, 503, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 549, 551, 553, 554, 556, 558, 559, 561, 563, 565, 568, 570, 572, 580, 581, 596, 598, 600, 643, 645, 647, 648, 649, 651, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 693, 695, 697, 716, 718, 765, 767, 769, 770, 772, 774, 775, 777, 779, 781, 783, 785, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 863, 865, 869, 871, 873, 874, 876, 886, 887, 889, 894, 896, 898, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 938, 940, 942, 943, 945, 947], "faster": [168, 169], "invoc": [168, 169], "718281828459045": 170, "newaxi": 170, "alia": 170, "pi": 170, "141592653589793": 170, "mathemat": [170, 329, 343, 346, 360, 363, 421, 424, 499, 502, 692, 758, 760], "half": [171, 172, 173, 867, 869, 870, 873, 875], "chosen": [171, 172, 173, 329, 360, 363, 879, 883], "distanc": [171, 172, 173], "adjac": [171, 172, 173], "creation_funct": [171, 172, 173, 175, 178, 180, 181, 184, 186, 187, 189, 192, 194, 195, 198, 200, 201, 216, 217, 219, 222, 224, 228, 229, 233, 234, 236, 237, 241], "interpret": [171, 175, 178, 211, 214], "uniniti": [171, 180, 181, 184], "elsewher": [171, 186, 187, 879, 883], "row": [171, 186, 187, 692, 740, 742, 743, 745, 867, 868, 879, 882], "column": [171, 186, 187, 692, 707, 709, 736, 738, 740, 742, 743, 745], "__dlpack__": [171, 189, 192, 279, 324], "interchang": [171, 189, 192, 780, 828, 831], "coordin": [171, 206, 209, 329, 360, 363], "cartesian": [171, 206, 209], "ij": [171, 206, 209, 904, 905, 908], "rank": [171, 206, 209, 567, 639, 692, 698, 700, 724, 726, 736, 738, 740, 742, 752, 754, 755, 757, 758, 760, 780, 790, 793, 794, 797, 824, 827, 836, 839, 879, 882, 937, 938, 941, 943, 946], "ni": [171, 206, 209], "xi": [171, 206, 209], "n1": [171, 206, 209], "n2": [171, 206, 209], "n3": [171, 206, 209], "accordingli": [171, 206, 209, 329, 421, 424, 692, 758, 760, 879, 881, 884, 885, 886, 890, 892, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "xv": [171, 206, 209], "yv": [171, 206, 209], "triangular": [171, 224, 228, 229, 233, 692, 693, 696, 736, 738], "innermost": [171, 224, 228, 229, 233, 692, 693, 696, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 724, 726, 727, 729, 733, 735, 736, 738, 740, 742, 743, 745, 746, 748, 752, 754], "mxn": [171, 224, 228, 229, 233, 692, 704, 706, 724, 726, 727, 729, 733, 735, 736, 738, 746, 748, 752, 754], "defaultdtyp": [242, 243], "defaultfloatdtyp": [242, 244], "float_dtyp": [242, 258, 272], "defaultintdtyp": [242, 245], "dtype_in": [242, 246, 247, 261, 266, 267, 268, 278], "incompat": [242, 250], "occur": [242, 251, 254, 879, 880, 881, 884, 885, 886, 890, 892], "data_type_funct": [242, 251, 254], "closest": [242, 256, 329, 392, 395, 425, 428, 429, 432, 524, 527, 563, 566], "floatdtyp": [242, 258], "int_dtyp": [242, 259, 273], "intdtyp": [242, 259], "followng": [242, 262], "occupi": [242, 262, 265, 567, 623, 624], "ep": [242, 262, 692, 724, 726, 733, 735], "smallest_norm": [242, 262], "precis": [242, 262, 329, 499, 502, 540, 543], "encapsul": [242, 265], "type1": [242, 269], "type2": [242, 269], "arrays_and_dtyp": [242, 270], "ret1": [242, 274], "ret2": [242, 274], "noinspect": [243, 244, 245, 280, 642], "pyshadowingnam": [243, 244, 245, 280, 642], "defaultdevic": [279, 280], "__enter__": 279, "_dev": 279, "initialis": 279, "devcloneditem": [279, 301], "multidevitem": [279, 281, 284], "devclonedit": 279, "multidevit": [279, 282, 285, 288, 289, 293], "devclonednest": 279, "multidevnest": [279, 283, 286], "devdistitem": 279, "devdistit": 279, "devdistnest": 279, "devmanag": [279, 287], "dev_mapp": 279, "da_dim_s": 279, "safety_factor": 279, "min_dev_dim_s": 279, "max_dev_dim_step_ratio": 279, "min_unit_dev_tune_step": 279, "min_sf_tune_step": 279, "starting_split_factor": 279, "max_split_factor_step_s": 279, "tune_dev_alloc": 279, "tune_dev_split": 279, "mapper": [279, 288, 289], "receivess": 279, "ratio": [279, 641, 661, 663, 985, 987], "safe": [279, 288], "oom": 279, "tune": 279, "da_tune_step": 279, "ds_tune_step": 279, "to_clon": 279, "to_distribut": 279, "multidevic": [279, 288], "parallel": [279, 288, 289], "mutlidevic": [279, 288], "repeated_config_check": 279, "tune_step": 279, "devmapp": [279, 289], "ret_fn": [279, 288, 289], "queue_class": [279, 288, 289], "worker_class": [279, 288, 289], "worker": [279, 288, 289], "used_dev": [279, 288], "sf": [279, 288], "devmappermultiproc": 279, "multidev": [279, 290, 291, 292, 311], "profil": 279, "save_dir": [279, 294], "deviceic": [279, 300], "spread": [279, 311], "139740789224448": [279, 313], "physic": [279, 315], "x3": [279, 317], "x4": [279, 317], "process_specif": [279, 318, 328], "percentag": [279, 318], "ram": [279, 318, 325, 328], "alon": [279, 318, 328], "attr_onli": [279, 319], "chunk": [279, 321, 322, 323], "max_chunk_s": [279, 323], "chunk_siz": [279, 323], "input_ax": [279, 323], "output_ax": [279, 323], "feed": [279, 323], "fist": [279, 323], "stream": [279, 324], "caveat": [279, 324], "portabl": [279, 324, 948], "gb": [279, 325, 328], "reset": [279, 327], "magnitud": [329, 330, 333, 343, 346, 499, 502, 692, 743, 745, 746, 748], "princip": [329, 335, 338, 348, 351, 356, 359], "cosin": [329, 335, 338, 339, 342, 396, 399, 400, 403], "x1_i": [329, 343, 346, 360, 363, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 409, 412, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 548, 552], "x2_i": [329, 343, 346, 360, 363, 368, 371, 376, 379, 380, 383, 384, 387, 388, 391, 404, 407, 409, 412, 429, 432, 433, 436, 437, 440, 453, 456, 457, 460, 477, 480, 481, 484, 489, 492, 493, 496, 499, 502, 508, 511, 516, 519, 520, 523, 548, 552], "finit": [329, 343, 346, 360, 363, 441, 444, 499, 502, 516, 519, 520, 523], "nor": [329, 343, 346, 499, 502], "nearest": [329, 343, 346, 499, 502, 524, 527], "2019": [329, 343, 346, 421, 424, 499, 502], "commut": [329, 343, 346], "sine": [329, 348, 351, 352, 355, 532, 535, 536, 539], "57": [329, 348, 351, 388, 391, 400, 403], "524": [329, 348, 351], "644": [329, 348, 351], "201": [329, 348, 351, 524, 527], "305": [329, 348, 351], "412": [329, 348, 351], "quotient": [329, 360, 363], "notat": [329, 360, 363, 904, 905, 908], "denot": [329, 360, 363], "pair": [329, 360, 363, 679, 691, 692, 698, 700], "quadrant": [329, 360, 363], "3\u03c0": [329, 360, 363], "549": [329, 364, 367], "bitwis": [329, 368, 371, 380, 383, 388, 391, 493, 496], "AND": [329, 368, 371, 481, 484, 937, 938, 941], "binari": [329, 368, 371, 380, 383, 388, 391, 493, 496, 764, 765, 768], "invert": [329, 372, 375], "arithmet": [329, 384, 387, 904, 913, 916], "propag": [329, 384, 387, 904, 909, 912, 913, 916, 917, 920, 925, 928, 929, 932, 933, 936], "thu": [329, 384, 387, 516, 519, 520, 523, 692, 707, 709], "lh": [329, 384, 387], "rh": [329, 384, 387], "xor": [329, 388, 391, 493, 496], "78": [329, 388, 391, 692, 730, 732, 904, 905, 908], "91": [329, 388, 391, 692, 730, 732, 904, 905, 908], "23": [329, 388, 391, 679, 685, 692, 704, 706, 879, 883], "66": [329, 388, 391, 692, 730, 732, 904, 905, 908], "77": [329, 388, 391, 692, 730, 732, 904, 905, 908], "79": [329, 388, 391], "89": [329, 388, 391, 692, 749, 751, 904, 929, 932], "98": [329, 388, 391, 692, 730, 732, 879, 883, 904, 905, 908], "26": [329, 388, 391, 641, 643, 646, 679, 686, 692, 704, 706, 730, 732, 749, 751, 904, 905, 908], "21": [329, 388, 391, 567, 585, 692, 704, 706, 730, 732, 764, 775, 778, 904, 905, 908], "34": [329, 388, 391, 540, 543], "24": [329, 388, 391, 540, 543, 567, 585, 641, 643, 646, 692, 704, 706, 730, 732, 904, 905, 908], "51": [329, 388, 391], "27": [329, 388, 391, 400, 403, 540, 543, 679, 691, 692, 730, 732, 904, 905, 908], "74": [329, 388, 391], "59": [329, 388, 391], "416": [329, 396, 399], "122": [329, 400, 403], "368": [329, 400, 403], "670": [329, 400, 403], "202": [329, 400, 403, 524, 527], "548": [329, 400, 403], "1490": [329, 400, 403], "dividend": [329, 404, 407, 520, 523], "divisor": [329, 404, 407, 520, 523, 641, 643, 646, 648, 650, 661, 663, 904, 925, 928, 933, 936, 985, 986, 987], "gauss": [329, 413, 416], "exponenti": [329, 413, 416, 417, 420, 477, 480, 516, 519], "logarithm": [329, 417, 420, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 692, 739], "72": [329, 417, 420, 641, 643, 646, 692, 730, 732, 904, 905, 908], "accur": [329, 421, 424], "fdlibm": [329, 421, 424], "compliant": [329, 421, 424, 485, 488, 489, 492, 904, 909, 912, 913, 916, 917, 920], "greatest": [329, 425, 428, 429, 432], "out_i": [329, 441, 444, 445, 448, 449, 452], "threshold": [329, 497, 498], "exce": [329, 498], "y_i": [329, 504, 507], "expon": [329, 516, 519, 567, 632], "versu": [329, 516, 519], "odd": [329, 516, 519], "modulu": [329, 520, 523], "primarili": [329, 520, 523], "5654": [329, 524, 527], "034": [329, 524, 527], "433": [329, 524, 527], "343": [329, 524, 527], "44": [329, 524, 527, 540, 543, 544, 547, 692, 730, 732, 879, 883, 904, 905, 908], "30": [329, 524, 527, 692, 730, 732, 904, 905, 908, 960, 966], "81": [329, 524, 527, 544, 547, 904, 905, 908], "527": [329, 524, 527], "301": [329, 524, 527], "indistinguish": [329, 540, 543], "infinit": [329, 540, 543], "83": [329, 540, 543], "32455532": [329, 540, 543], "89897949": [329, 540, 543], "50": [329, 540, 543, 692, 730, 732, 879, 882, 904, 905, 908], "31": [329, 540, 543], "169": [329, 540, 543], "47": [329, 540, 543], "93": [329, 540, 543], "35": [329, 540, 543, 679, 691, 692, 698, 700, 879, 883, 904, 905, 908], "09": [329, 544, 547, 679, 691], "61": [329, 544, 547, 764, 765, 768], "546": [329, 553, 557], "842": [329, 553, 557], "916": [329, 553, 557, 764, 765, 768], "996": [329, 553, 557], "328": [329, 553, 557], "real": [329, 558, 562], "462": [329, 558, 562], "604": [329, 558, 562], "984": [329, 558, 562], "997": [329, 558, 562, 862, 863, 866], "decim": [329, 563, 566], "inspect": [567, 573, 952, 953], "downscal": [567, 579, 580, 582], "60": [567, 585, 692, 730, 732, 904, 905, 908], "default_v": [567, 588], "catch_except": [567, 588], "rev": [567, 588], "with_cal": [567, 588], "arrang": [567, 589], "123": [567, 592], "mod": [567, 593], "max_freq": [567, 594], "num_band": [567, 594], "pad": [567, 594, 679, 680, 681, 682, 683, 684, 685, 686, 780, 790, 793, 836, 839, 969, 970, 971, 972, 973, 974, 975, 976], "fourier": [567, 594], "band": [567, 594], "linearli": [567, 594, 692, 740, 742], "oppos": [567, 594], "geometr": [567, 594], "seen_set": [567, 605], "local_set": [567, 605], "decrement": [567, 609], "is_arrai": 567, "allow_dupl": [567, 617], "forkserv": [567, 618], "spawn": [567, 618], "hot": [567, 620], "scatter": [567, 620, 623, 624], "overrid": [567, 620], "tmp_dr": [567, 628], "temporari": [567, 628], "min_denomin": [567, 631], "stabil": [567, 631, 632, 893, 894, 897, 899, 902], "_min_denomin": [567, 631], "min_bas": [567, 632], "_min_bas": [567, 632, 862, 863, 866, 983, 984], "100000023841858": [567, 635], "200000047683716": [567, 635], "299999952316284": [567, 635], "400000095367432": [567, 635], "599999904632568": [567, 635], "101": [567, 636], "unpack": [567, 639], "gradienttrack": [641, 642], "delta": [641, 643, 646], "cost": [641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 840, 841, 842, 843], "ws": [641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "en": [641, 643, 646, 648, 650], "wikipedia": [641, 643, 646, 648, 650], "wiki": [641, 643, 646, 648, 650], "stochastic_gradient_desc": [641, 643, 646, 648, 650], "dc": [641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "dw": [641, 643, 646, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "averag": [641, 643, 646, 648, 650, 661, 663, 840, 841, 842], "forget": [641, 643, 646, 648, 650, 661, 663, 985, 986, 987], "004": [641, 643, 646], "009": [641, 643, 646], "86": [641, 643, 646], "28": [641, 643, 646, 679, 682, 685, 686, 692, 730, 732, 904, 905, 908], "45": [641, 643, 646, 692, 730, 732, 780, 819, 862, 863, 866, 904, 905, 908], "0125": [641, 643, 646], "601": [641, 643, 646], "581": [641, 643, 646], "025": [641, 643, 646], "992": [641, 643, 646], "209": [641, 643, 646, 884, 885], "271": [641, 643, 646], "0717": [641, 643, 646], "142": [641, 643, 646], "182": [641, 643, 646], "624": [641, 643, 646, 867, 873, 875], "06": [641, 643, 646], "02": [641, 643, 646], "744": [641, 643, 646], "626": [641, 643, 646], "65": [641, 643, 646, 692, 730, 732, 904, 905, 908], "024": [641, 643, 646], "096": [641, 643, 646], "216": [641, 643, 646], "384": [641, 643, 646], "rate": [641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671, 840, 841, 842, 843, 969, 980, 985, 986, 987, 988, 989, 990], "ws_new": [641, 648, 650, 653, 655, 661, 663, 665, 667, 669, 671], "retain": [641, 652], "trust": [641, 661, 663, 985, 987], "decai": [641, 661, 663, 665, 667, 985, 987, 988], "layerwis": [641, 665, 667, 985, 988], "stride": [679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "data_format": [679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "nwc": [679, 680, 681, 969, 970, 971], "dilat": [679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "convolut": [679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "d_in": [679, 680, 681, 682, 683, 684, 685], "fw": [679, 680, 681, 682, 683, 684, 685, 686], "d_out": [679, 680, 681, 682, 683, 684, 685], "slide": [679, 680, 681, 682, 683, 684, 685, 686, 969, 970, 971, 972, 973, 974, 975, 976], "ncw": [679, 680, 681, 969, 970, 971], "wio": [679, 680], "output_shap": [679, 681, 683, 685, 969, 971, 973, 975], "nhwc": [679, 682, 683, 686, 969, 972, 973, 976], "fh": [679, 682, 683, 684, 685, 686], "nchw": [679, 682, 683, 686, 969, 972, 973, 976], "hwio": [679, 682], "unequ": [679, 682], "unsqueez": [679, 682, 686], "ndhwc": [679, 684, 685, 969, 974, 975], "volum": [679, 684], "fd": [679, 684, 685], "ncdhw": [679, 684, 685, 969, 974, 975], "dhwio": [679, 684], "256": [679, 685], "258": [679, 685], "128": [679, 685, 692, 730, 732], "depthwis": [679, 686, 969, 976], "333": [679, 686], "inp": [679, 686], "prob": [679, 687, 867, 868, 969, 977], "randomli": [679, 687, 969, 977], "bernoulli": [679, 687], "out_featur": [679, 687, 688], "incom": [679, 688], "outer_batch_shap": [679, 688], "inner_batch_shap": [679, 688], "in_featur": [679, 688], "cell": [679, 689, 969, 978], "num_queri": [679, 690, 691], "x_feat_dim": [679, 690], "num_kei": [679, 690, 691], "cont_feat_dim": [679, 690], "numhead": [679, 690], "feat_dim": [679, 690, 691], "out_feat_dim": [679, 690], "score": [679, 691], "04": [679, 691], "03": [679, 691, 862, 863, 866], "08": [679, 691], "decomposit": [692, 693, 696, 736, 738, 743, 745], "symmetr": [692, 693, 696, 707, 709, 710, 712, 761, 763], "u": [692, 693, 696, 743, 745], "vif": [692, 698, 700], "92": [692, 701, 703], "293": [692, 701, 703], "46997": [692, 701, 703], "eigendecomposit": [692, 707, 709], "qlq\u1d40": [692, 707, 709], "orthogon": [692, 707, 709], "eig": [692, 707, 709], "eigenvalu": [692, 707, 709, 710, 712], "eigenvector": [692, 707, 709], "75": [692, 713, 715, 730, 732], "prepend": [692, 716, 719], "singular": [692, 724, 726, 733, 735, 743, 745, 746, 748], "toler": [692, 724, 726, 733, 735], "largest_singular_valu": [692, 724, 726, 733, 735], "array_lik": [692, 730, 732], "33": [692, 730, 732, 862, 863, 866, 904, 905, 908], "36": [692, 730, 732, 904, 905, 908], "84": [692, 730, 732, 904, 905, 908], "105": [692, 730, 732, 764, 765, 768], "112": [692, 730, 732, 904, 905, 908], "104": [692, 730, 732, 904, 905, 908], "120": [692, 730, 732], "moor": [692, 733, 735], "penros": [692, 733, 735], "pseudo": [692, 733, 735], "orthonorm": [692, 736, 738, 743, 745], "2d": [692, 739, 969, 972, 973, 976], "logdet": [692, 739], "coeffici": [692, 740, 742], "usvh": [692, 743, 745], "vh": [692, 743, 745], "hermitian": [692, 743, 745], "et": [692, 743, 745], "cetera": [692, 743, 745], "adjoint": [692, 743, 745], "reconstruct": [692, 743, 745, 884, 885, 891], "reconstructed_x": [692, 743, 745], "contract": [692, 749, 751, 904, 905, 908], "doubl": [692, 749, 751], "singleton": [692, 758, 760, 780, 820, 823, 879, 881, 904, 909, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 938, 941, 943, 946], "liter": [692, 758, 760], "manhattan": [692, 758, 760], "l2": [692, 758, 760], "euclidean": [692, 758, 760], "mathbf": [692, 761, 763], "mathbb": [692, 761, 763], "skew": [692, 761, 763], "entropi": [764, 765, 768, 770, 773, 775, 778], "predict": [764, 765, 768, 770, 773, 775, 778], "smooth": [764, 765, 768, 770, 773, 775, 778], "223": [764, 765, 768], "357": [764, 765, 768, 775, 778], "511": [764, 765, 768], "discret": [764, 770, 773], "3862944": [764, 770, 773], "35667497": [764, 770, 773], "spars": [764, 775, 778], "logit": [764, 775, 778], "793291": [764, 775, 778], "512926": [764, 775, 778], "before_1": [780, 790, 793, 836, 839], "after_1": [780, 790, 793, 836, 839], "before_n": [780, 790, 793, 836, 839], "after_n": [780, 790, 793, 836, 839], "insert": [780, 794, 797, 844, 849, 879, 880], "manipulation_funct": [780, 794, 797], "reorder": [780, 798, 801], "permut": [780, 802, 805, 828, 831], "repetit": [780, 806, 809, 832, 835], "restor": [780, 814, 817], "famili": [780, 824, 827], "intxx": [780, 824, 827], "floatxx": [780, 824, 827], "fomaml_step": 840, "inner_cost_fn": [840, 841, 842], "outer_cost_fn": [840, 841, 842], "inner_grad_step": [840, 841, 842, 843], "inner_learning_r": [840, 841, 842, 843], "inner_optimization_step": [840, 841, 842, 843], "inner_batch_fn": [840, 841, 842], "outer_batch_fn": [840, 841, 842], "average_across_step": [840, 841, 842], "inner_v": [840, 841, 842], "keep_inner_v": [840, 841, 842], "outer_v": [840, 841, 842], "keep_outer_v": [840, 841, 842], "return_inner_v": [840, 841, 842, 843], "num_task": [840, 841, 842, 843], "maml": [840, 841, 842], "recev": [840, 841, 842], "0x7f87dbea2430": [840, 841, 842, 843], "maml_step": 840, "rece": [840, 842], "reptile_step": 840, "cost_fn": [840, 843], "reptil": [840, 843], "receivng": [840, 843], "all_nested_indic": 844, "include_nest": [844, 845], "_index": [844, 845, 855], "_base": [844, 845, 854, 855], "copy_nest": 844, "to_mut": [844, 846, 856], "mutabl": [844, 846, 856], "insert_into_nest_at_index": 844, "insert_into_nest_at_indic": 844, "map_nest_at_index": 844, "map_nest_at_indic": 844, "multi_index_nest": 844, "nested_ani": 844, "check_nest": [844, 854, 855], "conditon": [844, 854, 855], "nested_indices_wher": 844, "stop_after_n_found": [844, 855], "_depth": [844, 856], "_tuple_check_fn": [844, 856], "_list_check_fn": [844, 856], "_dict_check_fn": [844, 856], "nested_multi_map": 844, "nest0": [844, 857], "ivy_arrai": [844, 857], "funciton": [844, 857], "prune_nest_at_index": 844, "prune_nest_at_indic": 844, "set_nest_at_index": 844, "set_nest_at_indic": 844, "mini": [862, 863, 866, 983, 984], "gamma": [862, 863, 866], "beta": [862, 863, 866], "0976": [862, 863, 866], "3452": [862, 863, 866], "2740": [862, 863, 866], "1047": [862, 863, 866], "5886": [862, 863, 866], "2732": [862, 863, 866], "7696": [862, 863, 866], "7024": [862, 863, 866], "2518": [862, 863, 866], "58": [862, 863, 866, 884, 885], "283": [862, 863, 866], "585": [862, 863, 866], "909": [862, 863, 866], "628": [862, 863, 866], "225": [862, 863, 866], "425": [862, 863, 866], "norm_idx": [862, 863, 866], "228": [862, 863, 866], "0285": [862, 863, 866], "199": [862, 863, 866], "204": [862, 863, 866], "population_s": [867, 868], "num_sampl": [867, 868], "draw": [867, 868, 872, 873, 875], "unnorm": [867, 868], "drawn": [867, 868, 869, 870, 872, 873, 875], "home": [867, 868, 872], "uniformli": [867, 869, 870, 873, 875], "highest": [867, 869, 870], "parameter": [867, 872, 873, 875], "6444774682897879": [867, 872], "811": [867, 872], "508": [867, 872], "564": [867, 872], "7268672": [867, 872], "968": [867, 872], "175": [867, 872, 884, 885], "064": [867, 872], "40935726": [867, 872], "556": [867, 872], "26431865": [867, 873, 875], "475": [867, 873, 875], "878": [867, 873, 875], "861": [867, 873, 875], "89150229": [867, 873, 875], "89629126": [867, 873, 875], "94198485": [867, 873, 875], "91405606": [867, 873, 875], "72848724": [867, 873, 875], "7550739": [867, 873, 875], "00109": [867, 873, 875], "occurr": [879, 880, 881, 884, 885], "yield": [879, 883], "43": [879, 883], "x_j": [884, 885, 886, 890, 892], "impli": [884, 885, 886, 890, 892], "inverse_indic": [884, 885, 891], "aggreg": [884, 885], "fourth": [884, 885], "607": [884, 885], "735": [884, 885], "667": [884, 885], "381": [884, 885], "857": [884, 885], "0396": [884, 885], "166": [884, 885], "828": [884, 885], "144": [884, 885], "40501155": [884, 885], "77361575": [884, 885], "97776199": [884, 885], "36831157": [884, 885], "89148434": [884, 885], "9512272": [884, 885], "67542176": [884, 885], "41985657": [884, 885], "23478023": [884, 885], "1141": [884, 885], "8101": [884, 885], "9298": [884, 885], "8460": [884, 885], "2119": [884, 885], "3519": [884, 885], "6252": [884, 885], "4033": [884, 885], "7443": [884, 885], "2577": [884, 885], "3707": [884, 885], "0545": [884, 885], "3238": [884, 885], "5944": [884, 885], "0775": [884, 885], "4327": [884, 885], "176": [884, 885], "889": [884, 885], "763": [884, 885], "071": [884, 885], "262": [884, 885], "456": [884, 885], "114": [884, 885], "349": [884, 885], "615": [884, 885], "594": [884, 885], "335": [884, 885], "212": [884, 885], "457": [884, 885], "827": [884, 885], "set_funct": [884, 886, 890], "ascend": [893, 894, 897], "einstein": [904, 905, 908], "summat": [904, 905, 908], "seq": [904, 905, 908], "jk": [904, 905, 908], "ik": [904, 905, 908], "126": [904, 905, 908], "510": [904, 905, 908], "99": [904, 905, 908], "108": [904, 905, 908], "117": [904, 905, 908], "sentinel": [904, 909, 912, 917, 920], "unsign": [904, 921, 924, 929, 932], "degre": [904, 925, 928, 933, 936], "bessel": [904, 925, 928, 933, 936], "8164966": [904, 925, 928], "varianc": [904, 933, 936], "unbias": [904, 933, 936], "simplicit": [937, 938, 941], "autom": 948, "grow": 948, "ai": 948, "got": 948, "colab": 948, "sharp": 948, "weekli": 948, "event": 948, "immedi": 948, "favorit": 948, "jax_concat": 948, "tf_concat": 948, "np_concat": 948, "mx_concat": 948, "torch_concat": 948, "prompt": 948, "get_devic": 948, "reduce_prod": 948, "gradient_imag": 948, "linalg": 948, "bilinear_resampl": 948, "stack_imag": 948, "neural_net": 948, "ecosystem": [948, 954], "popular": [948, 954], "acceler": 948, "articl": 948, "lenton2021ivi": 948, "inter": 948, "lenton": 948, "daniel": 948, "pardo": 948, "fabio": 948, "falck": 948, "fabian": 948, "jame": 948, "stephen": 948, "clark": 948, "ronald": 948, "journal": 948, "arxiv": 948, "preprint": 948, "2102": 948, "02886": 948, "2021": 948, "add_array_spec": 951, "fn_array_spec": 951, "geglu": 955, "native_modul": [958, 959], "native_module_class": [958, 959], "firstlayersiren": 960, "kaimingnorm": [960, 964], "negative_slop": 960, "Ones": 960, "siren": 960, "w0": [960, 966], "filter_s": [969, 970, 971], "1d": [969, 970, 971], "conv1dtranspos": 969, "filter_shap": [969, 972, 973, 974, 975, 976], "conv2dtranspos": 969, "conv3dtranspos": 969, "depthwiseconv2d": 969, "num_channel": [969, 976], "bernoul": [969, 977], "num_lay": [969, 978], "return_sequ": [969, 978], "return_st": [969, 978], "get_initial_st": [969, 978], "dens": [969, 979], "multiheadattent": 969, "query_dim": [969, 980], "head_dim": [969, 980], "dropout_r": [969, 980], "context_dim": [969, 980], "with_to_q_fn": [969, 980], "with_to_kv_fn": [969, 980], "with_to_out_fn": [969, 980], "build_mod": [969, 980, 981, 982], "on_init": [969, 980, 981, 982], "__call__": [969, 980, 981, 982], "store_var": [981, 982], "arg_stateful_idx": [981, 982], "kwarg_stateful_idx": [981, 982], "fallback_to_non_compil": [981, 982, 985, 989], "with_partial_v": [981, 982], "initialz": [981, 982], "from_cal": [981, 982], "check_submod_ret": [981, 982], "get_mod_kei": [981, 982], "top_mod": [981, 982], "mod_depth": [981, 982], "mod_height": [981, 982], "mod_with_top_mod_key_chain": [981, 982], "save_weight": [981, 982], "weights_path": [981, 982], "show_mod_in_top_mod": [981, 982], "upper_depth": [981, 982], "lower_depth": [981, 982], "show_structur": [981, 982], "show_v_in_top_v": [981, 982], "sub_mod": [981, 982], "show_v": [981, 982], "track_submod_call_ord": [981, 982], "track_submod_ret": [981, 982], "v_with_top_v_key_chain": [981, 982], "layernorm": 983, "normalized_shap": [983, 984], "elementwise_affin": [983, 984], "trail": [983, 984], "affin": [983, 984], "0001": [985, 986, 987], "init_on_first_step": [985, 989], "ignore_miss": [985, 989], "overriden": [985, 989], "sgd": 985, "stochast": [985, 990], "sub_modul": [991, 992]}, "objects": {"ivy.array": [[22, 0, 0, "-", "activations"], [24, 0, 0, "-", "conversions"], [29, 0, 0, "-", "creation"], [31, 0, 0, "-", "data_type"], [33, 0, 0, "-", "device"], [35, 0, 0, "-", "elementwise"], [37, 0, 0, "-", "general"], [39, 0, 0, "-", "gradients"], [41, 0, 0, "-", "image"], [43, 0, 0, "-", "layers"], [45, 0, 0, "-", "linear_algebra"], [47, 0, 0, "-", "losses"], [49, 0, 0, "-", "manipulation"], [51, 0, 0, "-", "norms"], [53, 0, 0, "-", "random"], [55, 0, 0, "-", "searching"], [57, 0, 0, "-", "set"], [59, 0, 0, "-", "sorting"], [61, 0, 0, "-", "statistical"], [63, 0, 0, "-", "utility"], [65, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[23, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[23, 2, 1, "", "softplus"]], "ivy.array.array_methods": [[331, 3, 1, "", "abs"], [336, 3, 1, "", "acos"], [340, 3, 1, "", "acosh"], [644, 3, 1, "", "adam_step"], [344, 3, 1, "", "add"], [939, 3, 1, "", "all"], [569, 3, 1, "", "all_equal"], [944, 3, 1, "", "any"], [895, 3, 1, "", "argsort"], [176, 3, 1, "", "asarray"], [349, 3, 1, "", "asin"], [353, 3, 1, "", "asinh"], [357, 3, 1, "", "atan"], [361, 3, 1, "", "atan2"], [365, 3, 1, "", "atanh"], [766, 3, 1, "", "binary_cross_entropy"], [369, 3, 1, "", "bitwise_and"], [373, 3, 1, "", "bitwise_invert"], [377, 3, 1, "", "bitwise_left_shift"], [381, 3, 1, "", "bitwise_or"], [385, 3, 1, "", "bitwise_right_shift"], [389, 3, 1, "", "bitwise_xor"], [252, 3, 1, "", "can_cast"], [393, 3, 1, "", "ceil"], [694, 3, 1, "", "cholesky"], [782, 3, 1, "", "clip"], [787, 3, 1, "", "concat"], [791, 3, 1, "", "constant_pad"], [397, 3, 1, "", "cos"], [401, 3, 1, "", "cosh"], [699, 3, 1, "", "cross"], [771, 3, 1, "", "cross_entropy"], [702, 3, 1, "", "det"], [705, 3, 1, "", "diagonal"], [405, 3, 1, "", "divide"], [708, 3, 1, "", "eigh"], [711, 3, 1, "", "eigvalsh"], [906, 3, 1, "", "einsum"], [182, 3, 1, "", "empty_like"], [410, 3, 1, "", "equal"], [414, 3, 1, "", "erf"], [418, 3, 1, "", "exp"], [795, 3, 1, "", "expand_dims"], [422, 3, 1, "", "expm1"], [799, 3, 1, "", "flip"], [426, 3, 1, "", "floor"], [430, 3, 1, "", "floor_divide"], [190, 3, 1, "", "from_dlpack"], [196, 3, 1, "", "full_like"], [597, 3, 1, "", "gather_nd"], [434, 3, 1, "", "greater"], [438, 3, 1, "", "greater_equal"], [714, 3, 1, "", "inv"], [442, 3, 1, "", "isfinite"], [446, 3, 1, "", "isinf"], [450, 3, 1, "", "isnan"], [864, 3, 1, "", "layer_norm"], [454, 3, 1, "", "less"], [458, 3, 1, "", "less_equal"], [462, 3, 1, "", "log"], [466, 3, 1, "", "log10"], [470, 3, 1, "", "log1p"], [474, 3, 1, "", "log2"], [478, 3, 1, "", "logaddexp"], [482, 3, 1, "", "logical_and"], [486, 3, 1, "", "logical_not"], [490, 3, 1, "", "logical_or"], [494, 3, 1, "", "logical_xor"], [717, 3, 1, "", "matmul"], [721, 3, 1, "", "matrix_norm"], [725, 3, 1, "", "matrix_rank"], [728, 3, 1, "", "matrix_transpose"], [910, 3, 1, "", "max"], [914, 3, 1, "", "mean"], [207, 3, 1, "", "meshgrid"], [918, 3, 1, "", "min"], [500, 3, 1, "", "multiply"], [212, 3, 1, "", "native_array"], [505, 3, 1, "", "negative"], [509, 3, 1, "", "not_equal"], [220, 3, 1, "", "ones_like"], [731, 3, 1, "", "outer"], [803, 3, 1, "", "permute_dims"], [734, 3, 1, "", "pinv"], [513, 3, 1, "", "positive"], [517, 3, 1, "", "pow"], [922, 3, 1, "", "prod"], [737, 3, 1, "", "qr"], [521, 3, 1, "", "remainder"], [807, 3, 1, "", "repeat"], [811, 3, 1, "", "reshape"], [815, 3, 1, "", "roll"], [525, 3, 1, "", "round"], [529, 3, 1, "", "sign"], [533, 3, 1, "", "sin"], [537, 3, 1, "", "sinh"], [163, 3, 1, "", "softplus"], [741, 3, 1, "", "solve"], [900, 3, 1, "", "sort"], [776, 3, 1, "", "sparse_cross_entropy"], [541, 3, 1, "", "sqrt"], [545, 3, 1, "", "square"], [821, 3, 1, "", "squeeze"], [825, 3, 1, "", "stack"], [926, 3, 1, "", "std"], [550, 3, 1, "", "subtract"], [930, 3, 1, "", "sum"], [744, 3, 1, "", "svd"], [747, 3, 1, "", "svdvals"], [829, 3, 1, "", "swapaxes"], [555, 3, 1, "", "tan"], [560, 3, 1, "", "tanh"], [750, 3, 1, "", "tensordot"], [833, 3, 1, "", "tile"], [753, 3, 1, "", "trace"], [226, 3, 1, "", "tril"], [231, 3, 1, "", "triu"], [564, 3, 1, "", "trunc"], [888, 3, 1, "", "unique_counts"], [934, 3, 1, "", "var"], [756, 3, 1, "", "vecdot"], [759, 3, 1, "", "vector_norm"], [762, 3, 1, "", "vector_to_skew_symmetric_matrix"], [837, 3, 1, "", "zero_pad"], [239, 3, 1, "", "zeros_like"]], "ivy.array.conversions": [[25, 3, 1, "", "args_to_ivy"], [26, 3, 1, "", "args_to_native"], [27, 3, 1, "", "to_ivy"], [28, 3, 1, "", "to_native"]], "ivy.array.creation": [[30, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[30, 2, 1, "", "asarray"], [30, 2, 1, "", "empty_like"], [30, 2, 1, "", "from_dlpack"], [30, 2, 1, "", "full_like"], [30, 2, 1, "", "meshgrid"], [30, 2, 1, "", "native_array"], [30, 2, 1, "", "ones_like"], [30, 2, 1, "", "tril"], [30, 2, 1, "", "triu"], [30, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[32, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[32, 2, 1, "", "can_cast"]], "ivy.array.device": [[34, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[36, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[36, 2, 1, "", "abs"], [36, 2, 1, "", "acos"], [36, 2, 1, "", "acosh"], [36, 2, 1, "", "add"], [36, 2, 1, "", "asin"], [36, 2, 1, "", "asinh"], [36, 2, 1, "", "atan"], [36, 2, 1, "", "atan2"], [36, 2, 1, "", "atanh"], [36, 2, 1, "", "bitwise_and"], [36, 2, 1, "", "bitwise_invert"], [36, 2, 1, "", "bitwise_left_shift"], [36, 2, 1, "", "bitwise_or"], [36, 2, 1, "", "bitwise_right_shift"], [36, 2, 1, "", "bitwise_xor"], [36, 2, 1, "", "ceil"], [36, 2, 1, "", "cos"], [36, 2, 1, "", "cosh"], [36, 2, 1, "", "divide"], [36, 2, 1, "", "equal"], [36, 2, 1, "", "erf"], [36, 2, 1, "", "exp"], [36, 2, 1, "", "expm1"], [36, 2, 1, "", "floor"], [36, 2, 1, "", "floor_divide"], [36, 2, 1, "", "greater"], [36, 2, 1, "", "greater_equal"], [36, 2, 1, "", "isfinite"], [36, 2, 1, "", "isinf"], [36, 2, 1, "", "isnan"], [36, 2, 1, "", "less"], [36, 2, 1, "", "less_equal"], [36, 2, 1, "", "log"], [36, 2, 1, "", "log10"], [36, 2, 1, "", "log1p"], [36, 2, 1, "", "log2"], [36, 2, 1, "", "logaddexp"], [36, 2, 1, "", "logical_and"], [36, 2, 1, "", "logical_not"], [36, 2, 1, "", "logical_or"], [36, 2, 1, "", "logical_xor"], [36, 2, 1, "", "multiply"], [36, 2, 1, "", "negative"], [36, 2, 1, "", "not_equal"], [36, 2, 1, "", "positive"], [36, 2, 1, "", "pow"], [36, 2, 1, "", "remainder"], [36, 2, 1, "", "round"], [36, 2, 1, "", "sign"], [36, 2, 1, "", "sin"], [36, 2, 1, "", "sinh"], [36, 2, 1, "", "sqrt"], [36, 2, 1, "", "square"], [36, 2, 1, "", "subtract"], [36, 2, 1, "", "tan"], [36, 2, 1, "", "tanh"], [36, 2, 1, "", "trunc"]], "ivy.array.general": [[38, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[38, 2, 1, "", "all_equal"], [38, 2, 1, "", "gather_nd"]], "ivy.array.gradients": [[40, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[40, 2, 1, "", "adam_step"]], "ivy.array.image": [[42, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[44, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[46, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[46, 2, 1, "", "cholesky"], [46, 2, 1, "", "cross"], [46, 2, 1, "", "det"], [46, 2, 1, "", "diagonal"], [46, 2, 1, "", "eigh"], [46, 2, 1, "", "eigvalsh"], [46, 2, 1, "", "inv"], [46, 2, 1, "", "matmul"], [46, 2, 1, "", "matrix_norm"], [46, 2, 1, "", "matrix_rank"], [46, 2, 1, "", "matrix_transpose"], [46, 2, 1, "", "outer"], [46, 2, 1, "", "pinv"], [46, 2, 1, "", "qr"], [46, 2, 1, "", "solve"], [46, 2, 1, "", "svd"], [46, 2, 1, "", "svdvals"], [46, 2, 1, "", "tensordot"], [46, 2, 1, "", "trace"], [46, 2, 1, "", "vecdot"], [46, 2, 1, "", "vector_norm"], [46, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[48, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[48, 2, 1, "", "binary_cross_entropy"], [48, 2, 1, "", "cross_entropy"], [48, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[50, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[50, 2, 1, "", "clip"], [50, 2, 1, "", "concat"], [50, 2, 1, "", "constant_pad"], [50, 2, 1, "", "expand_dims"], [50, 2, 1, "", "flip"], [50, 2, 1, "", "permute_dims"], [50, 2, 1, "", "repeat"], [50, 2, 1, "", "reshape"], [50, 2, 1, "", "roll"], [50, 2, 1, "", "squeeze"], [50, 2, 1, "", "stack"], [50, 2, 1, "", "swapaxes"], [50, 2, 1, "", "tile"], [50, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[52, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[52, 2, 1, "", "layer_norm"]], "ivy.array.random": [[54, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[56, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[58, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[58, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[60, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[60, 2, 1, "", "argsort"], [60, 2, 1, "", "sort"]], "ivy.array.statistical": [[62, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[62, 2, 1, "", "einsum"], [62, 2, 1, "", "max"], [62, 2, 1, "", "mean"], [62, 2, 1, "", "min"], [62, 2, 1, "", "prod"], [62, 2, 1, "", "std"], [62, 2, 1, "", "sum"], [62, 2, 1, "", "var"]], "ivy.array.utility": [[64, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[64, 2, 1, "", "all"], [64, 2, 1, "", "any"]], "ivy.array.wrapping": [[66, 3, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [951, 0, 0, "-", "inspection"], [994, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [2, 3, 1, "", "choose_random_backend"], [3, 3, 1, "", "clear_backend_stack"], [4, 3, 1, "", "current_backend"], [5, 3, 1, "", "get_backend"], [6, 3, 1, "", "set_backend"], [7, 3, 1, "", "try_import_ivy_jax"], [8, 3, 1, "", "try_import_ivy_mxnet"], [9, 3, 1, "", "try_import_ivy_numpy"], [10, 3, 1, "", "try_import_ivy_tf"], [11, 3, 1, "", "try_import_ivy_torch"], [12, 3, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[67, 0, 0, "-", "activations"], [69, 0, 0, "-", "base"], [71, 0, 0, "-", "container"], [74, 0, 0, "-", "creation"], [76, 0, 0, "-", "data_type"], [78, 0, 0, "-", "device"], [80, 0, 0, "-", "elementwise"], [82, 0, 0, "-", "general"], [84, 0, 0, "-", "gradients"], [86, 0, 0, "-", "image"], [88, 0, 0, "-", "layers"], [90, 0, 0, "-", "linear_algebra"], [92, 0, 0, "-", "losses"], [94, 0, 0, "-", "manipulation"], [96, 0, 0, "-", "norms"], [98, 0, 0, "-", "random"], [100, 0, 0, "-", "searching"], [102, 0, 0, "-", "set"], [104, 0, 0, "-", "sorting"], [106, 0, 0, "-", "statistical"], [108, 0, 0, "-", "utility"], [110, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[68, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[68, 2, 1, "", "softplus"], [68, 2, 1, "", "static_softplus"]], "ivy.container.base": [[70, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[70, 2, 1, "", "__getitem__"], [70, 2, 1, "", "__init__"], [70, 2, 1, "", "__setitem__"], [70, 2, 1, "", "all_false"], [70, 2, 1, "", "all_key_chains"], [70, 2, 1, "", "all_true"], [70, 2, 1, "", "arrays_as_lists"], [70, 2, 1, "", "as_arrays"], [70, 2, 1, "", "as_bools"], [70, 2, 1, "", "as_ones"], [70, 2, 1, "", "as_random_uniform"], [70, 2, 1, "", "as_variables"], [70, 2, 1, "", "as_zeros"], [70, 2, 1, "", "assert_contains_sub_container"], [70, 2, 1, "", "assert_contains_sub_structure"], [70, 2, 1, "", "assert_identical"], [70, 2, 1, "", "assert_identical_structure"], [70, 2, 1, "", "at_key_chain"], [70, 2, 1, "", "at_key_chains"], [70, 2, 1, "", "at_keys"], [70, 2, 1, "", "clip"], [70, 2, 1, "", "combine"], [70, 2, 1, "", "common_key_chains"], [70, 4, 1, "", "config"], [70, 2, 1, "", "contains_sub_container"], [70, 2, 1, "", "contains_sub_structure"], [70, 2, 1, "", "copy"], [70, 2, 1, "", "create_if_absent"], [70, 2, 1, "", "cutoff_at_depth"], [70, 2, 1, "", "cutoff_at_height"], [70, 2, 1, "", "deep_copy"], [70, 4, 1, "", "dev"], [70, 2, 1, "", "dev_clone"], [70, 2, 1, "", "dev_dist"], [70, 4, 1, "", "dev_str"], [70, 2, 1, "", "diff"], [70, 2, 1, "", "dtype"], [70, 2, 1, "", "einops_rearrange"], [70, 2, 1, "", "einops_reduce"], [70, 2, 1, "", "einops_repeat"], [70, 2, 1, "", "find_sub_container"], [70, 2, 1, "", "find_sub_structure"], [70, 2, 1, "", "flatten_key_chain"], [70, 2, 1, "", "flatten_key_chains"], [70, 2, 1, "", "format_key_chains"], [70, 2, 1, "", "from_disk_as_hdf5"], [70, 2, 1, "", "from_disk_as_json"], [70, 2, 1, "", "from_disk_as_pickled"], [70, 2, 1, "", "from_flat_list"], [70, 2, 1, "", "from_numpy"], [70, 2, 1, "", "gather"], [70, 2, 1, "", "gather_nd"], [70, 2, 1, "", "h5_file_size"], [70, 2, 1, "", "handle_inplace"], [70, 2, 1, "", "has_key"], [70, 2, 1, "", "has_key_chain"], [70, 2, 1, "", "has_nans"], [70, 2, 1, "", "identical"], [70, 2, 1, "", "identical_array_shapes"], [70, 2, 1, "", "identical_configs"], [70, 2, 1, "", "identical_structure"], [70, 2, 1, "", "if_exists"], [70, 2, 1, "", "inplace_update"], [70, 4, 1, "", "ivy"], [70, 2, 1, "", "key_chains_containing"], [70, 2, 1, "", "list_join"], [70, 2, 1, "", "list_stack"], [70, 2, 1, "", "map"], [70, 2, 1, "", "map_conts"], [70, 2, 1, "", "matrix_norm"], [70, 4, 1, "", "max_depth"], [70, 2, 1, "", "maximum"], [70, 2, 1, "", "minimum"], [70, 2, 1, "", "multi_map"], [70, 2, 1, "", "multi_map_in_static_method"], [70, 2, 1, "", "num_arrays"], [70, 2, 1, "", "overwrite_at_key_chain"], [70, 2, 1, "", "overwrite_at_key_chains"], [70, 2, 1, "", "prune_empty"], [70, 2, 1, "", "prune_key_chain"], [70, 2, 1, "", "prune_key_chains"], [70, 2, 1, "", "prune_key_from_key_chains"], [70, 2, 1, "", "prune_keys"], [70, 2, 1, "", "prune_keys_from_key_chains"], [70, 2, 1, "", "reduce"], [70, 2, 1, "", "remove_key_length_limit"], [70, 2, 1, "", "remove_print_limit"], [70, 2, 1, "", "reshape_like"], [70, 2, 1, "", "restructure"], [70, 2, 1, "", "restructure_key_chains"], [70, 2, 1, "", "set_at_key_chain"], [70, 2, 1, "", "set_at_key_chains"], [70, 2, 1, "", "set_at_keys"], [70, 2, 1, "", "set_framework"], [70, 2, 1, "", "set_ivy_backend"], [70, 4, 1, "", "shape"], [70, 4, 1, "", "shapes"], [70, 2, 1, "", "show"], [70, 2, 1, "", "show_sub_container"], [70, 2, 1, "", "shuffle"], [70, 2, 1, "", "shuffle_h5_file"], [70, 2, 1, "", "size_ordered_arrays"], [70, 2, 1, "", "slice_keys"], [70, 2, 1, "", "slice_via_key"], [70, 2, 1, "", "sort_by_key"], [70, 2, 1, "", "split"], [70, 2, 1, "", "stop_gradients"], [70, 2, 1, "", "structural_diff"], [70, 2, 1, "", "to_device"], [70, 2, 1, "", "to_dict"], [70, 2, 1, "", "to_disk_as_hdf5"], [70, 2, 1, "", "to_disk_as_json"], [70, 2, 1, "", "to_disk_as_pickled"], [70, 2, 1, "", "to_flat_list"], [70, 2, 1, "", "to_iterator"], [70, 2, 1, "", "to_iterator_keys"], [70, 2, 1, "", "to_iterator_values"], [70, 2, 1, "", "to_ivy"], [70, 2, 1, "", "to_jsonable"], [70, 2, 1, "", "to_list"], [70, 2, 1, "", "to_multi_dev"], [70, 2, 1, "", "to_native"], [70, 2, 1, "", "to_numpy"], [70, 2, 1, "", "to_raw"], [70, 2, 1, "", "trim_key"], [70, 2, 1, "", "try_kc"], [70, 2, 1, "", "unify"], [70, 2, 1, "", "unstack"], [70, 2, 1, "", "update_config"], [70, 2, 1, "", "vector_norm"], [70, 2, 1, "", "with_default_key_color"], [70, 2, 1, "", "with_entries_as_lists"], [70, 2, 1, "", "with_ivy_backend"], [70, 2, 1, "", "with_key_length_limit"], [70, 2, 1, "", "with_print_indent"], [70, 2, 1, "", "with_print_limit"], [70, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[72, 1, 1, "", "Container"], [73, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[72, 2, 1, "", "__add__"], [72, 2, 1, "", "__init__"], [72, 2, 1, "", "__radd__"], [72, 2, 1, "", "arange"], [72, 2, 1, "", "arg_info"], [72, 2, 1, "", "arg_names"], [72, 2, 1, "", "argmax"], [72, 2, 1, "", "argmin"], [72, 2, 1, "", "array"], [72, 2, 1, "", "array_equal"], [72, 2, 1, "", "arrays_equal"], [72, 2, 1, "", "as_ivy_dev"], [72, 2, 1, "", "as_ivy_dtype"], [72, 2, 1, "", "as_native_dev"], [72, 2, 1, "", "as_native_dtype"], [72, 2, 1, "", "assert_supports_inplace"], [72, 2, 1, "", "astype"], [72, 2, 1, "", "broadcast_arrays"], [72, 2, 1, "", "broadcast_to"], [72, 2, 1, "", "cache_fn"], [72, 2, 1, "", "clear_mem_on_dev"], [72, 2, 1, "", "clip_matrix_norm"], [72, 2, 1, "", "closest_valid_dtype"], [72, 2, 1, "", "container_types"], [72, 2, 1, "", "conv1d"], [72, 2, 1, "", "conv1d_transpose"], [72, 2, 1, "", "conv2d"], [72, 2, 1, "", "conv2d_transpose"], [72, 2, 1, "", "conv3d"], [72, 2, 1, "", "conv3d_transpose"], [72, 2, 1, "", "copy_array"], [72, 2, 1, "", "cross"], [72, 2, 1, "", "cumprod"], [72, 2, 1, "", "cumsum"], [72, 2, 1, "", "current_backend"], [72, 2, 1, "", "current_backend_str"], [72, 2, 1, "", "default"], [72, 2, 1, "", "default_device"], [72, 2, 1, "", "default_dtype"], [72, 2, 1, "", "default_float_dtype"], [72, 2, 1, "", "default_int_dtype"], [72, 2, 1, "", "depthwise_conv2d"], [72, 2, 1, "", "det"], [72, 2, 1, "", "dev_clone_array"], [72, 2, 1, "", "dev_clone_iter"], [72, 2, 1, "", "dev_clone_nest"], [72, 2, 1, "", "dev_dist_array"], [72, 2, 1, "", "dev_dist_iter"], [72, 2, 1, "", "dev_dist_nest"], [72, 2, 1, "", "dev_unify"], [72, 2, 1, "", "dev_unify_array"], [72, 2, 1, "", "dev_unify_iter"], [72, 2, 1, "", "dev_unify_nest"], [72, 2, 1, "", "dev_util"], [72, 2, 1, "", "diagonal"], [72, 2, 1, "", "dropout"], [72, 2, 1, "", "dtype_bits"], [72, 2, 1, "", "eigh"], [72, 2, 1, "", "eigvalsh"], [72, 2, 1, "", "empty"], [72, 2, 1, "", "execute_with_gradients"], [72, 2, 1, "", "exists"], [72, 2, 1, "", "eye"], [72, 2, 1, "", "finfo"], [72, 2, 1, "", "floormod"], [72, 2, 1, "", "fourier_encode"], [72, 2, 1, "", "full"], [72, 2, 1, "", "function_supported_dtypes"], [72, 2, 1, "", "function_unsupported_dtypes"], [72, 2, 1, "", "gelu"], [72, 2, 1, "", "get_all_arrays_in_memory"], [72, 2, 1, "", "get_all_ivy_arrays_on_dev"], [72, 2, 1, "", "get_min_base"], [72, 2, 1, "", "get_min_denominator"], [72, 2, 1, "", "get_num_dims"], [72, 2, 1, "", "get_referrers_recursive"], [72, 2, 1, "", "gpu_is_available"], [72, 2, 1, "", "handle_nestable"], [72, 2, 1, "", "handle_out_argument"], [72, 2, 1, "", "iinfo"], [72, 2, 1, "", "indices_where"], [72, 2, 1, "", "infer_device"], [72, 2, 1, "", "infer_dtype"], [72, 2, 1, "", "inplace_arrays_supported"], [72, 2, 1, "", "inplace_decrement"], [72, 2, 1, "", "inplace_increment"], [72, 2, 1, "", "inplace_variables_supported"], [72, 2, 1, "", "inputs_to_native_arrays"], [72, 2, 1, "", "inv"], [72, 2, 1, "", "invalid_dtype"], [72, 2, 1, "", "is_float_dtype"], [72, 2, 1, "", "is_int_dtype"], [72, 2, 1, "", "is_ivy_container"], [72, 2, 1, "", "leaky_relu"], [72, 2, 1, "", "linear"], [72, 2, 1, "", "linspace"], [72, 2, 1, "", "logspace"], [72, 2, 1, "", "lstm_update"], [72, 2, 1, "", "match_kwargs"], [72, 2, 1, "", "matrix_power"], [72, 2, 1, "", "matrix_rank"], [72, 2, 1, "", "matrix_transpose"], [72, 2, 1, "", "multi_head_attention"], [72, 2, 1, "", "multinomial"], [72, 2, 1, "", "multiprocessing"], [72, 2, 1, "", "nonzero"], [72, 2, 1, "", "num_arrays_in_memory"], [72, 2, 1, "", "num_cpu_cores"], [72, 2, 1, "", "num_gpus"], [72, 2, 1, "", "num_ivy_arrays_on_dev"], [72, 2, 1, "", "one_hot"], [72, 2, 1, "", "ones"], [72, 2, 1, "", "outer"], [72, 2, 1, "", "outputs_to_ivy_arrays"], [72, 2, 1, "", "percent_used_mem_on_dev"], [72, 2, 1, "", "pinv"], [72, 2, 1, "", "print_all_arrays_in_memory"], [72, 2, 1, "", "print_all_ivy_arrays_on_dev"], [72, 2, 1, "", "promote_types"], [72, 2, 1, "", "qr"], [72, 2, 1, "", "queue_timeout"], [72, 2, 1, "", "randint"], [72, 2, 1, "", "random_normal"], [72, 2, 1, "", "relu"], [72, 2, 1, "", "result_type"], [72, 2, 1, "", "scaled_dot_product_attention"], [72, 2, 1, "", "scatter_flat"], [72, 2, 1, "", "scatter_nd"], [72, 2, 1, "", "seed"], [72, 2, 1, "", "set_default_device"], [72, 2, 1, "", "set_default_dtype"], [72, 2, 1, "", "set_default_float_dtype"], [72, 2, 1, "", "set_default_int_dtype"], [72, 2, 1, "", "set_min_base"], [72, 2, 1, "", "set_min_denominator"], [72, 2, 1, "", "set_queue_timeout"], [72, 2, 1, "", "set_split_factor"], [72, 2, 1, "", "set_tmp_dir"], [72, 2, 1, "", "set_with_grads"], [72, 2, 1, "", "shape_to_tuple"], [72, 2, 1, "", "sigmoid"], [72, 2, 1, "", "slogdet"], [72, 2, 1, "", "softmax"], [72, 2, 1, "", "solve"], [72, 2, 1, "", "split_factor"], [72, 2, 1, "", "split_func_call"], [72, 2, 1, "", "stable_divide"], [72, 2, 1, "", "stable_pow"], [72, 2, 1, "", "static_acos"], [72, 2, 1, "", "static_acosh"], [72, 2, 1, "", "static_arg_info"], [72, 2, 1, "", "static_arg_names"], [72, 2, 1, "", "static_argmax"], [72, 2, 1, "", "static_argmin"], [72, 2, 1, "", "static_array"], [72, 2, 1, "", "static_array_equal"], [72, 2, 1, "", "static_arrays_equal"], [72, 2, 1, "", "static_as_ivy_dev"], [72, 2, 1, "", "static_as_ivy_dtype"], [72, 2, 1, "", "static_as_native_dev"], [72, 2, 1, "", "static_as_native_dtype"], [72, 2, 1, "", "static_asin"], [72, 2, 1, "", "static_asinh"], [72, 2, 1, "", "static_assert_supports_inplace"], [72, 2, 1, "", "static_astype"], [72, 2, 1, "", "static_atan"], [72, 2, 1, "", "static_atan2"], [72, 2, 1, "", "static_atanh"], [72, 2, 1, "", "static_bitwise_and"], [72, 2, 1, "", "static_bitwise_invert"], [72, 2, 1, "", "static_bitwise_left_shift"], [72, 2, 1, "", "static_bitwise_or"], [72, 2, 1, "", "static_bitwise_right_shift"], [72, 2, 1, "", "static_bitwise_xor"], [72, 2, 1, "", "static_broadcast_arrays"], [72, 2, 1, "", "static_broadcast_to"], [72, 2, 1, "", "static_cache_fn"], [72, 2, 1, "", "static_ceil"], [72, 2, 1, "", "static_clear_mem_on_dev"], [72, 2, 1, "", "static_clip_matrix_norm"], [72, 2, 1, "", "static_clip_vector_norm"], [72, 2, 1, "", "static_closest_valid_dtype"], [72, 2, 1, "", "static_concat"], [72, 2, 1, "", "static_constant_pad"], [72, 2, 1, "", "static_container_types"], [72, 2, 1, "", "static_conv1d"], [72, 2, 1, "", "static_conv1d_transpose"], [72, 2, 1, "", "static_conv2d"], [72, 2, 1, "", "static_conv2d_transpose"], [72, 2, 1, "", "static_conv3d"], [72, 2, 1, "", "static_conv3d_transpose"], [72, 2, 1, "", "static_copy_array"], [72, 2, 1, "", "static_cos"], [72, 2, 1, "", "static_cosh"], [72, 2, 1, "", "static_cross"], [72, 2, 1, "", "static_cumprod"], [72, 2, 1, "", "static_cumsum"], [72, 2, 1, "", "static_current_backend"], [72, 2, 1, "", "static_current_backend_str"], [72, 2, 1, "", "static_default"], [72, 2, 1, "", "static_default_device"], [72, 2, 1, "", "static_default_dtype"], [72, 2, 1, "", "static_default_float_dtype"], [72, 2, 1, "", "static_default_int_dtype"], [72, 2, 1, "", "static_depthwise_conv2d"], [72, 2, 1, "", "static_det"], [72, 2, 1, "", "static_dev"], [72, 2, 1, "", "static_dev_clone"], [72, 2, 1, "", "static_dev_clone_array"], [72, 2, 1, "", "static_dev_clone_iter"], [72, 2, 1, "", "static_dev_clone_nest"], [72, 2, 1, "", "static_dev_dist"], [72, 2, 1, "", "static_dev_dist_array"], [72, 2, 1, "", "static_dev_dist_iter"], [72, 2, 1, "", "static_dev_dist_nest"], [72, 2, 1, "", "static_dev_unify"], [72, 2, 1, "", "static_dev_unify_array"], [72, 2, 1, "", "static_dev_unify_iter"], [72, 2, 1, "", "static_dev_unify_nest"], [72, 2, 1, "", "static_dev_util"], [72, 2, 1, "", "static_diagonal"], [72, 2, 1, "", "static_dropout"], [72, 2, 1, "", "static_dtype"], [72, 2, 1, "", "static_dtype_bits"], [72, 2, 1, "", "static_eigh"], [72, 2, 1, "", "static_eigvalsh"], [72, 2, 1, "", "static_einops_rearrange"], [72, 2, 1, "", "static_einops_reduce"], [72, 2, 1, "", "static_einops_repeat"], [72, 2, 1, "", "static_einsum"], [72, 2, 1, "", "static_empty"], [72, 2, 1, "", "static_equal"], [72, 2, 1, "", "static_erf"], [72, 2, 1, "", "static_execute_with_gradients"], [72, 2, 1, "", "static_exists"], [72, 2, 1, "", "static_exp"], [72, 2, 1, "", "static_expand_dims"], [72, 2, 1, "", "static_expm1"], [72, 2, 1, "", "static_finfo"], [72, 2, 1, "", "static_flip"], [72, 2, 1, "", "static_floor"], [72, 2, 1, "", "static_floor_divide"], [72, 2, 1, "", "static_floormod"], [72, 2, 1, "", "static_fourier_encode"], [72, 2, 1, "", "static_full"], [72, 2, 1, "", "static_function_supported_dtypes"], [72, 2, 1, "", "static_function_unsupported_dtypes"], [72, 2, 1, "", "static_gather"], [72, 2, 1, "", "static_gelu"], [72, 2, 1, "", "static_get_all_arrays_in_memory"], [72, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [72, 2, 1, "", "static_get_min_base"], [72, 2, 1, "", "static_get_min_denominator"], [72, 2, 1, "", "static_get_num_dims"], [72, 2, 1, "", "static_get_referrers_recursive"], [72, 2, 1, "", "static_gpu_is_available"], [72, 2, 1, "", "static_greater"], [72, 2, 1, "", "static_greater_equal"], [72, 2, 1, "", "static_handle_nestable"], [72, 2, 1, "", "static_handle_out_argument"], [72, 2, 1, "", "static_has_nans"], [72, 2, 1, "", "static_iinfo"], [72, 2, 1, "", "static_indices_where"], [72, 2, 1, "", "static_infer_device"], [72, 2, 1, "", "static_infer_dtype"], [72, 2, 1, "", "static_inplace_arrays_supported"], [72, 2, 1, "", "static_inplace_decrement"], [72, 2, 1, "", "static_inplace_increment"], [72, 2, 1, "", "static_inplace_update"], [72, 2, 1, "", "static_inplace_variables_supported"], [72, 2, 1, "", "static_inputs_to_native_arrays"], [72, 2, 1, "", "static_inv"], [72, 2, 1, "", "static_invalid_dtype"], [72, 2, 1, "", "static_is_array"], [72, 2, 1, "", "static_is_float_dtype"], [72, 2, 1, "", "static_is_int_dtype"], [72, 2, 1, "", "static_is_ivy_array"], [72, 2, 1, "", "static_is_ivy_container"], [72, 2, 1, "", "static_is_native_array"], [72, 2, 1, "", "static_isfinite"], [72, 2, 1, "", "static_isinf"], [72, 2, 1, "", "static_isnan"], [72, 2, 1, "", "static_layer_norm"], [72, 2, 1, "", "static_leaky_relu"], [72, 2, 1, "", "static_less"], [72, 2, 1, "", "static_less_equal"], [72, 2, 1, "", "static_linear"], [72, 2, 1, "", "static_log"], [72, 2, 1, "", "static_log10"], [72, 2, 1, "", "static_log1p"], [72, 2, 1, "", "static_log2"], [72, 2, 1, "", "static_logaddexp"], [72, 2, 1, "", "static_logical_and"], [72, 2, 1, "", "static_logical_not"], [72, 2, 1, "", "static_logical_or"], [72, 2, 1, "", "static_logical_xor"], [72, 2, 1, "", "static_lstm_update"], [72, 2, 1, "", "static_match_kwargs"], [72, 2, 1, "", "static_matmul"], [72, 2, 1, "", "static_matrix_norm"], [72, 2, 1, "", "static_matrix_power"], [72, 2, 1, "", "static_matrix_rank"], [72, 2, 1, "", "static_matrix_transpose"], [72, 2, 1, "", "static_max"], [72, 2, 1, "", "static_maximum"], [72, 2, 1, "", "static_mean"], [72, 2, 1, "", "static_min"], [72, 2, 1, "", "static_minimum"], [72, 2, 1, "", "static_multi_head_attention"], [72, 2, 1, "", "static_multinomial"], [72, 2, 1, "", "static_multiprocessing"], [72, 2, 1, "", "static_negative"], [72, 2, 1, "", "static_nonzero"], [72, 2, 1, "", "static_not_equal"], [72, 2, 1, "", "static_num_arrays_in_memory"], [72, 2, 1, "", "static_num_cpu_cores"], [72, 2, 1, "", "static_num_gpus"], [72, 2, 1, "", "static_num_ivy_arrays_on_dev"], [72, 2, 1, "", "static_one_hot"], [72, 2, 1, "", "static_outer"], [72, 2, 1, "", "static_outputs_to_ivy_arrays"], [72, 2, 1, "", "static_percent_used_mem_on_dev"], [72, 2, 1, "", "static_permute_dims"], [72, 2, 1, "", "static_pinv"], [72, 2, 1, "", "static_positive"], [72, 2, 1, "", "static_pow"], [72, 2, 1, "", "static_print_all_arrays_in_memory"], [72, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [72, 2, 1, "", "static_prod"], [72, 2, 1, "", "static_promote_types"], [72, 2, 1, "", "static_qr"], [72, 2, 1, "", "static_queue_timeout"], [72, 2, 1, "", "static_random_normal"], [72, 2, 1, "", "static_relu"], [72, 2, 1, "", "static_remainder"], [72, 2, 1, "", "static_repeat"], [72, 2, 1, "", "static_reshape"], [72, 2, 1, "", "static_result_type"], [72, 2, 1, "", "static_round"], [72, 2, 1, "", "static_scaled_dot_product_attention"], [72, 2, 1, "", "static_scatter_flat"], [72, 2, 1, "", "static_scatter_nd"], [72, 2, 1, "", "static_seed"], [72, 2, 1, "", "static_set_default_device"], [72, 2, 1, "", "static_set_default_dtype"], [72, 2, 1, "", "static_set_default_float_dtype"], [72, 2, 1, "", "static_set_default_int_dtype"], [72, 2, 1, "", "static_set_min_base"], [72, 2, 1, "", "static_set_min_denominator"], [72, 2, 1, "", "static_set_queue_timeout"], [72, 2, 1, "", "static_set_split_factor"], [72, 2, 1, "", "static_set_tmp_dir"], [72, 2, 1, "", "static_set_with_grads"], [72, 2, 1, "", "static_shape"], [72, 2, 1, "", "static_shape_to_tuple"], [72, 2, 1, "", "static_shuffle"], [72, 2, 1, "", "static_sigmoid"], [72, 2, 1, "", "static_sign"], [72, 2, 1, "", "static_sin"], [72, 2, 1, "", "static_sinh"], [72, 2, 1, "", "static_slogdet"], [72, 2, 1, "", "static_softmax"], [72, 2, 1, "", "static_solve"], [72, 2, 1, "", "static_split"], [72, 2, 1, "", "static_split_factor"], [72, 2, 1, "", "static_split_func_call"], [72, 2, 1, "", "static_sqrt"], [72, 2, 1, "", "static_square"], [72, 2, 1, "", "static_squeeze"], [72, 2, 1, "", "static_stable_divide"], [72, 2, 1, "", "static_stable_pow"], [72, 2, 1, "", "static_stack"], [72, 2, 1, "", "static_std"], [72, 2, 1, "", "static_stop_gradient"], [72, 2, 1, "", "static_sum"], [72, 2, 1, "", "static_supports_inplace"], [72, 2, 1, "", "static_svd"], [72, 2, 1, "", "static_svdvals"], [72, 2, 1, "", "static_swapaxes"], [72, 2, 1, "", "static_tensordot"], [72, 2, 1, "", "static_tile"], [72, 2, 1, "", "static_tmp_dir"], [72, 2, 1, "", "static_to_device"], [72, 2, 1, "", "static_to_list"], [72, 2, 1, "", "static_to_native_arrays_and_back"], [72, 2, 1, "", "static_to_numpy"], [72, 2, 1, "", "static_to_scalar"], [72, 2, 1, "", "static_total_mem_on_dev"], [72, 2, 1, "", "static_tpu_is_available"], [72, 2, 1, "", "static_trace"], [72, 2, 1, "", "static_trunc"], [72, 2, 1, "", "static_try_else_none"], [72, 2, 1, "", "static_type_promote_arrays"], [72, 2, 1, "", "static_unique_all"], [72, 2, 1, "", "static_unique_inverse"], [72, 2, 1, "", "static_unique_values"], [72, 2, 1, "", "static_unset_default_device"], [72, 2, 1, "", "static_unset_default_dtype"], [72, 2, 1, "", "static_unset_default_float_dtype"], [72, 2, 1, "", "static_unset_default_int_dtype"], [72, 2, 1, "", "static_unset_with_grads"], [72, 2, 1, "", "static_unstack"], [72, 2, 1, "", "static_used_mem_on_dev"], [72, 2, 1, "", "static_valid_dtype"], [72, 2, 1, "", "static_value_is_nan"], [72, 2, 1, "", "static_var"], [72, 2, 1, "", "static_variable"], [72, 2, 1, "", "static_variable_data"], [72, 2, 1, "", "static_vecdot"], [72, 2, 1, "", "static_vector_norm"], [72, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [72, 2, 1, "", "static_where"], [72, 2, 1, "", "static_with_grads"], [72, 2, 1, "", "static_zero_pad"], [72, 2, 1, "", "stop_gradient"], [72, 2, 1, "", "supports_inplace"], [72, 2, 1, "", "svd"], [72, 2, 1, "", "svdvals"], [72, 2, 1, "", "tensordot"], [72, 2, 1, "", "tmp_dir"], [72, 2, 1, "", "to_native_arrays_and_back"], [72, 2, 1, "", "to_scalar"], [72, 2, 1, "", "total_mem_on_dev"], [72, 2, 1, "", "tpu_is_available"], [72, 2, 1, "", "trace"], [72, 2, 1, "", "try_else_none"], [72, 2, 1, "", "type_promote_arrays"], [72, 2, 1, "", "unique_all"], [72, 2, 1, "", "unique_inverse"], [72, 2, 1, "", "unique_values"], [72, 2, 1, "", "unset_default_device"], [72, 2, 1, "", "unset_default_dtype"], [72, 2, 1, "", "unset_default_float_dtype"], [72, 2, 1, "", "unset_default_int_dtype"], [72, 2, 1, "", "unset_with_grads"], [72, 2, 1, "", "used_mem_on_dev"], [72, 2, 1, "", "valid_dtype"], [72, 2, 1, "", "value_is_nan"], [72, 2, 1, "", "variable"], [72, 2, 1, "", "variable_data"], [72, 2, 1, "", "vecdot"], [72, 2, 1, "", "vector_to_skew_symmetric_matrix"], [72, 2, 1, "", "where"], [72, 2, 1, "", "with_grads"], [72, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "at_dev"], [73, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[332, 3, 1, "", "abs"], [337, 3, 1, "", "acos"], [341, 3, 1, "", "acosh"], [645, 3, 1, "", "adam_step"], [649, 3, 1, "", "adam_update"], [345, 3, 1, "", "add"], [940, 3, 1, "", "all"], [570, 3, 1, "", "all_equal"], [945, 3, 1, "", "any"], [896, 3, 1, "", "argsort"], [177, 3, 1, "", "asarray"], [350, 3, 1, "", "asin"], [354, 3, 1, "", "asinh"], [358, 3, 1, "", "atan"], [362, 3, 1, "", "atan2"], [366, 3, 1, "", "atanh"], [767, 3, 1, "", "binary_cross_entropy"], [370, 3, 1, "", "bitwise_and"], [374, 3, 1, "", "bitwise_invert"], [378, 3, 1, "", "bitwise_left_shift"], [382, 3, 1, "", "bitwise_or"], [386, 3, 1, "", "bitwise_right_shift"], [390, 3, 1, "", "bitwise_xor"], [253, 3, 1, "", "can_cast"], [394, 3, 1, "", "ceil"], [695, 3, 1, "", "cholesky"], [783, 3, 1, "", "clip"], [581, 3, 1, "", "clip_vector_norm"], [788, 3, 1, "", "concat"], [792, 3, 1, "", "constant_pad"], [398, 3, 1, "", "cos"], [402, 3, 1, "", "cosh"], [772, 3, 1, "", "cross_entropy"], [406, 3, 1, "", "divide"], [907, 3, 1, "", "einsum"], [183, 3, 1, "", "empty_like"], [411, 3, 1, "", "equal"], [415, 3, 1, "", "erf"], [419, 3, 1, "", "exp"], [796, 3, 1, "", "expand_dims"], [423, 3, 1, "", "expm1"], [800, 3, 1, "", "flip"], [427, 3, 1, "", "floor"], [431, 3, 1, "", "floor_divide"], [191, 3, 1, "", "from_dlpack"], [197, 3, 1, "", "full_like"], [598, 3, 1, "", "gather_nd"], [654, 3, 1, "", "gradient_descent_update"], [435, 3, 1, "", "greater"], [439, 3, 1, "", "greater_equal"], [658, 3, 1, "", "is_variable"], [443, 3, 1, "", "isfinite"], [447, 3, 1, "", "isinf"], [451, 3, 1, "", "isnan"], [662, 3, 1, "", "lamb_update"], [666, 3, 1, "", "lars_update"], [865, 3, 1, "", "layer_norm"], [455, 3, 1, "", "less"], [459, 3, 1, "", "less_equal"], [463, 3, 1, "", "log"], [467, 3, 1, "", "log10"], [471, 3, 1, "", "log1p"], [475, 3, 1, "", "log2"], [479, 3, 1, "", "logaddexp"], [483, 3, 1, "", "logical_and"], [487, 3, 1, "", "logical_not"], [491, 3, 1, "", "logical_or"], [495, 3, 1, "", "logical_xor"], [718, 3, 1, "", "matmul"], [911, 3, 1, "", "max"], [915, 3, 1, "", "mean"], [208, 3, 1, "", "meshgrid"], [919, 3, 1, "", "min"], [501, 3, 1, "", "multiply"], [213, 3, 1, "", "native_array"], [506, 3, 1, "", "negative"], [510, 3, 1, "", "not_equal"], [221, 3, 1, "", "ones_like"], [670, 3, 1, "", "optimizer_update"], [804, 3, 1, "", "permute_dims"], [514, 3, 1, "", "positive"], [518, 3, 1, "", "pow"], [923, 3, 1, "", "prod"], [874, 3, 1, "", "random_uniform"], [522, 3, 1, "", "remainder"], [808, 3, 1, "", "repeat"], [812, 3, 1, "", "reshape"], [816, 3, 1, "", "roll"], [526, 3, 1, "", "round"], [530, 3, 1, "", "sign"], [534, 3, 1, "", "sin"], [538, 3, 1, "", "sinh"], [164, 3, 1, "", "softplus"], [901, 3, 1, "", "sort"], [777, 3, 1, "", "sparse_cross_entropy"], [542, 3, 1, "", "sqrt"], [546, 3, 1, "", "square"], [822, 3, 1, "", "squeeze"], [826, 3, 1, "", "stack"], [334, 3, 1, "", "static_abs"], [647, 3, 1, "", "static_adam_step"], [651, 3, 1, "", "static_adam_update"], [347, 3, 1, "", "static_add"], [942, 3, 1, "", "static_all"], [572, 3, 1, "", "static_all_equal"], [947, 3, 1, "", "static_any"], [174, 3, 1, "", "static_arange"], [898, 3, 1, "", "static_argsort"], [179, 3, 1, "", "static_asarray"], [769, 3, 1, "", "static_binary_cross_entropy"], [255, 3, 1, "", "static_can_cast"], [697, 3, 1, "", "static_cholesky"], [785, 3, 1, "", "static_clip"], [774, 3, 1, "", "static_cross_entropy"], [408, 3, 1, "", "static_divide"], [185, 3, 1, "", "static_empty_like"], [188, 3, 1, "", "static_eye"], [193, 3, 1, "", "static_from_dlpack"], [199, 3, 1, "", "static_full_like"], [600, 3, 1, "", "static_gather_nd"], [656, 3, 1, "", "static_gradient_descent_update"], [660, 3, 1, "", "static_is_variable"], [664, 3, 1, "", "static_lamb_update"], [668, 3, 1, "", "static_lars_update"], [202, 3, 1, "", "static_linspace"], [205, 3, 1, "", "static_logspace"], [210, 3, 1, "", "static_meshgrid"], [503, 3, 1, "", "static_multiply"], [215, 3, 1, "", "static_native_array"], [218, 3, 1, "", "static_ones"], [223, 3, 1, "", "static_ones_like"], [672, 3, 1, "", "static_optimizer_update"], [871, 3, 1, "", "static_randint"], [876, 3, 1, "", "static_random_uniform"], [818, 3, 1, "", "static_roll"], [166, 3, 1, "", "static_softplus"], [903, 3, 1, "", "static_sort"], [779, 3, 1, "", "static_sparse_cross_entropy"], [549, 3, 1, "", "static_subtract"], [554, 3, 1, "", "static_tan"], [559, 3, 1, "", "static_tanh"], [225, 3, 1, "", "static_tril"], [230, 3, 1, "", "static_triu"], [887, 3, 1, "", "static_unique_counts"], [235, 3, 1, "", "static_zeros"], [238, 3, 1, "", "static_zeros_like"], [927, 3, 1, "", "std"], [551, 3, 1, "", "subtract"], [931, 3, 1, "", "sum"], [830, 3, 1, "", "swapaxes"], [556, 3, 1, "", "tan"], [561, 3, 1, "", "tanh"], [834, 3, 1, "", "tile"], [227, 3, 1, "", "tril"], [232, 3, 1, "", "triu"], [565, 3, 1, "", "trunc"], [889, 3, 1, "", "unique_counts"], [935, 3, 1, "", "var"], [838, 3, 1, "", "zero_pad"], [240, 3, 1, "", "zeros_like"]], "ivy.container.creation": [[75, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[75, 2, 1, "", "asarray"], [75, 2, 1, "", "empty_like"], [75, 2, 1, "", "from_dlpack"], [75, 2, 1, "", "full_like"], [75, 2, 1, "", "meshgrid"], [75, 2, 1, "", "native_array"], [75, 2, 1, "", "ones_like"], [75, 2, 1, "", "static_arange"], [75, 2, 1, "", "static_asarray"], [75, 2, 1, "", "static_empty_like"], [75, 2, 1, "", "static_eye"], [75, 2, 1, "", "static_from_dlpack"], [75, 2, 1, "", "static_full_like"], [75, 2, 1, "", "static_linspace"], [75, 2, 1, "", "static_logspace"], [75, 2, 1, "", "static_meshgrid"], [75, 2, 1, "", "static_native_array"], [75, 2, 1, "", "static_ones"], [75, 2, 1, "", "static_ones_like"], [75, 2, 1, "", "static_tril"], [75, 2, 1, "", "static_triu"], [75, 2, 1, "", "static_zeros"], [75, 2, 1, "", "static_zeros_like"], [75, 2, 1, "", "tril"], [75, 2, 1, "", "triu"], [75, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[77, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[77, 2, 1, "", "can_cast"], [77, 2, 1, "", "static_can_cast"]], "ivy.container.device": [[79, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[81, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[81, 2, 1, "", "abs"], [81, 2, 1, "", "acos"], [81, 2, 1, "", "acosh"], [81, 2, 1, "", "add"], [81, 2, 1, "", "asin"], [81, 2, 1, "", "asinh"], [81, 2, 1, "", "atan"], [81, 2, 1, "", "atan2"], [81, 2, 1, "", "atanh"], [81, 2, 1, "", "bitwise_and"], [81, 2, 1, "", "bitwise_invert"], [81, 2, 1, "", "bitwise_left_shift"], [81, 2, 1, "", "bitwise_or"], [81, 2, 1, "", "bitwise_right_shift"], [81, 2, 1, "", "bitwise_xor"], [81, 2, 1, "", "ceil"], [81, 2, 1, "", "cos"], [81, 2, 1, "", "cosh"], [81, 2, 1, "", "divide"], [81, 2, 1, "", "equal"], [81, 2, 1, "", "erf"], [81, 2, 1, "", "exp"], [81, 2, 1, "", "expm1"], [81, 2, 1, "", "floor"], [81, 2, 1, "", "floor_divide"], [81, 2, 1, "", "greater"], [81, 2, 1, "", "greater_equal"], [81, 2, 1, "", "isfinite"], [81, 2, 1, "", "isinf"], [81, 2, 1, "", "isnan"], [81, 2, 1, "", "less"], [81, 2, 1, "", "less_equal"], [81, 2, 1, "", "log"], [81, 2, 1, "", "log10"], [81, 2, 1, "", "log1p"], [81, 2, 1, "", "log2"], [81, 2, 1, "", "logaddexp"], [81, 2, 1, "", "logical_and"], [81, 2, 1, "", "logical_not"], [81, 2, 1, "", "logical_or"], [81, 2, 1, "", "logical_xor"], [81, 2, 1, "", "multiply"], [81, 2, 1, "", "negative"], [81, 2, 1, "", "not_equal"], [81, 2, 1, "", "positive"], [81, 2, 1, "", "pow"], [81, 2, 1, "", "remainder"], [81, 2, 1, "", "round"], [81, 2, 1, "", "sign"], [81, 2, 1, "", "sin"], [81, 2, 1, "", "sinh"], [81, 2, 1, "", "sqrt"], [81, 2, 1, "", "square"], [81, 2, 1, "", "static_abs"], [81, 2, 1, "", "static_add"], [81, 2, 1, "", "static_divide"], [81, 2, 1, "", "static_multiply"], [81, 2, 1, "", "static_subtract"], [81, 2, 1, "", "static_tan"], [81, 2, 1, "", "static_tanh"], [81, 2, 1, "", "subtract"], [81, 2, 1, "", "tan"], [81, 2, 1, "", "tanh"], [81, 2, 1, "", "trunc"]], "ivy.container.general": [[83, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[83, 2, 1, "", "all_equal"], [83, 2, 1, "", "clip_vector_norm"], [83, 2, 1, "", "gather_nd"], [83, 2, 1, "", "static_all_equal"], [83, 2, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[85, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[85, 2, 1, "", "adam_step"], [85, 2, 1, "", "adam_update"], [85, 2, 1, "", "gradient_descent_update"], [85, 2, 1, "", "is_variable"], [85, 2, 1, "", "lamb_update"], [85, 2, 1, "", "lars_update"], [85, 2, 1, "", "optimizer_update"], [85, 2, 1, "", "static_adam_step"], [85, 2, 1, "", "static_adam_update"], [85, 2, 1, "", "static_gradient_descent_update"], [85, 2, 1, "", "static_is_variable"], [85, 2, 1, "", "static_lamb_update"], [85, 2, 1, "", "static_lars_update"], [85, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[87, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[89, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[91, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[91, 2, 1, "", "cholesky"], [91, 2, 1, "", "matmul"], [91, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[93, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[93, 2, 1, "", "binary_cross_entropy"], [93, 2, 1, "", "cross_entropy"], [93, 2, 1, "", "sparse_cross_entropy"], [93, 2, 1, "", "static_binary_cross_entropy"], [93, 2, 1, "", "static_cross_entropy"], [93, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[95, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[95, 2, 1, "", "clip"], [95, 2, 1, "", "concat"], [95, 2, 1, "", "constant_pad"], [95, 2, 1, "", "expand_dims"], [95, 2, 1, "", "flip"], [95, 2, 1, "", "permute_dims"], [95, 2, 1, "", "repeat"], [95, 2, 1, "", "reshape"], [95, 2, 1, "", "roll"], [95, 2, 1, "", "squeeze"], [95, 2, 1, "", "stack"], [95, 2, 1, "", "static_clip"], [95, 2, 1, "", "static_roll"], [95, 2, 1, "", "swapaxes"], [95, 2, 1, "", "tile"], [95, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[97, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[97, 2, 1, "", "layer_norm"]], "ivy.container.random": [[99, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[99, 2, 1, "", "random_uniform"], [99, 2, 1, "", "static_randint"], [99, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[101, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[103, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[103, 2, 1, "", "static_unique_counts"], [103, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[105, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[105, 2, 1, "", "argsort"], [105, 2, 1, "", "sort"], [105, 2, 1, "", "static_argsort"], [105, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[107, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[107, 2, 1, "", "einsum"], [107, 2, 1, "", "max"], [107, 2, 1, "", "mean"], [107, 2, 1, "", "min"], [107, 2, 1, "", "prod"], [107, 2, 1, "", "std"], [107, 2, 1, "", "sum"], [107, 2, 1, "", "var"]], "ivy.container.utility": [[109, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[109, 2, 1, "", "all"], [109, 2, 1, "", "any"], [109, 2, 1, "", "static_all"], [109, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[111, 3, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 3, 1, "", "handle_nestable"], [148, 3, 1, "", "handle_out_argument"], [149, 3, 1, "", "infer_device"], [150, 3, 1, "", "infer_dtype"], [151, 3, 1, "", "inputs_to_ivy_arrays"], [152, 3, 1, "", "inputs_to_native_arrays"], [153, 3, 1, "", "outputs_to_ivy_arrays"], [154, 3, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [168, 0, 0, "-", "compilation"], [170, 0, 0, "-", "constants"], [171, 0, 0, "-", "creation"], [242, 0, 0, "-", "data_type"], [279, 0, 0, "-", "device"], [329, 0, 0, "-", "elementwise"], [567, 0, 0, "-", "general"], [641, 0, 0, "-", "gradients"], [679, 0, 0, "-", "layers"], [692, 0, 0, "-", "linear_algebra"], [764, 0, 0, "-", "losses"], [780, 0, 0, "-", "manipulation"], [840, 0, 0, "-", "meta"], [844, 0, 0, "-", "nest"], [862, 0, 0, "-", "norms"], [867, 0, 0, "-", "random"], [879, 0, 0, "-", "searching"], [884, 0, 0, "-", "set"], [893, 0, 0, "-", "sorting"], [904, 0, 0, "-", "statistical"], [937, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 3, 1, "", "gelu"], [158, 3, 1, "", "leaky_relu"], [159, 3, 1, "", "relu"], [160, 3, 1, "", "sigmoid"], [161, 3, 1, "", "softmax"], [165, 3, 1, "", "softplus"], [167, 3, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[169, 3, 1, "", "compile"]], "ivy.functional.ivy.constants": [[170, 5, 1, "", "e"], [170, 5, 1, "", "inf"], [170, 5, 1, "", "nan"], [170, 5, 1, "", "newaxis"], [170, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[173, 3, 1, "", "arange"], [171, 3, 1, "", "array"], [178, 3, 1, "", "asarray"], [180, 3, 1, "", "empty"], [184, 3, 1, "", "empty_like"], [187, 3, 1, "", "eye"], [192, 3, 1, "", "from_dlpack"], [194, 3, 1, "", "full"], [198, 3, 1, "", "full_like"], [201, 3, 1, "", "linspace"], [204, 3, 1, "", "logspace"], [209, 3, 1, "", "meshgrid"], [214, 3, 1, "", "native_array"], [217, 3, 1, "", "ones"], [222, 3, 1, "", "ones_like"], [228, 3, 1, "", "tril"], [233, 3, 1, "", "triu"], [236, 3, 1, "", "zeros"], [241, 3, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[242, 1, 1, "", "DefaultDtype"], [242, 1, 1, "", "DefaultFloatDtype"], [242, 1, 1, "", "DefaultIntDtype"], [246, 3, 1, "", "as_ivy_dtype"], [247, 3, 1, "", "as_native_dtype"], [248, 3, 1, "", "astype"], [249, 3, 1, "", "broadcast_arrays"], [250, 3, 1, "", "broadcast_to"], [254, 3, 1, "", "can_cast"], [256, 3, 1, "", "closest_valid_dtype"], [257, 3, 1, "", "default_dtype"], [258, 3, 1, "", "default_float_dtype"], [259, 3, 1, "", "default_int_dtype"], [260, 3, 1, "", "dtype"], [261, 3, 1, "", "dtype_bits"], [262, 3, 1, "", "finfo"], [263, 3, 1, "", "function_supported_dtypes"], [264, 3, 1, "", "function_unsupported_dtypes"], [265, 3, 1, "", "iinfo"], [266, 3, 1, "", "invalid_dtype"], [267, 3, 1, "", "is_float_dtype"], [268, 3, 1, "", "is_int_dtype"], [269, 3, 1, "", "promote_types"], [270, 3, 1, "", "result_type"], [271, 3, 1, "", "set_default_dtype"], [272, 3, 1, "", "set_default_float_dtype"], [273, 3, 1, "", "set_default_int_dtype"], [274, 3, 1, "", "type_promote_arrays"], [275, 3, 1, "", "unset_default_dtype"], [276, 3, 1, "", "unset_default_float_dtype"], [277, 3, 1, "", "unset_default_int_dtype"], [278, 3, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[242, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[279, 1, 1, "", "DefaultDevice"], [281, 1, 1, "", "DevClonedItem"], [282, 1, 1, "", "DevClonedIter"], [283, 1, 1, "", "DevClonedNest"], [284, 1, 1, "", "DevDistItem"], [285, 1, 1, "", "DevDistIter"], [286, 1, 1, "", "DevDistNest"], [279, 1, 1, "", "DevManager"], [288, 1, 1, "", "DevMapper"], [289, 1, 1, "", "DevMapperMultiProc"], [279, 1, 1, "", "MultiDev"], [291, 1, 1, "", "MultiDevItem"], [292, 1, 1, "", "MultiDevIter"], [293, 1, 1, "", "MultiDevNest"], [294, 1, 1, "", "Profiler"], [295, 3, 1, "", "as_ivy_dev"], [296, 3, 1, "", "as_native_dev"], [297, 3, 1, "", "clear_mem_on_dev"], [298, 3, 1, "", "default_device"], [299, 3, 1, "", "dev"], [300, 3, 1, "", "dev_clone"], [301, 3, 1, "", "dev_clone_array"], [302, 3, 1, "", "dev_clone_iter"], [303, 3, 1, "", "dev_clone_nest"], [304, 3, 1, "", "dev_dist"], [305, 3, 1, "", "dev_dist_array"], [306, 3, 1, "", "dev_dist_iter"], [307, 3, 1, "", "dev_dist_nest"], [308, 3, 1, "", "dev_unify"], [309, 3, 1, "", "dev_unify_array"], [310, 3, 1, "", "dev_unify_iter"], [311, 3, 1, "", "dev_unify_nest"], [312, 3, 1, "", "dev_util"], [313, 3, 1, "", "get_all_ivy_arrays_on_dev"], [314, 3, 1, "", "gpu_is_available"], [315, 3, 1, "", "num_cpu_cores"], [316, 3, 1, "", "num_gpus"], [317, 3, 1, "", "num_ivy_arrays_on_dev"], [318, 3, 1, "", "percent_used_mem_on_dev"], [319, 3, 1, "", "print_all_ivy_arrays_on_dev"], [320, 3, 1, "", "set_default_device"], [321, 3, 1, "", "set_split_factor"], [322, 3, 1, "", "split_factor"], [323, 3, 1, "", "split_func_call"], [324, 3, 1, "", "to_device"], [325, 3, 1, "", "total_mem_on_dev"], [326, 3, 1, "", "tpu_is_available"], [327, 3, 1, "", "unset_default_device"], [328, 3, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[279, 2, 1, "", "__enter__"], [279, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[279, 2, 1, "", "__init__"], [279, 2, 1, "", "da_tune_step"], [279, 4, 1, "", "dim_size"], [279, 2, 1, "", "ds_tune_step"], [279, 2, 1, "", "map"], [279, 2, 1, "", "repeated_config_check"], [279, 4, 1, "", "tune_step"], [279, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[288, 2, 1, "", "__init__"], [288, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[289, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[279, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[291, 2, 1, "", "__init__"], [291, 2, 1, "", "items"], [291, 2, 1, "", "keys"], [291, 4, 1, "", "shape"], [291, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[292, 2, 1, "", "__init__"], [292, 2, 1, "", "at_dev"], [292, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[293, 2, 1, "", "__init__"], [293, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[294, 2, 1, "", "__init__"], [294, 2, 1, "", "start"], [294, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[333, 3, 1, "", "abs"], [338, 3, 1, "", "acos"], [342, 3, 1, "", "acosh"], [346, 3, 1, "", "add"], [351, 3, 1, "", "asin"], [355, 3, 1, "", "asinh"], [359, 3, 1, "", "atan"], [363, 3, 1, "", "atan2"], [367, 3, 1, "", "atanh"], [371, 3, 1, "", "bitwise_and"], [375, 3, 1, "", "bitwise_invert"], [379, 3, 1, "", "bitwise_left_shift"], [383, 3, 1, "", "bitwise_or"], [387, 3, 1, "", "bitwise_right_shift"], [391, 3, 1, "", "bitwise_xor"], [395, 3, 1, "", "ceil"], [399, 3, 1, "", "cos"], [403, 3, 1, "", "cosh"], [407, 3, 1, "", "divide"], [412, 3, 1, "", "equal"], [416, 3, 1, "", "erf"], [420, 3, 1, "", "exp"], [424, 3, 1, "", "expm1"], [428, 3, 1, "", "floor"], [432, 3, 1, "", "floor_divide"], [436, 3, 1, "", "greater"], [440, 3, 1, "", "greater_equal"], [444, 3, 1, "", "isfinite"], [448, 3, 1, "", "isinf"], [452, 3, 1, "", "isnan"], [456, 3, 1, "", "less"], [460, 3, 1, "", "less_equal"], [464, 3, 1, "", "log"], [468, 3, 1, "", "log10"], [472, 3, 1, "", "log1p"], [476, 3, 1, "", "log2"], [480, 3, 1, "", "logaddexp"], [484, 3, 1, "", "logical_and"], [488, 3, 1, "", "logical_not"], [492, 3, 1, "", "logical_or"], [496, 3, 1, "", "logical_xor"], [497, 3, 1, "", "maximum"], [498, 3, 1, "", "minimum"], [502, 3, 1, "", "multiply"], [507, 3, 1, "", "negative"], [511, 3, 1, "", "not_equal"], [515, 3, 1, "", "positive"], [519, 3, 1, "", "pow"], [523, 3, 1, "", "remainder"], [527, 3, 1, "", "round"], [531, 3, 1, "", "sign"], [535, 3, 1, "", "sin"], [539, 3, 1, "", "sinh"], [543, 3, 1, "", "sqrt"], [547, 3, 1, "", "square"], [552, 3, 1, "", "subtract"], [557, 3, 1, "", "tan"], [562, 3, 1, "", "tanh"], [566, 3, 1, "", "trunc"]], "ivy.functional.ivy.general": [[571, 3, 1, "", "all_equal"], [573, 3, 1, "", "arg_info"], [574, 3, 1, "", "arg_names"], [575, 3, 1, "", "array_equal"], [576, 3, 1, "", "arrays_equal"], [577, 3, 1, "", "assert_supports_inplace"], [578, 3, 1, "", "cache_fn"], [579, 3, 1, "", "clip_matrix_norm"], [582, 3, 1, "", "clip_vector_norm"], [583, 3, 1, "", "container_types"], [584, 3, 1, "", "copy_array"], [585, 3, 1, "", "cumprod"], [586, 3, 1, "", "cumsum"], [587, 3, 1, "", "current_backend_str"], [588, 3, 1, "", "default"], [589, 3, 1, "", "einops_rearrange"], [590, 3, 1, "", "einops_reduce"], [591, 3, 1, "", "einops_repeat"], [592, 3, 1, "", "exists"], [593, 3, 1, "", "floormod"], [594, 3, 1, "", "fourier_encode"], [595, 3, 1, "", "gather"], [599, 3, 1, "", "gather_nd"], [601, 3, 1, "", "get_all_arrays_in_memory"], [602, 3, 1, "", "get_min_base"], [603, 3, 1, "", "get_min_denominator"], [604, 3, 1, "", "get_num_dims"], [605, 3, 1, "", "get_referrers_recursive"], [606, 3, 1, "", "has_nans"], [607, 3, 1, "", "indices_where"], [608, 3, 1, "", "inplace_arrays_supported"], [609, 3, 1, "", "inplace_decrement"], [610, 3, 1, "", "inplace_increment"], [611, 3, 1, "", "inplace_update"], [612, 3, 1, "", "inplace_variables_supported"], [613, 3, 1, "", "is_array"], [614, 3, 1, "", "is_ivy_array"], [615, 3, 1, "", "is_ivy_container"], [616, 3, 1, "", "is_native_array"], [617, 3, 1, "", "match_kwargs"], [618, 3, 1, "", "multiprocessing"], [619, 3, 1, "", "num_arrays_in_memory"], [620, 3, 1, "", "one_hot"], [621, 3, 1, "", "print_all_arrays_in_memory"], [622, 3, 1, "", "queue_timeout"], [623, 3, 1, "", "scatter_flat"], [624, 3, 1, "", "scatter_nd"], [625, 3, 1, "", "set_min_base"], [626, 3, 1, "", "set_min_denominator"], [627, 3, 1, "", "set_queue_timeout"], [628, 3, 1, "", "set_tmp_dir"], [629, 3, 1, "", "shape"], [630, 3, 1, "", "shape_to_tuple"], [631, 3, 1, "", "stable_divide"], [632, 3, 1, "", "stable_pow"], [633, 3, 1, "", "supports_inplace"], [634, 3, 1, "", "tmp_dir"], [635, 3, 1, "", "to_list"], [636, 3, 1, "", "to_numpy"], [637, 3, 1, "", "to_scalar"], [638, 3, 1, "", "try_else_none"], [639, 3, 1, "", "unstack"], [640, 3, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[641, 1, 1, "", "GradientTracking"], [646, 3, 1, "", "adam_step"], [650, 3, 1, "", "adam_update"], [652, 3, 1, "", "execute_with_gradients"], [655, 3, 1, "", "gradient_descent_update"], [659, 3, 1, "", "is_variable"], [663, 3, 1, "", "lamb_update"], [667, 3, 1, "", "lars_update"], [671, 3, 1, "", "optimizer_update"], [673, 3, 1, "", "set_with_grads"], [674, 3, 1, "", "stop_gradient"], [675, 3, 1, "", "unset_with_grads"], [676, 3, 1, "", "variable"], [677, 3, 1, "", "variable_data"], [678, 3, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[641, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[680, 3, 1, "", "conv1d"], [681, 3, 1, "", "conv1d_transpose"], [682, 3, 1, "", "conv2d"], [683, 3, 1, "", "conv2d_transpose"], [684, 3, 1, "", "conv3d"], [685, 3, 1, "", "conv3d_transpose"], [686, 3, 1, "", "depthwise_conv2d"], [687, 3, 1, "", "dropout"], [688, 3, 1, "", "linear"], [689, 3, 1, "", "lstm_update"], [690, 3, 1, "", "multi_head_attention"], [691, 3, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[696, 3, 1, "", "cholesky"], [700, 3, 1, "", "cross"], [703, 3, 1, "", "det"], [706, 3, 1, "", "diagonal"], [709, 3, 1, "", "eigh"], [712, 3, 1, "", "eigvalsh"], [715, 3, 1, "", "inv"], [719, 3, 1, "", "matmul"], [722, 3, 1, "", "matrix_norm"], [723, 3, 1, "", "matrix_power"], [726, 3, 1, "", "matrix_rank"], [729, 3, 1, "", "matrix_transpose"], [732, 3, 1, "", "outer"], [735, 3, 1, "", "pinv"], [738, 3, 1, "", "qr"], [739, 3, 1, "", "slogdet"], [742, 3, 1, "", "solve"], [745, 3, 1, "", "svd"], [748, 3, 1, "", "svdvals"], [751, 3, 1, "", "tensordot"], [754, 3, 1, "", "trace"], [757, 3, 1, "", "vecdot"], [760, 3, 1, "", "vector_norm"], [763, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[768, 3, 1, "", "binary_cross_entropy"], [773, 3, 1, "", "cross_entropy"], [778, 3, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[784, 3, 1, "", "clip"], [789, 3, 1, "", "concat"], [793, 3, 1, "", "constant_pad"], [797, 3, 1, "", "expand_dims"], [801, 3, 1, "", "flip"], [805, 3, 1, "", "permute_dims"], [809, 3, 1, "", "repeat"], [813, 3, 1, "", "reshape"], [817, 3, 1, "", "roll"], [819, 3, 1, "", "split"], [823, 3, 1, "", "squeeze"], [827, 3, 1, "", "stack"], [831, 3, 1, "", "swapaxes"], [835, 3, 1, "", "tile"], [839, 3, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[841, 3, 1, "", "fomaml_step"], [842, 3, 1, "", "maml_step"], [843, 3, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[845, 3, 1, "", "all_nested_indices"], [846, 3, 1, "", "copy_nest"], [847, 3, 1, "", "index_nest"], [848, 3, 1, "", "insert_into_nest_at_index"], [849, 3, 1, "", "insert_into_nest_at_indices"], [850, 3, 1, "", "map"], [851, 3, 1, "", "map_nest_at_index"], [852, 3, 1, "", "map_nest_at_indices"], [853, 3, 1, "", "multi_index_nest"], [854, 3, 1, "", "nested_any"], [855, 3, 1, "", "nested_indices_where"], [856, 3, 1, "", "nested_map"], [857, 3, 1, "", "nested_multi_map"], [858, 3, 1, "", "prune_nest_at_index"], [859, 3, 1, "", "prune_nest_at_indices"], [860, 3, 1, "", "set_nest_at_index"], [861, 3, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[866, 3, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[868, 3, 1, "", "multinomial"], [870, 3, 1, "", "randint"], [872, 3, 1, "", "random_normal"], [875, 3, 1, "", "random_uniform"], [877, 3, 1, "", "seed"], [878, 3, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[880, 3, 1, "", "argmax"], [881, 3, 1, "", "argmin"], [882, 3, 1, "", "nonzero"], [883, 3, 1, "", "where"]], "ivy.functional.ivy.set": [[885, 3, 1, "", "unique_all"], [890, 3, 1, "", "unique_counts"], [891, 3, 1, "", "unique_inverse"], [892, 3, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[897, 3, 1, "", "argsort"], [902, 3, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[908, 3, 1, "", "einsum"], [912, 3, 1, "", "max"], [916, 3, 1, "", "mean"], [920, 3, 1, "", "min"], [924, 3, 1, "", "prod"], [928, 3, 1, "", "std"], [932, 3, 1, "", "sum"], [936, 3, 1, "", "var"]], "ivy.functional.ivy.utility": [[941, 3, 1, "", "all"], [946, 3, 1, "", "any"]], "ivy.inspection": [[952, 3, 1, "", "add_array_specs"], [953, 3, 1, "", "fn_array_spec"]], "ivy.stateful": [[955, 0, 0, "-", "activations"], [958, 0, 0, "-", "converters"], [960, 0, 0, "-", "initializers"], [969, 0, 0, "-", "layers"], [981, 0, 0, "-", "module"], [983, 0, 0, "-", "norms"], [985, 0, 0, "-", "optimizers"], [991, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[956, 1, 1, "", "GEGLU"], [957, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[956, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[957, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[959, 3, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[960, 1, 1, "", "Constant"], [962, 1, 1, "", "FirstLayerSiren"], [963, 1, 1, "", "GlorotUniform"], [960, 1, 1, "", "KaimingNormal"], [965, 1, 1, "", "Ones"], [966, 1, 1, "", "Siren"], [960, 1, 1, "", "Uniform"], [968, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[960, 2, 1, "", "__init__"], [960, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[962, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[963, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[960, 2, 1, "", "__init__"], [960, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[965, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[966, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[960, 2, 1, "", "__init__"], [960, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[968, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[970, 1, 1, "", "Conv1D"], [971, 1, 1, "", "Conv1DTranspose"], [972, 1, 1, "", "Conv2D"], [973, 1, 1, "", "Conv2DTranspose"], [974, 1, 1, "", "Conv3D"], [975, 1, 1, "", "Conv3DTranspose"], [976, 1, 1, "", "DepthwiseConv2D"], [977, 1, 1, "", "Dropout"], [978, 1, 1, "", "LSTM"], [979, 1, 1, "", "Linear"], [980, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[970, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[971, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[972, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[973, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[974, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[975, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[976, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[977, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[978, 2, 1, "", "__init__"], [978, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[979, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[980, 2, 1, "", "__init__"]], "ivy.stateful.module": [[982, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[982, 2, 1, "", "__init__"], [982, 2, 1, "", "build"], [982, 4, 1, "", "build_mode"], [982, 4, 1, "", "built"], [982, 2, 1, "", "check_submod_rets"], [982, 2, 1, "", "get_mod_key"], [982, 2, 1, "", "mod_depth"], [982, 2, 1, "", "mod_height"], [982, 2, 1, "", "mod_with_top_mod_key_chain"], [982, 2, 1, "", "save_weights"], [982, 2, 1, "", "show_mod_in_top_mod"], [982, 2, 1, "", "show_structure"], [982, 2, 1, "", "show_v_in_top_v"], [982, 2, 1, "", "sub_mods"], [982, 2, 1, "", "track_submod_call_order"], [982, 2, 1, "", "track_submod_rets"], [982, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[984, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[984, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[986, 1, 1, "", "Adam"], [987, 1, 1, "", "LAMB"], [988, 1, 1, "", "LARS"], [989, 1, 1, "", "Optimizer"], [990, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[986, 2, 1, "", "__init__"], [986, 2, 1, "", "set_state"], [986, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[987, 2, 1, "", "__init__"], [987, 2, 1, "", "set_state"], [987, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[988, 2, 1, "", "__init__"], [988, 2, 1, "", "set_state"], [988, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[989, 2, 1, "", "__init__"], [989, 2, 1, "", "set_state"], [989, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[990, 2, 1, "", "__init__"], [990, 2, 1, "", "set_state"], [990, 4, 1, "", "state"]], "ivy.stateful.sequential": [[992, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[992, 2, 1, "", "__init__"]], "ivy.verbosity": [[995, 3, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 113, 119, 128, 145], "handler": [0, 128], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 948], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 145], "competit": 15, "do": 15, "work": [15, 21], "The": [15, 19, 130, 145], "arrai": [15, 116, 121, 126, 130, 163, 176, 182, 190, 196, 207, 212, 220, 226, 231, 239, 252, 331, 336, 340, 344, 349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 500, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 550, 555, 560, 564, 569, 597, 644, 694, 699, 702, 705, 708, 711, 714, 717, 721, 725, 728, 731, 734, 737, 741, 744, 747, 750, 753, 756, 759, 762, 766, 771, 776, 782, 787, 791, 795, 799, 803, 807, 811, 815, 821, 825, 829, 833, 837, 864, 888, 895, 900, 906, 910, 914, 918, 922, 926, 930, 934, 939, 944], "api": [15, 20, 113, 116, 122, 128, 130, 132, 133], "why": 16, "unifi": [16, 130], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 948], "set": [18, 57, 102, 119, 884], "up": 18, "clone": 18, "ivi": [18, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 163, 164, 165, 166, 173, 174, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 252, 253, 254, 255, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 569, 570, 571, 572, 581, 582, 597, 598, 599, 600, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 694, 695, 696, 697, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 719, 721, 722, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 800, 801, 803, 804, 805, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 833, 834, 835, 837, 838, 839, 864, 865, 866, 870, 871, 874, 875, 876, 887, 888, 889, 890, 895, 896, 897, 898, 900, 901, 902, 903, 906, 907, 908, 910, 911, 912, 914, 915, 916, 918, 919, 920, 922, 923, 924, 926, 927, 928, 930, 931, 932, 934, 935, 936, 939, 940, 941, 942, 944, 945, 946, 947], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 131], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": 18, "commit": [18, 19], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 116, 117], "local": 19, "open": 20, "task": 20, "function": [20, 118, 120, 122, 123, 124, 126, 128, 133, 145], "format": 20, "frontend": [20, 133], "build": [21, 128], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 145], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "activ": [22, 67, 156, 955], "arraywithactiv": 23, "convers": 24, "args_to_ivi": 25, "args_to_n": 26, "to_ivi": 27, "to_n": 28, "creation": [29, 74, 171], "arraywithcr": 30, "data": [31, 76, 117, 123, 131, 145, 242, 884, 885, 886, 890, 892], "type": [31, 76, 118, 123, 145, 242], "arraywithdatatyp": 32, "devic": [33, 78, 124, 126, 279], "arraywithdevic": 34, "elementwis": [35, 80, 329], "arraywithelementwis": 36, "gener": [37, 82, 117, 567], "arraywithgener": 38, "gradient": [39, 84, 641], "arraywithgradi": 40, "imag": [41, 86], "arraywithimag": 42, "layer": [43, 88, 679, 969], "arraywithlay": 44, "linear": [45, 90, 688, 692, 979], "algebra": [45, 90, 692], "arraywithlinearalgebra": 46, "loss": [47, 92, 764], "arraywithloss": 48, "manipul": [49, 94, 780], "arraywithmanipul": 50, "norm": [51, 96, 862, 983], "arraywithnorm": 52, "random": [53, 98, 867], "arraywithrandom": 54, "search": [55, 100, 879], "arraywithsearch": 56, "arraywithset": 58, "sort": [59, 104, 893, 899, 900, 901, 902], "arraywithsort": 60, "statist": [61, 106, 904], "arraywithstatist": 62, "util": [63, 108, 937], "arraywithutil": 64, "wrap": [65, 110, 120], "add_ivy_array_instance_method": 66, "containerwithactiv": 68, "base": 69, "containerbas": 70, "contain": [71, 72, 122, 131, 164, 166, 174, 177, 179, 183, 185, 188, 191, 193, 197, 199, 202, 205, 208, 210, 213, 215, 218, 221, 223, 225, 227, 230, 232, 235, 238, 240, 253, 255, 332, 334, 337, 341, 345, 347, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 408, 411, 415, 419, 423, 427, 431, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 501, 503, 506, 510, 514, 518, 522, 526, 530, 534, 538, 542, 546, 549, 551, 554, 556, 559, 561, 565, 570, 572, 581, 598, 600, 645, 647, 649, 651, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 695, 697, 718, 767, 769, 772, 774, 777, 779, 783, 785, 788, 792, 796, 800, 804, 808, 812, 816, 818, 822, 826, 830, 834, 838, 865, 871, 874, 876, 887, 889, 896, 898, 901, 903, 907, 911, 915, 919, 923, 927, 931, 935, 940, 942, 945, 947], "multidevcontain": 73, "containerwithcr": 75, "containerwithdatatyp": 77, "containerwithdevic": 79, "containerwithelementwis": 81, "containerwithgener": 83, "containerwithgradi": 85, "containerwithimag": 87, "containerwithlay": 89, "containerwithlinearalgebra": 91, "containerwithloss": 93, "containerwithmanipul": 95, "containerwithnorm": 97, "containerwithrandom": 99, "containerwithsearch": 101, "containerwithset": 103, "containerwithsort": 105, "containerwithstatist": 107, "containerwithutil": 109, "add_ivy_container_instance_method": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 948], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 553, 555, 556, 557], "roll": [115, 814, 815, 816, 817], "add": [115, 343, 344, 345, 346], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 981, 982], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 260], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 168, 169], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 960], "optim": [132, 985, 989], "transpil": 133, "role": 133, "convert": [133, 958], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 948], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "maintain": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 629, 884, 885, 886, 890, 892], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 957], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": [162, 163, 164, 165], "static_softplu": 166, "tanh": [167, 558, 560, 561, 562], "constant": 170, "note": [171, 189, 192], "arang": [172, 173], "static_arang": 174, "asarrai": [175, 176, 177, 178], "static_asarrai": 179, "empti": 180, "empty_lik": [181, 182, 183, 184], "static_empty_lik": 185, "ey": [186, 187], "static_ey": 188, "from_dlpack": [189, 190, 191, 192], "static_from_dlpack": 193, "full": 194, "full_lik": [195, 196, 197, 198], "static_full_lik": 199, "linspac": [200, 201], "static_linspac": 202, "logspac": [203, 204], "static_logspac": 205, "meshgrid": [206, 207, 208, 209], "static_meshgrid": 210, "native_arrai": [211, 212, 213, 214], "static_native_arrai": 215, "ones": [216, 217], "static_on": 218, "ones_lik": [219, 220, 221, 222], "static_ones_lik": 223, "tril": [224, 226, 227, 228], "static_tril": 225, "triu": [229, 231, 232, 233], "static_triu": 230, "zero": [234, 236, 968], "static_zero": 235, "zeros_lik": [237, 239, 240, 241], "static_zeros_lik": 238, "as_ivy_dtyp": 246, "as_native_dtyp": 247, "astyp": 248, "broadcast_arrai": 249, "broadcast_to": 250, "can_cast": [251, 252, 253, 254], "static_can_cast": 255, "closest_valid_dtyp": 256, "default_dtyp": 257, "default_float_dtyp": 258, "default_int_dtyp": 259, "dtype_bit": 261, "finfo": 262, "function_supported_dtyp": 263, "function_unsupported_dtyp": 264, "iinfo": 265, "invalid_dtyp": 266, "is_float_dtyp": 267, "is_int_dtyp": 268, "promote_typ": 269, "result_typ": 270, "set_default_dtyp": 271, "set_default_float_dtyp": 272, "set_default_int_dtyp": 273, "type_promote_arrai": 274, "unset_default_dtyp": 275, "unset_default_float_dtyp": 276, "unset_default_int_dtyp": 277, "valid_dtyp": 278, "devcloneditem": 281, "devclonedit": 282, "devclonednest": 283, "devdistitem": 284, "devdistit": 285, "devdistnest": 286, "devmapp": 288, "devmappermultiproc": 289, "multidevitem": 291, "multidevit": 292, "multidevnest": 293, "profil": 294, "as_ivy_dev": 295, "as_native_dev": 296, "clear_mem_on_dev": 297, "default_devic": 298, "dev": 299, "dev_clon": 300, "dev_clone_arrai": 301, "dev_clone_it": 302, "dev_clone_nest": 303, "dev_dist": 304, "dev_dist_arrai": 305, "dev_dist_it": 306, "dev_dist_nest": 307, "dev_unifi": 308, "dev_unify_arrai": 309, "dev_unify_it": 310, "dev_unify_nest": 311, "dev_util": 312, "get_all_ivy_arrays_on_dev": 313, "gpu_is_avail": 314, "num_cpu_cor": 315, "num_gpu": 316, "num_ivy_arrays_on_dev": 317, "percent_used_mem_on_dev": 318, "print_all_ivy_arrays_on_dev": 319, "set_default_devic": 320, "set_split_factor": 321, "split_factor": 322, "split_func_cal": 323, "to_devic": 324, "total_mem_on_dev": 325, "tpu_is_avail": 326, "unset_default_devic": 327, "used_mem_on_dev": 328, "ab": [330, 331, 332, 333], "static_ab": 334, "aco": [335, 336, 337, 338], "acosh": [339, 340, 341, 342], "static_add": 347, "asin": [348, 349, 350, 351], "asinh": [352, 353, 354, 355], "atan": [356, 357, 358, 359], "atan2": [360, 361, 362, 363], "atanh": [364, 365, 366, 367], "bitwise_and": [368, 369, 370, 371], "bitwise_invert": [372, 373, 374, 375], "bitwise_left_shift": [376, 377, 378, 379], "bitwise_or": [380, 381, 382, 383], "bitwise_right_shift": [384, 385, 386, 387], "bitwise_xor": [388, 389, 390, 391], "ceil": [392, 393, 394, 395], "co": [396, 397, 398, 399], "cosh": [400, 401, 402, 403], "divid": [404, 405, 406, 407], "static_divid": 408, "equal": [409, 410, 411, 412], "erf": [413, 414, 415, 416], "exp": [417, 418, 419, 420], "expm1": [421, 422, 423, 424], "floor": [425, 426, 427, 428], "floor_divid": [429, 430, 431, 432], "greater": [433, 434, 435, 436], "greater_equ": [437, 438, 439, 440], "isfinit": [441, 442, 443, 444], "isinf": [445, 446, 447, 448], "isnan": [449, 450, 451, 452], "less": [453, 454, 455, 456], "less_equ": [457, 458, 459, 460], "log": [461, 462, 463, 464], "log10": [465, 466, 467, 468], "log1p": [469, 470, 471, 472], "log2": [473, 474, 475, 476], "logaddexp": [477, 478, 479, 480], "logical_and": [481, 482, 483, 484], "logical_not": [485, 486, 487, 488], "logical_or": [489, 490, 491, 492], "logical_xor": [493, 494, 495, 496], "maximum": 497, "minimum": 498, "multipli": [499, 500, 501, 502], "static_multipli": 503, "neg": [504, 505, 506, 507], "not_equ": [508, 509, 510, 511], "posit": [512, 513, 514, 515], "pow": [516, 517, 518, 519], "remaind": [520, 521, 522, 523], "round": [524, 525, 526, 527], "sign": [528, 529, 530, 531], "sin": [532, 533, 534, 535], "sinh": [536, 537, 538, 539], "sqrt": [540, 541, 542, 543], "squar": [544, 545, 546, 547], "subtract": [548, 550, 551, 552], "static_subtract": 549, "static_tan": 554, "static_tanh": 559, "trunc": [563, 564, 565, 566], "all_equ": [568, 569, 570, 571], "static_all_equ": 572, "arg_info": 573, "arg_nam": 574, "array_equ": 575, "arrays_equ": 576, "assert_supports_inplac": 577, "cache_fn": 578, "clip_matrix_norm": 579, "clip_vector_norm": [580, 581, 582], "container_typ": 583, "copy_arrai": 584, "cumprod": 585, "cumsum": 586, "current_backend_str": 587, "default": 588, "einops_rearrang": 589, "einops_reduc": 590, "einops_repeat": 591, "exist": 592, "floormod": 593, "fourier_encod": 594, "gather": 595, "gather_nd": [596, 597, 598, 599], "static_gather_nd": 600, "get_all_arrays_in_memori": 601, "get_min_bas": 602, "get_min_denomin": 603, "get_num_dim": 604, "get_referrers_recurs": 605, "has_nan": 606, "indices_wher": 607, "inplace_arrays_support": 608, "inplace_decr": 609, "inplace_incr": 610, "inplace_upd": 611, "inplace_variables_support": 612, "is_arrai": 613, "is_ivy_arrai": 614, "is_ivy_contain": 615, "is_native_arrai": 616, "match_kwarg": 617, "multiprocess": 618, "num_arrays_in_memori": 619, "one_hot": 620, "print_all_arrays_in_memori": 621, "queue_timeout": 622, "scatter_flat": 623, "scatter_nd": 624, "set_min_bas": 625, "set_min_denomin": 626, "set_queue_timeout": 627, "set_tmp_dir": 628, "shape_to_tupl": 630, "stable_divid": 631, "stable_pow": 632, "supports_inplac": 633, "tmp_dir": 634, "to_list": 635, "to_numpi": 636, "to_scalar": 637, "try_else_non": 638, "unstack": 639, "value_is_nan": 640, "adam_step": [643, 644, 645, 646], "static_adam_step": 647, "adam_upd": [648, 649, 650], "static_adam_upd": 651, "execute_with_gradi": 652, "gradient_descent_upd": [653, 654, 655], "static_gradient_descent_upd": 656, "is_vari": [657, 658, 659], "static_is_vari": 660, "lamb_upd": [661, 662, 663], "static_lamb_upd": 664, "lars_upd": [665, 666, 667], "static_lars_upd": 668, "optimizer_upd": [669, 670, 671], "static_optimizer_upd": 672, "set_with_grad": 673, "stop_gradi": 674, "unset_with_grad": 675, "variabl": 676, "variable_data": 677, "with_grad": 678, "conv1d": [680, 970], "conv1d_transpos": 681, "conv2d": [682, 972], "conv2d_transpos": 683, "conv3d": [684, 974], "conv3d_transpos": 685, "depthwise_conv2d": 686, "dropout": [687, 977], "lstm_updat": 689, "multi_head_attent": 690, "scaled_dot_product_attent": 691, "choleski": [693, 694, 695, 696], "static_choleski": 697, "cross": [698, 699, 700], "det": [701, 702, 703], "diagon": [704, 705, 706], "eigh": [707, 708, 709], "eigvalsh": [710, 711, 712], "inv": [713, 714, 715], "matmul": [716, 717, 718, 719], "matrix_norm": [720, 721, 722], "matrix_pow": 723, "matrix_rank": [724, 725, 726], "matrix_transpos": [727, 728, 729], "outer": [730, 731, 732], "pinv": [733, 734, 735], "qr": [736, 737, 738], "slogdet": 739, "solv": [740, 741, 742], "svd": [743, 744, 745], "svdval": [746, 747, 748], "tensordot": [749, 750, 751], "trace": [752, 753, 754], "vecdot": [755, 756, 757], "vector_norm": [758, 759, 760], "vector_to_skew_symmetric_matrix": [761, 762, 763], "binary_cross_entropi": [765, 766, 767, 768], "static_binary_cross_entropi": 769, "cross_entropi": [770, 771, 772, 773], "static_cross_entropi": 774, "sparse_cross_entropi": [775, 776, 777, 778], "static_sparse_cross_entropi": 779, "clip": [781, 782, 783, 784], "static_clip": 785, "concat": [786, 787, 788, 789], "constant_pad": [790, 791, 792, 793], "expand_dim": [794, 795, 796, 797], "flip": [798, 799, 800, 801], "permute_dim": [802, 803, 804, 805], "repeat": [806, 807, 808, 809], "reshap": [810, 811, 812, 813], "static_rol": 818, "split": 819, "squeez": [820, 821, 822, 823], "stack": [824, 825, 826, 827], "swapax": [828, 829, 830, 831], "tile": [832, 833, 834, 835], "zero_pad": [836, 837, 838, 839], "meta": 840, "fomaml_step": 841, "maml_step": 842, "reptile_step": 843, "nest": 844, "all_nested_indic": 845, "copy_nest": 846, "index_nest": 847, "insert_into_nest_at_index": 848, "insert_into_nest_at_indic": 849, "map": 850, "map_nest_at_index": 851, "map_nest_at_indic": 852, "multi_index_nest": 853, "nested_ani": 854, "nested_indices_wher": 855, "nested_map": 856, "nested_multi_map": 857, "prune_nest_at_index": 858, "prune_nest_at_indic": 859, "set_nest_at_index": 860, "set_nest_at_indic": 861, "layer_norm": [863, 864, 865, 866], "multinomi": 868, "randint": [869, 870], "static_randint": 871, "random_norm": 872, "random_uniform": [873, 874, 875], "static_random_uniform": 876, "seed": 877, "shuffl": 878, "argmax": 880, "argmin": 881, "nonzero": 882, "where": 883, "depend": [884, 885, 886, 890, 892], "output": [884, 885, 886, 890, 892], "unique_al": 885, "unique_count": [886, 888, 889, 890], "static_unique_count": 887, "unique_invers": 891, "unique_valu": 892, "argsort": [894, 895, 896, 897], "static_argsort": 898, "static_sort": 903, "einsum": [905, 906, 907, 908], "max": [909, 910, 911, 912], "mean": [913, 914, 915, 916], "min": [917, 918, 919, 920], "prod": [921, 922, 923, 924], "std": [925, 926, 927, 928], "sum": [929, 930, 931, 932], "var": [933, 934, 935, 936], "all": [938, 939, 940, 941], "static_al": 942, "ani": [943, 944, 945, 946], "static_ani": 947, "content": 948, "overview": 948, "quick": 948, "start": 948, "roadmap": [948, 954], "citat": 948, "inspect": 951, "add_array_spec": 952, "fn_array_spec": 953, "geglu": 956, "to_ivy_modul": 959, "firstlayersiren": 962, "glorotuniform": 963, "Ones": 965, "siren": 966, "conv1dtranspos": 971, "conv2dtranspos": 973, "conv3dtranspos": 975, "depthwiseconv2d": 976, "lstm": 978, "multiheadattent": 980, "layernorm": 984, "adam": 986, "lamb": 987, "lar": 988, "sgd": 990, "sequenti": [991, 992], "verbos": 994, "cprint": 995}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})